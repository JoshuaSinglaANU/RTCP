{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../../src/tests/main.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL/TESTS/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\njr                        = JSON.stringify\nIC                        = require '../..'\n{ inspect, }              = require 'util'\nxrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\nxrpr2                     = ( x ) -> inspect x, { colors: yes, breakLength: 20, maxArrayLength: Infinity, depth: Infinity, }\n#...........................................................................................................\nICQL                      = require '../..'\nPATH                      = require 'path'\n\n#-----------------------------------------------------------------------------------------------------------\nget_icql_settings = ( remove_db = false ) ->\n  R                 = {}\n  R.connector       = require 'better-sqlite3'\n  R.db_path         = '/tmp/icql.db'\n  R.icql_path       = PATH.resolve PATH.join __dirname, '../../src/tests/test.icql'\n  if remove_db\n    try\n      ( require 'fs' ).unlinkSync R.db_path\n    catch error\n      throw error unless ( error.code is 'ENOENT' )\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"oneliners\" ] = ( T, done ) ->\n  PATH              = require 'path'\n  IC                = require 'intercourse'\n  intercourse_path  = require.resolve 'intercourse'\n  demo_path         = PATH.join intercourse_path, '../../demos/sqlite-demo.icql'\n  debug '22999', demo_path\n  db                = {}\n  ICQL.definitions_from_path_sync db, demo_path\n  debug '33442', db\n  return done()\n  throw new Error \"sorry no tests as yet\"\n  probes_and_matchers = [\n    # [\"procedure foobar:  some text\\n  illegal line\",null,'illegal follow-up after one-liner']\n    [\"procedure foobar: some text\",{\"foobar\":{\"type\":\"procedure\",\"null\":{\"text\":\"some text\\n\",\"location\":{\"line_nr\":1},\"kenning\":\"null\",\"type\":\"procedure\"}}},null]\n    [\"procedure foobar(): some text\",{\"foobar\":{\"type\":\"procedure\",\"()\":{\"text\":\"some text\\n\",\"location\":{\"line_nr\":1},\"kenning\":\"()\",\"type\":\"procedure\",\"signature\":[]}}},null]\n    [\"procedure foobar( first ): some text\",{\"foobar\":{\"type\":\"procedure\",\"(first)\":{\"text\":\"some text\\n\",\"location\":{\"line_nr\":1},\"kenning\":\"(first)\",\"type\":\"procedure\",\"signature\":[\"first\"]}}},null]\n    [\"procedure foobar(first): some text\",{\"foobar\":{\"type\":\"procedure\",\"(first)\":{\"text\":\"some text\\n\",\"location\":{\"line_nr\":1},\"kenning\":\"(first)\",\"type\":\"procedure\",\"signature\":[\"first\"]}}},null]\n    [\"procedure foobar( first, ): some text\",{\"foobar\":{\"type\":\"procedure\",\"(first)\":{\"text\":\"some text\\n\",\"location\":{\"line_nr\":1},\"kenning\":\"(first)\",\"type\":\"procedure\",\"signature\":[\"first\"]}}},null]\n    [\"procedure foobar(first,): some text\",{\"foobar\":{\"type\":\"procedure\",\"(first)\":{\"text\":\"some text\\n\",\"location\":{\"line_nr\":1},\"kenning\":\"(first)\",\"type\":\"procedure\",\"signature\":[\"first\"]}}},null]\n    [\"procedure foobar( first, second ): some text\",{\"foobar\":{\"type\":\"procedure\",\"(first,second)\":{\"text\":\"some text\\n\",\"location\":{\"line_nr\":1},\"kenning\":\"(first,second)\",\"type\":\"procedure\",\"signature\":[\"first\",\"second\"]}}},null]\n    [\"procedure foobar( first, second, ): some text\",{\"foobar\":{\"type\":\"procedure\",\"(first,second)\":{\"text\":\"some text\\n\",\"location\":{\"line_nr\":1},\"kenning\":\"(first,second)\",\"type\":\"procedure\",\"signature\":[\"first\",\"second\"]}}},null]\n    ]\n  #.........................................................................................................\n  # for [ probe, matcher, error, ] in probes_and_matchers\n  #   await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n  #     # try\n  #     result = await IC.read_definitions_from_text probe\n  #     # catch error\n  #     #   return resolve error\n  #     # debug '29929', xrpr2 result\n  #     resolve result\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"parameters are expanded in procedures\" ] = ( T, done ) ->\n  db                = ICQL.bind get_icql_settings()\n  # debug 'µ44433', db\n  db.create_demo_table()\n  #.........................................................................................................\n  db.$.function 'echo', { deterministic: false, varargs: true  }, ( P... ) -> urge ( CND.grey 'DB' ), P...;  null\n  db.$.function 'e',    { deterministic: false, varargs: false }, ( x    ) -> urge ( CND.grey 'DB' ), rpr x; x\n  #.........................................................................................................\n  debug db.$.all_rows db.read_demo_rows()\n  debug db.$.all_rows db.select_by_rowid { rowid: 2, }\n  try\n    db.update_by_rowid { rowid: 2, status: 'bar', }\n  catch error\n    debug 'µ33555', error.code\n    debug 'µ33555', error.name\n    debug 'µ33555', ( k for k of error )\n    debug 'µ33555', error.message\n    # TypeError\n    process.exit 1\n  debug db.$.all_rows db.select_by_rowid { rowid: 2, }\n  #.........................................................................................................\n  # statement = db.$.prepare \"select rowid, * from demo where rowid = $rowid;\"\n  # info 'µ00908', [ ( statement.iterate { rowid: 2, } )..., ]\n  # # statement = db.$.prepare \"select 42; select rowid, * from demo where rowid = $rowid;\"\n  # # statement = db.$.prepare \"update demo set status = 'yes!' where rowid = $rowid;\"\n  # # info 'µ00908', statement.run { rowid: 2, }\n  # info 'µ00908', db.$.run \"update demo set status = 'yes!' where rowid = $rowid;\", { rowid: 2, extra: true, }\n  # debug db.$.all_rows db.select_by_rowid { rowid: 2, }\n\n  # probes_and_matchers = [\n  #   # [\"procedure foobar:  some text\\n  illegal line\",null,'illegal follow-up after one-liner']\n  #   [\"procedure foobar: some text\",{\"foobar\":{\"type\":\"procedure\",\"null\":{\"text\":\"some text\\n\",\"location\":{\"line_nr\":1},\"kenning\":\"null\",\"type\":\"procedure\"}}},null]\n  #   [\"procedure foobar(): some text\",{\"foobar\":{\"type\":\"procedure\",\"()\":{\"text\":\"some text\\n\",\"location\":{\"line_nr\":1},\"kenning\":\"()\",\"type\":\"procedure\",\"signature\":[]}}},null]\n  #   [\"procedure foobar( first ): some text\",{\"foobar\":{\"type\":\"procedure\",\"(first)\":{\"text\":\"some text\\n\",\"location\":{\"line_nr\":1},\"kenning\":\"(first)\",\"type\":\"procedure\",\"signature\":[\"first\"]}}},null]\n  #   [\"procedure foobar(first): some text\",{\"foobar\":{\"type\":\"procedure\",\"(first)\":{\"text\":\"some text\\n\",\"location\":{\"line_nr\":1},\"kenning\":\"(first)\",\"type\":\"procedure\",\"signature\":[\"first\"]}}},null]\n  #   [\"procedure foobar( first, ): some text\",{\"foobar\":{\"type\":\"procedure\",\"(first)\":{\"text\":\"some text\\n\",\"location\":{\"line_nr\":1},\"kenning\":\"(first)\",\"type\":\"procedure\",\"signature\":[\"first\"]}}},null]\n  #   [\"procedure foobar(first,): some text\",{\"foobar\":{\"type\":\"procedure\",\"(first)\":{\"text\":\"some text\\n\",\"location\":{\"line_nr\":1},\"kenning\":\"(first)\",\"type\":\"procedure\",\"signature\":[\"first\"]}}},null]\n  #   [\"procedure foobar( first, second ): some text\",{\"foobar\":{\"type\":\"procedure\",\"(first,second)\":{\"text\":\"some text\\n\",\"location\":{\"line_nr\":1},\"kenning\":\"(first,second)\",\"type\":\"procedure\",\"signature\":[\"first\",\"second\"]}}},null]\n  #   [\"procedure foobar( first, second, ): some text\",{\"foobar\":{\"type\":\"procedure\",\"(first,second)\":{\"text\":\"some text\\n\",\"location\":{\"line_nr\":1},\"kenning\":\"(first,second)\",\"type\":\"procedure\",\"signature\":[\"first\",\"second\"]}}},null]\n  #   ]\n  #.........................................................................................................\n  # for [ probe, matcher, error, ] in probes_and_matchers\n  #   await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n  #     # try\n  #     result = await IC.read_definitions_from_text probe\n  #     # catch error\n  #     #   return resolve error\n  #     # debug '29929', xrpr2 result\n  #     resolve result\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"as_sql\" ] = ( T, done ) ->\n  PATH              = require 'path'\n  db                = ICQL.bind get_icql_settings()\n  probes_and_matchers = [\n    [true,'1',]\n    [false,'0',]\n    [42,'42',]\n    ['text',\"'text'\",]\n    [\"text with 'quotes'\",\"'text with ''quotes'''\",]\n    [[1,2,3],\"'[1,2,3]'\",]\n    [[],\"'[]'\",]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      resolve db.$.as_sql probe\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"interpolate\" ] = ( T, done ) ->\n  PATH              = require 'path'\n  db                = ICQL.bind get_icql_settings()\n  probes_and_matchers = [\n    [[\"foo, $bar, baz\",{bar:42,}],\"foo, 42, baz\"]\n    [[\"select * from t where d = $d;\",{bar:42,}],null,\"unable to express 'undefined' as SQL literal\"]\n    [[\"select * from t where d = $d;\",{d:true,}],\"select * from t where d = 1;\"]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ sql, Q, ] = probe\n      resolve db.$.interpolate sql, Q\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"fragments return interpolated source text\" ] = ( T, done ) ->\n  db                = ICQL.bind get_icql_settings()\n  # debug 'µ44430', db\n  # debug 'µ44430', db.$.sql\n  # debug 'µ44430', db.create_demo_table_middle\n  key     = 'somekey'\n  value   = 'somevalue'\n  status  = 'somestatus'\n  first   = db.create_demo_table_first()\n  middle  = db.create_demo_table_middle { key, value, status, }\n  last    = db.create_demo_table_last()\n  T.eq first,   \"drop table if exists demo;\\ncreate table demo (\\n  key     text,\\n  value   text,\\n  status  text );\\ninsert into demo values\"\n  T.eq middle,  \"( 'somekey', 'somevalue', 'somestatus' )\"\n  T.eq last,    \";\"\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"_demo 2\" ] = ( T, done ) ->\n  settings  = @get_settings()\n  db        = await ICQL.bind settings\n  db.load join_path settings.sqlitemk_path, 'extensions/amatch.so'\n  db.load join_path settings.sqlitemk_path, 'extensions/csv.so'\n  # R.$.db.exec \"\"\"select load_extension( 'fts5' );\"\"\"\n  db.import_table_texnames()\n  db.create_token_tables()\n  db.populate_token_tables()\n  # # whisper '-'.repeat 108\n  # # info row for row from db.fetch_texnames()\n  whisper '-'.repeat 108\n  urge 'fetch_texnames';        info xrpr row for row from db.fetch_texnames { limit: 100, }\n  # urge 'fetch_rows_of_txftsci'; info xrpr row for row from db.fetch_rows_of_txftsci { limit: 5, }\n  # urge 'fetch_rows_of_txftscs'; info xrpr row for row from db.fetch_rows_of_txftscs { limit: 5, }\n  urge 'fetch_stats'; info xrpr row for row from db.fetch_stats()\n  whisper '-'.repeat 108\n  urge 'fetch_token_matches'\n  whisper '-'.repeat 108\n  info ( xrpr row ) for row from db.fetch_token_matches { q: 'Iota', limit: 10, }\n  whisper '-'.repeat 108\n  info ( xrpr row ) for row from db.fetch_token_matches { q: 'acute', limit: 10, }\n  whisper '-'.repeat 108\n  info ( xrpr row ) for row from db.fetch_token_matches { q: 'u', limit: 10, }\n  whisper '-'.repeat 108\n  info ( xrpr row ) for row from limit 3, db.fetch_token_matches { q: 'mathbb', limit: 10, }\n  # debug ( k for k of iterator )\n  return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"x\" ] = ( T, done ) ->\n#   T.eq 42, 42\n#   T.eq 42, 43\n#   done()\n#   return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"foreign keys\" ] = ( T, done ) ->\n  settings        = get_icql_settings true\n  db              = ICQL.bind settings\n  db.create_tables_with_foreign_key()\n  db.populate_tables_with_foreign_key()\n  rows            = db.$.all_rows db.select_from_tables_with_foreign_key()\n  T.eq rows, [{\"id\":\"id1\",\"key\":\"foo\"},{\"id\":\"id2\",\"key\":\"foo\"},{\"id\":\"id3\",\"key\":\"other\"},{\"id\":\"id4\",\"key\":\"bar\"}]\n  db.drop_tables_with_foreign_key()\n  #---------------------------------------------------------------------------------------------------------\n  db              = ICQL.bind settings\n  db.create_tables_with_foreign_key()\n  T.eq [],        db.$.dependencies_of 't1'\n  T.eq [ 't1' ],  db.$.dependencies_of 't2'\n  #---------------------------------------------------------------------------------------------------------\n  T.eq db.$.get_toposort(), [{\"name\":\"t2\",\"type\":\"table\"},{\"name\":\"t1\",\"type\":\"table\"},{\"name\":\"sqlite_autoindex_t1_1\",\"type\":\"index\"},{\"name\":\"sqlite_autoindex_t2_1\",\"type\":\"index\"}]\n  #---------------------------------------------------------------------------------------------------------\n  db.populate_tables_with_foreign_key()\n  T.eq rows, [{\"id\":\"id1\",\"key\":\"foo\"},{\"id\":\"id2\",\"key\":\"foo\"},{\"id\":\"id3\",\"key\":\"other\"},{\"id\":\"id4\",\"key\":\"bar\"}]\n  db.$.clear()\n  T.eq db.$.get_toposort(), []\n  # db.drop_tables_with_foreign_key()\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"mirror DB to memory\" ] = ( T, done ) ->\n  settings        = get_icql_settings true\n  db              = ICQL.bind settings\n  db.create_tables_with_foreign_key()\n  db.populate_tables_with_foreign_key()\n  rows            = db.$.all_rows db.select_from_tables_with_foreign_key()\n  T.eq db.$.get_toposort(), []\n  db.$.clear()\n  T.eq db.$.get_toposort(), []\n  # db.drop_tables_with_foreign_key()\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"_error messages\" ] = ( T, done ) ->\n  ### demo to show that printout gets limited for long statements ###\n  settings        = get_icql_settings true\n  db              = ICQL.bind settings\n  db.create_demo_table()\n  sql = \"select\n    1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,\n    1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037,\n    1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,\n    1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075,\n    1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094,\n    1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113,\n    1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132,\n    1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151,\n    1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170,\n    1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189,\n    1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208,\n    1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227,\n    1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246,\n    1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265,\n    1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284,\n    1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303,\n    1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322,\n    1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341,\n    1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360,\n    from demo;\"\n  try\n    db.$.query sql\n  catch error\n    null\n  done()\n\n\n############################################################################################################\nunless module.parent?\n  # test @\n  test @[ \"mirror DB to memory\" ]\n\n\n"
  ]
}