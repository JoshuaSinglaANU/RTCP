{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "/home/flow/jzr/intertype/src/tests/basics.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\n# njs_util                  = require 'util'\nnjs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr.bind CND\nbadge                     = 'INTERTYPE/tests/main'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\npraise                    = CND.get_logger 'praise',    badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\nINTERTYPE                 = require '../..'\n{ Intertype, }            = INTERTYPE\n{ assign\n  jr\n  flatten\n  xrpr\n  intersection_of\n  js_type_of }            = require '../helpers'\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"_prototype keys\" ] = ( T ) ->\n  isa = @\n\n  x =\n    foo: 42\n    bar: 108\n  y = Object.create x\n  y.bar = 'something'\n  y.baz = 'other thing'\n\n  ```\n  const person = {\n    isHuman: false,\n    printIntroduction: function () {\n      console.log(`My name is ${this.name}. Am I human? ${this.isHuman}`);\n    }\n  };\n\n  const me = Object.create(person);\n  me.name = \"Matthew\"; // \"name\" is a property set on \"me\", but not on \"person\"\n  me.isHuman = true; // inherited properties can be overwritten\n\n  me.printIntroduction();\n\n  ```\n  # urge me.prototype?\n  # urge me.__proto__?\n\n  info 'µ1', jr isa.generator_function isa.all_own_keys_of\n  info 'µ2', jr isa.values_of isa.all_own_keys_of 'abc'\n  info 'µ3', jr isa.values_of isa.all_keys_of 'abc'\n  info 'µ4', jr isa.values_of isa.all_keys_of x\n  info 'µ5', jr isa.values_of isa.all_keys_of y\n  info 'µ5', jr isa.values_of isa.all_keys_of y, true\n  info 'µ6', jr isa.values_of isa.all_keys_of me\n  info 'µ7', jr isa.values_of isa.all_keys_of {}\n  info 'µ8', jr isa.values_of isa.all_keys_of Object.create null\n  info 'µ9', isa.keys_of me\n  info 'µ9', jr isa.values_of isa.keys_of me\n  # info 'µ10', jr ( k for k of me )\n  # info 'µ11', jr Object.keys me\n  # info 'µ12', isa.values_of isa.all_own_keys_of true\n  # info 'µ13', isa.values_of isa.all_own_keys_of undefined\n  # info 'µ14', isa.values_of isa.all_own_keys_of null\n\n  # debug '' + rpr Object.create null\n  # debug isa.values_of isa.all_keys_of Object::\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"isa\" ] = ( T, done ) ->\n  intertype = new Intertype()\n  { isa\n    validate\n    type_of\n    types_of\n    size_of\n    declare\n    all_keys_of } = intertype.export()\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ \"isa( 'callable', 'xxx'                                  )\", false,                 null, ]\n    [ \"isa( 'callable', function () {}                         )\", true,                  null, ]\n    [ \"isa( 'callable', async function () { await 42 }         )\", true,                  null, ]\n    [ \"isa( 'callable', function* () { yield 42 }              )\", true,                  null, ]\n    [ \"isa( 'callable', ( function* () { yield 42 } )()        )\", false,                 null, ]\n    [ \"isa( 'date',          new Date()                        )\", true,                  null, ]\n    [ \"isa( 'date',          true                              )\", false,                 null, ]\n    [ \"isa( 'date',          'helo'                            )\", false,                 null, ]\n    [ \"isa( 'date',          2                                 )\", false,                 null, ]\n    [ \"isa( 'date',          Date.now()                        )\", false,                 null, ]\n    [ \"isa( 'finite',        123                               )\", true,                  null, ]\n    [ \"isa( 'global',        global                            )\", true,                  null, ]\n    [ \"isa( 'integer',       123                               )\", true,                  null, ]\n    [ \"isa( 'integer',       42                                )\", true,                  null, ]\n    [ \"isa( 'number',        123                               )\", true,                  null, ]\n    [ \"isa( 'number',        42                                )\", true,                  null, ]\n    [ \"isa( 'float',         123                               )\", true,                  null, ]\n    [ \"isa( 'float',         42                                )\", true,                  null, ]\n    [ \"isa( 'number',        NaN                               )\", false,                 null, ]\n    [ \"isa( 'float',         NaN                               )\", false,                 null, ]\n    [ \"isa( 'safeinteger',   123                               )\", true,                  null, ]\n    [ \"isa( 'text',          'x'                               )\", true,                  null, ]\n    [ \"isa( 'text',          NaN                               )\", false,                 null, ]\n    [ \"isa.even(             42                                )\", true,                  null, ]\n    [ \"isa.finite(           123                               )\", true,                  null, ]\n    [ \"isa.integer(          123                               )\", true,                  null, ]\n    [ \"isa.integer(          42                                )\", true,                  null, ]\n    [ \"isa.weakmap(           new WeakMap()                    )\", true,                  null, ]\n    [ \"isa.map(               new Map()                        )\", true,                  null, ]\n    [ \"isa.set(               new Set()                        )\", true,                  null, ]\n    [ \"isa.date(              new Date()                       )\", true,                  null, ]\n    [ \"isa.error(             new Error()                      )\", true,                  null, ]\n    [ \"isa.list(              []                               )\", true,                  null, ]\n    [ \"isa.boolean(           true                             )\", true,                  null, ]\n    [ \"isa.boolean(           false                            )\", true,                  null, ]\n    [ \"isa.function(          ( () => {} )                     )\", true,                  null, ]\n    [ \"isa.asyncfunction(     ( async () => { await f() } )    )\", true,                  null, ]\n    [ \"isa.null(              null                             )\", true,                  null, ]\n    [ \"isa.text(              'helo'                           )\", true,                  null, ]\n    [ \"isa.chr(               ' '                              )\", true,                  null, ]\n    [ \"isa.chr(               'x'                              )\", true,                  null, ]\n    [ \"isa.chr(               ''                               )\", false,                 null, ]\n    [ \"isa.chr(               'ab'                             )\", false,                 null, ]\n    [ \"isa.chr(               '𪜀'                             )\", true,                  null, ]\n    [ \"isa.undefined(         undefined                        )\", true,                  null, ]\n    [ \"isa.global(            global                           )\", true,                  null, ]\n    [ \"isa.regex(             /^xxx$/g                         )\", true,                  null, ]\n    [ \"isa.object(            {}                               )\", true,                  null, ]\n    [ \"isa.nan(               NaN                              )\", true,                  null, ]\n    [ \"isa.infinity(          1 / 0                            )\", true,                  null, ]\n    [ \"isa.infinity(          -1 / 0                           )\", true,                  null, ]\n    [ \"isa.number(            12345                            )\", true,                  null, ]\n    [ \"isa.buffer(            new Buffer( 'xyz' )              )\", true,                  null, ]\n    [ \"isa.uint8array(        new Buffer( 'xyz' )              )\", true,                  null, ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      result = eval probe\n      # log jr [ probe, result, ]\n      # resolve result\n      resolve result\n      return null\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"type_of\" ] = ( T, done ) ->\n  intertype = new Intertype()\n  { isa\n    validate\n    type_of\n    types_of\n    size_of\n    declare\n    all_keys_of } = intertype.export()\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ \"type_of( new WeakMap()                                  )\", 'weakmap',             null, ]\n    [ \"type_of( new Map()                                      )\", 'map',                 null, ]\n    [ \"type_of( new Set()                                      )\", 'set',                 null, ]\n    [ \"type_of( new Date()                                     )\", 'date',                null, ]\n    [ \"type_of( new Error()                                    )\", 'error',               null, ]\n    [ \"type_of( []                                             )\", 'list',                null, ]\n    [ \"type_of( true                                           )\", 'boolean',             null, ]\n    [ \"type_of( false                                          )\", 'boolean',             null, ]\n    [ \"type_of( ( () => {} )                                   )\", 'function',            null, ]\n    [ \"type_of( ( async () => { await f() } )                  )\", 'asyncfunction',       null, ]\n    [ \"type_of( null                                           )\", 'null',                null, ]\n    [ \"type_of( 'helo'                                         )\", 'text',                null, ]\n    [ \"type_of( undefined                                      )\", 'undefined',           null, ]\n    [ \"type_of( global                                         )\", 'global',              null, ]\n    [ \"type_of( /^xxx$/g                                       )\", 'regex',               null, ]\n    [ \"type_of( {}                                             )\", 'object',              null, ]\n    [ \"type_of( NaN                                            )\", 'nan',                 null, ]\n    [ \"type_of( 1 / 0                                          )\", 'infinity',            null, ]\n    [ \"type_of( -1 / 0                                         )\", 'infinity',            null, ]\n    [ \"type_of( 12345                                          )\", 'float',               null, ]\n    [ \"type_of( 'xxx'                                          )\", 'text',                null, ]\n    [ \"type_of( function () {}                                 )\", 'function',            null, ]\n    [ \"type_of( async function () { await 42 }                 )\", 'asyncfunction',       null, ]\n    [ \"type_of( function* () { yield 42 }                      )\", 'generatorfunction',   null, ]\n    [ \"type_of( ( function* () { yield 42 } )()                )\", 'generator',           null, ]\n    [ \"type_of( 123                                            )\", 'float',               null, ]\n    [ \"type_of( 42                                             )\", 'float',               null, ]\n    [ \"type_of( []                                             )\", 'list',                null, ]\n    [ \"type_of( global                                         )\", 'global',              null, ]\n    [ \"type_of( new Date()                                     )\", 'date',                null, ]\n    [ \"type_of( {}                                             )\", 'object',              null, ]\n    [ \"type_of( new Buffer(            'helo'  )               )\", 'buffer',              null, ]\n    [ \"type_of( new ArrayBuffer(       42      )               )\", 'arraybuffer',         null, ]\n    [ \"type_of( new Int8Array(         5       )               )\", 'int8array',           null, ]\n    [ \"type_of( new Uint8Array(        5       )               )\", 'uint8array',          null, ]\n    [ \"type_of( new Uint8ClampedArray( 5       )               )\", 'uint8clampedarray',   null, ]\n    [ \"type_of( new Int16Array(        5       )               )\", 'int16array',          null, ]\n    [ \"type_of( new Uint16Array(       5       )               )\", 'uint16array',         null, ]\n    [ \"type_of( new Int32Array(        5       )               )\", 'int32array',          null, ]\n    [ \"type_of( new Uint32Array(       5       )               )\", 'uint32array',         null, ]\n    [ \"type_of( new Float32Array(      5       )               )\", 'float32array',        null, ]\n    [ \"type_of( new Float64Array(      5       )               )\", 'float64array',        null, ]\n    [ \"type_of( new Promise( ( rslv, rjct ) => {} )            )\", 'promise',             null, ]\n    [ \"type_of( async function* () { await f(); yield 42; }       )\", 'asyncgeneratorfunction', null, ]\n    [ \"type_of( ( async function* () { await f(); yield 42; } )() )\", 'asyncgenerator',         null, ]\n    [ \"type_of( new Number(  42   )                            )\", \"wrapper\",                   ]\n    [ \"type_of( new String(  '42' )                            )\", \"wrapper\",                   ]\n    [ \"type_of( new Boolean( true )                            )\", \"wrapper\",                   ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      result = eval probe\n      # log jr [ probe, result, ]\n      # resolve result\n      resolve result\n      return null\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"validate\" ] = ( T, done ) ->\n  intertype = new Intertype()\n  { isa\n    validate\n    type_of\n    types_of\n    size_of\n    declare\n    all_keys_of } = intertype.export()\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ \"validate( 'callable', 'xxx'                                      )\", false, 'not a valid callable',    ]\n    [ \"validate( 'callable', ( function* () { yield 42 } )()            )\", false, 'not a valid callable',    ]\n    [ \"validate( 'date',          true                                  )\", false, 'not a valid date',        ]\n    [ \"validate( 'date',          'helo'                                )\", false, 'not a valid date',        ]\n    [ \"validate( 'date',          2                                     )\", false, 'not a valid date',        ]\n    [ \"validate( 'date',          Date.now()                            )\", false, 'not a valid date',        ]\n    [ \"validate( 'number',        NaN                                   )\", false, 'not a valid number',      ]\n    [ \"validate( 'number',        NaN                                   )\", false, 'not a valid number',      ]\n    [ \"validate( 'text',          NaN                                   )\", false, 'not a valid text',        ]\n    [ \"validate( 'callable', function () {}                             )\", true,                  null, ]\n    [ \"validate( 'callable', async function () { await 42 }             )\", true,                  null, ]\n    [ \"validate( 'callable', function* () { yield 42 }                  )\", true,                  null, ]\n    [ \"validate( 'date',          new Date()                            )\", true,                  null, ]\n    [ \"validate( 'finite',        123                                   )\", true,                  null, ]\n    [ \"validate( 'global',        global                                )\", true,                  null, ]\n    [ \"validate( 'integer',       123                                   )\", true,                  null, ]\n    [ \"validate( 'integer',       42                                    )\", true,                  null, ]\n    [ \"validate( 'number',        123                                   )\", true,                  null, ]\n    [ \"validate( 'number',        42                                    )\", true,                  null, ]\n    [ \"validate( 'safeinteger',   123                                   )\", true,                  null, ]\n    [ \"validate( 'text',          'x'                                   )\", true,                  null, ]\n    [ \"validate.even(             42                                    )\", true,                  null, ]\n    [ \"validate.finite(           123                                   )\", true,                  null, ]\n    [ \"validate.integer(          123                                   )\", true,                  null, ]\n    [ \"validate.integer(          42                                    )\", true,                  null, ]\n    [ \"validate.number(           123                                   )\", true,                  null, ]\n    [ \"validate.safeinteger(      123                                   )\", true,                  null, ]\n    [ \"validate.weakmap(           new WeakMap()                        )\", true,                  null, ]\n    [ \"validate.map(               new Map()                            )\", true,                  null, ]\n    [ \"validate.set(               new Set()                            )\", true,                  null, ]\n    [ \"validate.date(              new Date()                           )\", true,                  null, ]\n    [ \"validate.error(             new Error()                          )\", true,                  null, ]\n    [ \"validate.list(              []                                   )\", true,                  null, ]\n    [ \"validate.boolean(           true                                 )\", true,                  null, ]\n    [ \"validate.boolean(           false                                )\", true,                  null, ]\n    [ \"validate.function(          ( () => {} )                         )\", true,                  null, ]\n    [ \"validate.asyncfunction(     ( async () => { await f() } )        )\", true,                  null, ]\n    [ \"validate.null(              null                                 )\", true,                  null, ]\n    [ \"validate.text(              'helo'                               )\", true,                  null, ]\n    [ \"validate.undefined(         undefined                            )\", true,                  null, ]\n    [ \"validate.global(            global                               )\", true,                  null, ]\n    [ \"validate.regex(             /^xxx$/g                             )\", true,                  null, ]\n    [ \"validate.object(            {}                                   )\", true,                  null, ]\n    [ \"validate.nan(               NaN                                  )\", true,                  null, ]\n    [ \"validate.infinity(          1 / 0                                )\", true,                  null, ]\n    [ \"validate.infinity(          -1 / 0                               )\", true,                  null, ]\n    [ \"validate.number(            12345                                )\", true,                  null, ]\n    [ \"validate.buffer(            new Buffer( 'xyz' )                  )\", true,                  null, ]\n    [ \"validate.uint8array(        new Buffer( 'xyz' )                  )\", true,                  null, ]\n    [ \"validate.promise(           new Promise( ( rslv, rjct ) => {} )  )\", true,                  null, ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      result = eval probe\n      # log jr [ probe, result, ]\n      # resolve result\n      resolve result\n      return null\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"types_of\" ] = ( T, done ) ->\n  #.........................................................................................................\n  intertype = new Intertype()\n  { isa\n    validate\n    type_of\n    types_of\n    size_of\n    declare\n    all_keys_of } = intertype.export()\n  #.........................................................................................................\n  prms = new Promise ( rslv, rjct ) => return\n  probes_and_matchers = [\n    [123,       [\"count\",\"finite\",\"frozen\",\"integer\",\"nonnegative\",\"notunset\",\"float\",\"number\",\"numeric\",\"odd\",\"positive\",\"safeinteger\",\"sealed\",\"truthy\"],null]\n    [124,       [\"count\",\"even\",\"finite\",\"frozen\",\"integer\",\"nonnegative\",\"notunset\",\"float\",\"number\",\"numeric\",\"positive\",\"safeinteger\",\"sealed\",\"truthy\"],null]\n    [0,         [\"count\",\"even\",\"falsy\",\"finite\",\"frozen\",\"integer\",\"nonnegative\",\"nonpositive\",\"notunset\",\"float\",\"number\",\"numeric\",\"safeinteger\",\"sealed\",\"zero\"],null]\n    [true,      [\"boolean\",\"frozen\",\"notunset\",\"sealed\",\"truthy\"],null]\n    [null,      [\"falsy\",\"frozen\",\"null\",\"sealed\",\"unset\"],null]\n    [undefined, [\"falsy\",\"frozen\",\"sealed\",\"undefined\",\"unset\"],null]\n    [{},        [\"empty\",\"extensible\",\"notunset\",\"object\",\"truthy\"],null]\n    [[],        [\"empty\",\"extensible\",\"list\",\"notunset\",\"truthy\"],null]\n    [ prms,     [\"nativepromise\",\"promise\",\"thenable\"], null ]\n    ]\n  #.........................................................................................................\n  # debug intersection_of [ 1, 2, 3, ], [ 'a', 3, 1, ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    matcher = matcher.sort()\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      result = types_of probe\n      result = intersection_of matcher, result\n      # help '^334^', matcher.sort()\n      # urge '^334^', intersection_of matcher, result\n      # urge '^334^', result\n      resolve result\n      return null\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"size_of\" ] = ( T, done ) ->\n  # debug ( new Buffer '𣁬', ), ( '𣁬'.codePointAt 0 ).toString 16\n  # debug ( new Buffer '𡉜', ), ( '𡉜'.codePointAt 0 ).toString 16\n  # debug ( new Buffer '𠑹', ), ( '𠑹'.codePointAt 0 ).toString 16\n  # debug ( new Buffer '𠅁', ), ( '𠅁'.codePointAt 0 ).toString 16\n  ### TAINT re-implement types object, pod ###\n  # T.eq ( isa.size_of { '~isa': 'XYZ/yadda', 'foo': 42, 'bar': 108, 'baz': 3, }      ), 4\n  #.........................................................................................................\n  intertype = new Intertype()\n  { isa\n    validate\n    type_of\n    types_of\n    size_of\n    declare\n    all_keys_of } = intertype.export()\n  #.........................................................................................................\n  probes_and_matchers = [\n    [[ [ 1, 2, 3, 4, ]                                 ], 4,                                          null, ]\n    [[ new Buffer [ 1, 2, 3, 4, ]                      ], 4,                                          null, ]\n    [[ '𣁬𡉜𠑹𠅁'                                      ], 2 * ( Array.from '𣁬𡉜𠑹𠅁' ).length,       null, ]\n    [[ '𣁬𡉜𠑹𠅁', 'codepoints'                        ], ( Array.from '𣁬𡉜𠑹𠅁' ).length,           null, ]\n    [[ '𣁬𡉜𠑹𠅁', 'codeunits'                         ], 2 * ( Array.from '𣁬𡉜𠑹𠅁' ).length,       null, ]\n    [[ '𣁬𡉜𠑹𠅁', 'bytes'                             ], ( new Buffer '𣁬𡉜𠑹𠅁', 'utf-8' ).length,  null, ]\n    [[ 'abcdefghijklmnopqrstuvwxyz'                    ], 26,                                         null, ]\n    [[ 'abcdefghijklmnopqrstuvwxyz', 'codepoints'      ], 26,                                         null, ]\n    [[ 'abcdefghijklmnopqrstuvwxyz', 'codeunits'       ], 26,                                         null, ]\n    [[ 'abcdefghijklmnopqrstuvwxyz', 'bytes'           ], 26,                                         null, ]\n    [[ 'ä'                                             ], 1,                                          null, ]\n    [[ 'ä', 'codepoints'                               ], 1,                                          null, ]\n    [[ 'ä', 'codeunits'                                ], 1,                                          null, ]\n    [[ 'ä', 'bytes'                                    ], 2,                                          null, ]\n    [[ new Map [ [ 'foo', 42, ], [ 'bar', 108, ], ]    ], 2,                                          null, ]\n    [[ new Set [ 'foo', 42, 'bar', 108, ]              ], 4,                                          null, ]\n    [[ { 'foo': 42, 'bar': 108, 'baz': 3, }            ], 3,                                          null, ]\n    [[ { 'foo': null, 'bar': 108, 'baz': 3, }          ], 3,                                          null, ]\n    [[ { 'foo': undefined, 'bar': 108, 'baz': 3, }     ], 2,                                          null, ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    # debug 'µ22900', probe\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      result = size_of probe...\n      resolve result\n      return null\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"export to target\" ] = ( T, done ) ->\n  #.........................................................................................................\n  target        = {}\n  intertype     = new Intertype()\n  return_value  = intertype.export target\n  T.ok return_value is target\n  target.declare 'sometype', ( x ) -> ( @isa.text x ) and ( x.startsWith ':' )\n  # debug 'µ44333', target\n  # debug 'µ44333', target.isa.sometype 'sometext'\n  # debug 'µ44333', target.isa.sometype ':sometext'\n  done()\n  return null\n\n\nlater = ->\n  ###\n  info 'µ01-47', xrpr all_keys_of          [ null, ]\n  X                 = {}\n  X.x               = true\n  X.spec            = {}\n  X.spec.spec_of_X  = true\n  Y                 = Object.create X\n  Y.y               = true\n  Y.spec            = Object.create X.spec\n  Y.spec.spec_of_Y  = true\n  debug X,        jr ( k for k of X )\n  debug X.spec,   jr ( k for k of X.spec )\n  debug Y,        jr ( k for k of Y )\n  debug Y.spec,   jr ( k for k of Y.spec )\n  Y.spec.spec_of_X  = false\n  info X.spec.spec_of_X\n  info X.spec.spec_of_Y\n  info Y.spec.spec_of_X\n  info Y.spec.spec_of_Y\n  ###\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"cast\" ] = ( T, done ) ->\n  #.........................................................................................................\n  intertype = new Intertype()\n  { isa\n    validate\n    type_of\n    types_of\n    size_of\n    declare\n    cast\n    all_keys_of } = intertype.export()\n  #.........................................................................................................\n  probes_and_matchers = [\n    [[ 'number',    'number',     123,    ], 123,     ]\n    [[ 'number',    'integer',    123,    ], 123,     ]\n    [[ 'number',    'integer',    23.9,   ], 24,      ]\n    [[ 'boolean',   'number',     true,   ], 1,       ]\n    [[ 'boolean',   'number',     false,  ], 0,       ]\n    [[ 'number',    'boolean',    0,      ], false,   ]\n    [[ 'number',    'boolean',    1,      ], true,    ]\n    [[ 'number',    'boolean',    -154.7, ], true,    ]\n    [[ 'number',    'text',       123,    ], '123',   ]\n    [[ 'boolean',   'text',       true,   ], 'true',  ]\n    [[ 'null',      'text',       null,   ], 'null',  ]\n    [[ 'int10text', 'text',      '1245',  ], '1245',  ]\n    [[ 'int16text', 'text',      '1245',  ], '1245',  ]\n    [[ 'int10text', 'number',    '1245',  ], 1245,    ]\n    [[ 'int16text', 'number',    '1245',  ], 4677,    ]\n    [[ 'int16text', 'int2text',  '7',     ], '111',   ]\n    [[ 'number',    'null',       0,      ], null,'unable to cast a number as null', ]\n    [[ 'number',    'null',       1,      ], null,'unable to cast a number as null', ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n  #.........................................................................................................\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ type_a, type_b, x, ] = probe\n      result = cast type_a, type_b, x\n      resolve result\n      return null\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ type_a, type_b, x, ] = probe\n      result = cast[ type_a ] type_b, x\n      resolve result\n      return null\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"isa.list_of A\" ] = ( T, done ) ->\n  #.........................................................................................................\n  intertype = new Intertype()\n  { isa\n    validate } = intertype.export()\n  #.........................................................................................................\n  probes_and_matchers = [\n    [[ 'number',     [ 123, ],    ], true,     ]\n    [[ 'integer',    [ 123, ],    ], true,     ]\n    [[ 'integer',    [ 1,2,3,123.5, ],    ], false,     ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ type, x, ] = probe\n      result = isa.list_of type, x\n      resolve result\n      return null\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"isa.list_of B\" ] = ( T, done ) ->\n  #.........................................................................................................\n  intertype = new Intertype()\n  { isa\n    isa_list_of\n    validate } = intertype.export()\n  #.........................................................................................................\n  probes_and_matchers = [\n    [[ 'number',     [ 123, ],    ], true,     ]\n    [[ 'integer',    [ 123, ],    ], true,     ]\n    [[ 'integer',    [ 1,2,3,123.5, ],    ], false,     ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ type, x, ] = probe\n      result = isa_list_of[ type ] x\n      resolve result\n      return null\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"validate.list_of A\" ] = ( T, done ) ->\n  #.........................................................................................................\n  intertype = new Intertype()\n  { isa\n    validate } = intertype.export()\n  #.........................................................................................................\n  probes_and_matchers = [\n    [[ 'number',     [ 123, ],    ], true,     ]\n    [[ 'integer',    [ 123, ],    ], true,     ]\n    [[ 'integer',    [ 1,2,3,123.5, ],    ], null, \"not a valid list_of\"     ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ type, x, ] = probe\n      result = validate.list_of type, x\n      resolve result\n      return null\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"validate.list_of B\" ] = ( T, done ) ->\n  #.........................................................................................................\n  intertype = new Intertype()\n  { isa\n    validate\n    isa_list_of\n    validate_list_of } = intertype.export()\n  #.........................................................................................................\n  probes_and_matchers = [\n    [[ 'number',     [ 123, ],    ], true,     ]\n    [[ 'integer',    [ 123, ],    ], true,     ]\n    [[ 'integer',    [ 1,2,3,123.5, ],    ], null, \"not a valid list_of\"     ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ type, x, ] = probe\n      result = validate_list_of type, x\n      resolve result\n      return null\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"vnr, int32\" ] = ( T, done ) ->\n  #.........................................................................................................\n  intertype = new Intertype()\n  { isa\n    declare\n    validate\n    isa_list_of\n    validate_list_of } = intertype.export()\n  #.........................................................................................................\n  T.ok isa.int32 1234\n  T.ok isa.int32 -1234\n  T.ok not isa.int32 1.3\n  T.ok isa.vnr [ -1234, ]\n  T.ok isa_list_of.int32 [ -1234, ]\n  T.ok isa_list_of.int32 []\n  T.ok isa.vnr [ -1234, 7e20, ]\n  T.ok isa.vnr [ -Infinity, ]\n  T.ok isa.vnr [ +Infinity, ]\n  T.ok isa.vnr [ +Infinity, 1, ]\n  T.ok isa.infnumber +1234567.665553\n  T.ok isa.infnumber -1234567.665553\n  T.ok isa.infnumber +Infinity\n  T.ok isa.infnumber -Infinity\n  T.ok not isa.vnr Int32Array.from [ -1234, ]\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"check(): validation with intermediate results (experiment)\" ] = ( T, done ) ->\n  #.........................................................................................................\n  PATH                      = require 'path'\n  FS                        = require 'fs'\n  intertype                 = new Intertype()\n  { isa\n    validate\n    declare }               = intertype.export()\n  sad                       = Symbol 'sad' # will be made attribute of `intertype`\n  #.........................................................................................................\n  is_sad    = ( x ) -> ( x is sad ) or ( x instanceof Error ) or ( ( isa.object x ) and ( x[ sad ] is true ) )\n  is_happy  = ( x ) -> not is_sad x\n  sadden    = ( x ) -> { [sad]: true, _: x, }\n  #.........................................................................................................\n  check = new Proxy {},\n    get: ( t, k ) -> ( P... ) ->\n      return fn unless isa.callable fn = t[ k ]\n      return try ( fn P... ) catch error then error\n    set: ( t, k, v ) -> t[ k ] = v\n    delete: ( t, k, v ) -> delete t[ k ]\n  check.foo = 42\n  check.foo\n  check.integer = ( x ) -> validate.integer x\n  debug '^336552^', check.integer 42\n  debug '^336552^', check.integer 42.5\n  #.........................................................................................................\n  check_fso_exists   = ( path, stats = null ) ->\n    try ( stats ? FS.statSync path ) catch error then error\n  #.........................................................................................................\n  check_is_file      = ( path, stats = null ) ->\n    ### Checks if `path` exists, points to a file, is readable, and parses as a JSON file\n\n    Malfunction Risks:\n    * see `check_fso_exists()` &c.\n    * FS-related race conditions, including\n    * longish timeouts for paths pointing to non-local or otherwise misbehaving FS resources.\n    ###\n    #.......................................................................................................\n    ### in this case, `stats` is `sad` when `check_fso_exists()` fails; in the general case, it could be any\n    manner of object whose computation required effort, so we want to keep it; we document that fact by\n    aliasing it as `bad`: ###\n    return bad    if is_sad ( bad = stats = check_fso_exists path, stats )\n    return stats  if stats.isFile()\n    return sadden \"not a file: #{path}\"\n  #.........................................................................................................\n  check_is_json_file = ( path ) ->\n    ### Checks if `path` exists, points to a file, is readable, and is parsable as a JSON file; as a\n    side-effect, returns the result of parsing when successful.\n\n    Malfunction Risks:\n    * see `check_is_file()` &c.\n    * file will be read and parsed synchronously; as such, an arbitrary amount of time and space could be\n      required in case `path` points to a large file and/or is slow to parse\n    ###\n    # return bad if is_sad ( bad = stats = check_is_file path, stats )\n    return try ( JSON.parse FS.readFileSync path ) catch error then error\n  #.........................................................................................................\n  debug '^377332-1^', is_sad sad\n  debug '^377332-6^', is_sad { [sad]: true, }\n  debug '^377332-7^', is_sad new Error \"wat\"\n  debug '^377332-2^', is_sad 42\n  debug '^377332-3^', is_sad false\n  debug '^377332-4^', is_sad null\n  debug '^377332-5^', is_sad { [sad]: false, }\n  paths = [\n    PATH.resolve PATH.join __dirname, '../../package.json'\n    PATH.resolve PATH.join __dirname, '../../XXXXX'\n    ]\n  for path in paths\n    R     = null\n    loop\n      # break if ( R = check_fso_exists    path, R ) is sad\n      # break if ( R = check_is_file       path, R ) is sad\n      break if is_sad ( R = check_is_json_file  path, R )\n      break\n    if is_sad R then  warn \"fails with\", ( rpr R )[ ... 80 ]\n    else              help \"is JSON file; contents:\", ( jr R )[ ... 100 ]\n  warn '^99282^', ( error = check_fso_exists   'XXXXX' ).code, CND.grey error.message\n  warn '^99282^', ( error = check_is_file      'XXXXX' ).code, CND.grey error.message\n  warn '^99282^', ( error = check_is_json_file 'XXXXX' ).code, CND.grey error.message\n  #.........................................................................................................\n  ### Turning a type declaration into a check ###\n  check_integer     = ( x ) -> return try x if ( validate.integer x ) catch error then error\n  isa_integer       = ( x ) -> is_happy check_integer x\n  validate_integer  = ( x ) -> if is_happy ( R = check_integer x ) then return R else throw R\n  #.........................................................................................................\n  debug '^333442^', check_integer 42\n  debug '^333442^', ( rpr check_integer 42.5 )[ .. 80 ]\n  debug '^333442^', isa_integer 42\n  debug '^333442^', isa_integer 42.5\n  # debug stats\n  # [ type, x, ] = probe\n  # result = validate_list_of type, x\n  # T.eq result, matcher\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"check(): validation with intermediate results (for reals)\" ] = ( T, done ) ->\n  #.........................................................................................................\n  PATH                      = require 'path'\n  FS                        = require 'fs'\n  intertype                 = new Intertype()\n  { isa\n    validate\n    check\n    sad\n    is_sad\n    is_happy\n    sadden\n    type_of\n    types_of\n    declare\n    declare_check }         = intertype.export()\n  #.........................................................................................................\n  declare_check 'dvsbl_2_3', ( x ) ->\n    validate.even x\n    return x %% 3 is 0\n  #.........................................................................................................\n  T.eq ( is_happy check 'integer',      42     ), true\n  T.eq ( is_happy check 'dvsbl_2_3',    42     ), true\n  T.eq ( is_happy check 'dvsbl_2_3',    2 * 3  ), true\n  T.eq ( is_happy check.integer         42     ), true\n  T.eq ( is_happy check.dvsbl_2_3       42     ), true\n  T.eq ( is_happy check.dvsbl_2_3       2 * 3  ), true\n  #.........................................................................................................\n  T.eq (          check 'dvsbl_2_3',    42     ), true\n  T.eq (          check 'dvsbl_2_3',    2 * 3  ), true\n  #.........................................................................................................\n  T.eq (          check 'integer',      42     ), true\n  T.eq (          check.integer         42     ), true\n  #.........................................................................................................\n  T.eq (          check.dvsbl_2_3       42     ), true\n  T.eq (          check.dvsbl_2_3       2 * 3  ), true\n  #.........................................................................................................\n  T.eq ( is_happy check 'integer',      42.5   ), false\n  T.eq ( is_happy check.integer         42.5   ), false\n  T.eq ( is_happy check 'dvsbl_2_3',    43     ), false\n  T.eq ( is_happy check.dvsbl_2_3       43     ), false\n  #.........................................................................................................\n  T.eq (          check 'integer',      42.5   ), sad\n  T.eq (          check.integer         42.5   ), sad\n  #.........................................................................................................\n  T.ok isa.error ( check 'dvsbl_2_3',    43     )\n  T.ok isa.error ( check.dvsbl_2_3       43     )\n  # #.........................................................................................................\n  # declare 'fs_stats', tests:\n  #   'x is an object':         ( x ) -> @isa.object  x\n  #   'x.size is a count':      ( x ) -> @isa.count   x.size\n  #   'x.atimeMs is a number':  ( x ) -> @isa.number  x.atimeMs\n  #   'x.atime is a date':      ( x ) -> @isa.date    x.atime\n  # #.........................................................................................................\n  # ### NOTE: will throw error unless path exists, error is implicitly caught, represents sad path ###\n  # declare_check 'fso_exists', ( path, stats = null ) -> FS.statSync path\n  #   # try ( stats ? FS.statSync path ) catch error then error\n  # #.........................................................................................................\n  # declare_check 'is_file', ( path, stats = null ) ->\n  #   return bad    if is_sad ( bad = stats = @check.fso_exists path, stats )\n  #   return stats  if stats.isFile()\n  #   return sadden \"not a file: #{path}\"\n  # #.........................................................................................................\n  # declare_check 'is_json_file', ( path ) ->\n  #   return try ( JSON.parse FS.readFileSync path ) catch error then error\n  #.........................................................................................................\n  ### overloading 'path' here, obviously ###\n  happy_path  = PATH.resolve PATH.join __dirname, '../../package.json'\n  sad_path    = 'xxxxx'\n  happy_fso_exists    = check.fso_exists    happy_path\n  happy_is_file       = check.is_file       happy_path\n  happy_is_json_file  = check.is_json_file  happy_path\n  sad_fso_exists      = check.fso_exists    sad_path\n  sad_is_file         = check.is_file       sad_path\n  sad_is_json_file    = check.is_json_file  sad_path\n  T.ok is_happy         happy_fso_exists\n  T.ok is_happy         happy_is_file\n  T.ok is_happy         happy_is_json_file\n  T.ok is_sad           sad_fso_exists\n  T.ok is_sad           sad_is_file\n  T.ok is_sad           sad_is_json_file\n  T.ok isa.fs_stats     happy_fso_exists\n  T.ok isa.fs_stats     happy_is_file\n  T.ok isa.object       happy_is_json_file\n  T.ok isa.error        sad_fso_exists\n  T.ok isa.error        sad_is_file\n  T.ok isa.error        sad_is_json_file\n  T.eq sad_fso_exists.code,     'ENOENT'\n  T.eq sad_is_file.code,        'ENOENT'\n  T.eq sad_is_json_file.code,   'ENOENT'\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"types_of() includes happy, sad\" ] = ( T, done ) ->\n  #.........................................................................................................\n  intertype = new Intertype()\n  { isa\n    validate\n    type_of\n    types_of\n    size_of\n    declare\n    sad\n    sadden\n    all_keys_of } = intertype.export()\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ 123,                        [             'happy',    'number',     ],  null, ]\n    [ 124,                        [             'happy',    'number',     ],  null, ]\n    [ 0,                          [             'happy',    'number',     ],  null, ]\n    [ true,                       [ 'boolean',  'happy',                  ],  null, ]\n    [ null,                       [             'happy',    'null',       ],  null, ]\n    [ undefined,                  [             'happy',    'undefined',  ],  null, ]\n    [ {},                         [             'happy',    'object',     ],  null, ]\n    [ [],                         [             'happy',    'list',       ],  null, ]\n    [ sad,                        [             'sad',      'symbol',     ],  null, ]\n    [ new Error(),                [ 'error',    'sad',                    ],  null, ]\n    [ { [sad]: true, _: null, },  [ 'object',   'sad',      'saddened',   ],  null, ]\n    [ ( sadden null ),            [ 'object',   'sad',      'saddened',   ],  null, ]\n    ]\n  #.........................................................................................................\n  # debug intersection_of [ 1, 2, 3, ], [ 'a', 3, 1, ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      result = intersection_of matcher, types_of probe\n      # log jr [ probe, result, ]\n      # resolve result\n      resolve result\n      return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"unsadden\" ] = ( T, done ) ->\n  #.........................................................................................................\n  intertype = new Intertype()\n  { isa\n    validate\n    type_of\n    types_of\n    size_of\n    declare\n    sad\n    sadden\n    unsadden\n    all_keys_of } = intertype.export()\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ { [sad]: true, _: null, },  null,     null, ]\n    [ ( sadden 129282 ),          129282,   null, ]\n    [ 333,                        333,      null, ]\n    [ sad,                        null,     \"not a valid saddened\", ]\n    [ ( new Error() ),            null,     \"not a valid saddened\", ]\n    ]\n  #.........................................................................................................\n  # debug intersection_of [ 1, 2, 3, ], [ 'a', 3, 1, ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      resolve unsadden probe\n      return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"isa.immediate, nowait\" ] = ( T, done ) ->\n  intertype = new Intertype()\n  { isa\n    types_of\n    type_of\n    validate\n    nowait } = intertype.export()\n  #.........................................................................................................\n  try T.ok 'immediate'  not in ( types_of new Promise ->  ) catch error then T.fail 'testcase-171615'\n  try T.ok 'immediate'  not in ( types_of { then: -> }    ) catch error then T.fail 'testcase-171616'\n  try T.ok 'immediate'      in ( types_of 42              ) catch error then T.fail 'testcase-171617'\n  #.........................................................................................................\n  try T.eq ( isa.immediate null                 ), true   catch error then T.fail 'testcase-171618'\n  try T.eq ( isa.immediate 12.34                ), true   catch error then T.fail 'testcase-171619'\n  try T.eq ( isa.immediate undefined            ), true   catch error then T.fail 'testcase-171620'\n  try T.eq ( isa.immediate new Promise ->       ), false  catch error then T.fail 'testcase-171621'\n  #.........................................................................................................\n  try ( validate.immediate 42         ) catch  error then T.fail 'testcase-171622'\n  try ( validate.immediate undefined  ) catch  error then T.fail 'testcase-171623'\n  try ( validate.immediate null       ) catch  error then T.fail 'testcase-171624'\n  try ( validate.immediate 1 * '#'    ) catch  error then T.fail 'testcase-171625'\n  #.........................................................................................................\n  T.throws /not a valid immediate/, -> validate.immediate x = ( new Promise -> )\n  try ( r = nowait ( ( x ) -> x ** 2 ) 5 ) catch error then T.fail 'testcase-171626'\n  T.eq r, 25\n  T.throws /not a valid immediate/, -> r = nowait ( -> new Promise -> )()\n  done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"equality checks\" ] = ( T, done ) ->\n#   ### TAINT bug: when this test runs as only one, no problem; when run after some of the above,\n#     `equals` check throws error `Error: ENOENT: no such file or directory, open 'equals'` (!!!) ###\n#   intertype = new Intertype()\n#   { isa\n#     check } = intertype.export()\n#   urge '^8873^', jr ( k for k of intertype.export() )\n#   debug '^22231^', check.equals 3, 3\n#   debug '^22231^', check.equals 3, 4\n#   done() if done?\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"equals\" ] = ( T, done ) ->\n  intertype = new Intertype()\n  { isa\n    check\n    equals } = intertype.export()\n  ### TAINT copy more extensive tests from CND, `js_eq`? ###\n  T.eq ( equals 3, 3 ), true\n  T.eq ( equals 3, 4 ), false\n  done() if done?\n\n\n############################################################################################################\nunless module.parent?\n  # test @\n  # test @[ \"equality checks\" ]\n  # @[ \"equality checks\" ]()\n  # test @[ \"isa.immediate, nowait\" ]\n  # test @[ \"types_of() includes happy, sad\" ]\n  # test @[ \"check(): validation with intermediate results (experiment)\" ]\n  # test @[ \"check(): validation with intermediate results (for reals)\" ]\n  test @[ \"types_of\" ]\n  # test @[ \"vnr, int32\" ]\n  # test @[ \"cast\" ]\n  # test @[ \"isa.list_of A\" ]\n  # test @[ \"isa.list_of B\" ]\n  # test @[ \"validate.list_of A\" ]\n  # test @[ \"validate.list_of B\" ]\n\n\n\n  # do -> debug ( require '../helpers' ).js_type_of arguments\ndemo = ->\n  intertype = new Intertype()\n  { isa\n    validate\n    type_of\n    types_of\n    size_of\n    declare\n    all_keys_of } = intertype.export()\n  urge size_of '𣁬𡉜𠑹𠅁', 'codepoints'\n\n  intertype.declare 'point',\n    size:   2\n    tests:\n      '? is an object':   ( x ) -> @isa.object x\n      '?.x is set':       ( x ) -> @has_key    x, 'x'\n      '?.y is set':       ( x ) -> @has_key    x, 'y'\n      '?.x is a float':   ( x ) -> @isa.float  x.x\n      '?.y is a float':   ( x ) -> @isa.float  x.x\n  intertype.declare 'vector',\n    size:   2\n    tests:\n      '? is a list':        ( x ) -> @isa.list   x\n      'size of ? is 2':     ( x ) -> ( @size_of x ) is 2\n      '?[ 0 ] is a float':  ( x ) -> @isa.float x[ 0 ]\n      '?[ 1 ] is a float':  ( x ) -> @isa.float x[ 1 ]\n  info isa.point 42\n  info isa.point { x: 42, y: 108, }\n  info isa.point { x: Infinity, y: 108, }\n\n  tests = [\n    [ 1,  ( -> validate.number    42                         ), ]\n    [ 1,  ( -> validate.float     42                         ), ]\n    [ 2,  ( -> validate.integer   42                         ), ]\n    [ 3,  ( -> validate.even      42                         ), ]\n    [ 4,  ( -> validate.number    42.5                       ), ]\n    [ 4,  ( -> validate.float     42.5                       ), ]\n    [ 5,  ( -> validate.integer   42.5                       ), ]\n    [ 6,  ( -> validate.even      42.5                       ), ]\n    [ 7,  ( -> validate.point     42                         ), ]\n    [ 8,  ( -> validate.point     { x: 42, y: 108, }         ), ]\n    [ 9,  ( -> validate.point     { y: 108, }                ), ]\n    [ 10, ( -> validate.point     { x: Infinity, y: 108, }  ), ]\n    [ 11, ( -> validate.vector    null                      ), ]\n    [ 12, ( -> validate.vector    [ 2, ]                    ), ]\n    [ 13, ( -> validate.vector    [ 2, 3, ]                 ), ]\n    [ 14, ( -> validate.regex     [ 2, 3, ]                 ), ]\n    [ 15, ( -> validate.regex     /x/                       ), ]\n    [ 16, ( -> validate.regex     /^x$/g                    ), ]\n    [ 17, ( -> isa.regex          /x/                       ), ]\n    [ 18, ( -> isa.regex          /^x$/g                    ), ]\n    ]\n  for [ nr, test, ] in tests\n    try\n      result = test()\n    catch error\n      warn nr, error.message\n      # throw error\n      continue\n    info nr, result\n\n  help isa.number 42\n  help isa.number new Number 42\n  help types_of 42\n  help types_of new Number 42\n  debug 'µ12233', types_of []\n\n\n"
  ]
}