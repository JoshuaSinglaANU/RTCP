{
  "version": 3,
  "file": "TRM.js",
  "sourceRoot": "..",
  "sources": [
    "src/TRM.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n############################################################################################################\n@constants                = require './TRM-CONSTANTS'\n@separator                = ' '\n@depth_of_inspect         = 20\nbadge                     = 'TRM'\nTYPES                     = require './TYPES'\nisa_text                  = TYPES.isa_text.bind TYPES\n_rpr                      = ( require 'util' ).inspect\n@ANSI                     = require './TRM-VT100-ANALYZER'\nσ_cnd                     = Symbol.for 'cnd'\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @rpr = ( x ) ->\n#   try\n#     if x.toString? and ( x.toString isnt Object::toString )\n#       return x.toString()\n#     else\n#       return @_rpr x\n#   catch error\n#     throw error unless /^Cannot read property/.test error[ 'message' ]\n#     return @_rpr x\n\n#-----------------------------------------------------------------------------------------------------------\n@rpr = ( x ) ->\n  return _rpr x, depth: @depth_of_inspect\n\n#-----------------------------------------------------------------------------------------------------------\n@get_output_method = ( target, options ) ->\n  return ( P... ) => target.write @pen P...\n\n#-----------------------------------------------------------------------------------------------------------\n@pen = ( P... ) ->\n  ### Given any number of arguments, return a text representing the arguments as seen fit for output\n  commands like `log`, `echo`, and the colors. ###\n  return ( @_pen P... ).concat '\\n'\n\n#-----------------------------------------------------------------------------------------------------------\n@_pen = ( P... ) ->\n  ### ... ###\n  R = ( ( if isa_text p then p else @rpr p ) for p in P )\n  return R.join @separator\n\n#-----------------------------------------------------------------------------------------------------------\n@log                      = @get_output_method process.stderr\n@echo                     = @get_output_method process.stdout\n\n#===========================================================================================================\n# KEY CAPTURING\n#-----------------------------------------------------------------------------------------------------------\n@listen_to_keys = ( handler ) ->\n  ### thx to http://stackoverflow.com/a/12506613/256361 ###\n  #.........................................................................................................\n  ### try not to bind handler to same handler more than once: ###\n  return null if handler.__TRM__listen_to_keys__is_registered\n  Object.defineProperty handler, '__TRM__listen_to_keys__is_registered', value: true, enumerable: false\n  help                = @get_logger 'help', badge\n  last_key_was_ctrl_c = false\n  R                   = process.openStdin()\n  R.setRawMode  true\n  R.setEncoding 'utf-8'\n  R.resume()\n  #.........................................................................................................\n  R.on 'data', ( key ) =>\n    response = handler key\n    if key is '\\u0003'\n      process.exit() if last_key_was_ctrl_c\n      last_key_was_ctrl_c = yes\n      help \"press ctrl-C again to exit\"\n    else\n      last_key_was_ctrl_c = no\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@ask = ( prompt, handler ) ->\n  rl = ( require 'readline' ).createInterface\n    input:  process.stdin\n    output: process.stdout\n  #.........................................................................................................\n  prompt += ' ' unless /\\s+$/.test prompt\n  rl.question ( @cyan prompt ), ( answer ) ->\n    rl.close()\n    handler null, answer\n\n\n# #===========================================================================================================\n# # SHELL COMMANDS\n# #-----------------------------------------------------------------------------------------------------------\n# @execute = ( command, handler ) ->\n#   unless handler?\n#     ### https://github.com/gvarsanyi/sync-exec ###\n#     exec = require 'sync-exec'\n#     #...........................................................................................................\n#     { stdout\n#       stderr\n#       status } = exec 'ls'\n#     throw new Error stderr if stderr? and stderr.length > 0\n#     return lines_from_stdout stdout\n#   #.........................................................................................................\n#   ( require 'child_process' ).exec O[ 'on-change' ], ( error, stdout, stderr ) =>\n#     return handler error if error?\n#     return handler new Error stderr if stderr? and stderr.length isnt 0\n#     handler null, lines_from_stdout stdout\n#   #.........................................................................................................\n#   return null\n\n#-----------------------------------------------------------------------------------------------------------\nlines_from_stdout = ( stdout ) ->\n  R = stdout.split '\\n'\n  R.length -= 1 if R[ R.length - 1 ].length is 0\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@spawn = ( command, parameters, handler ) ->\n  R = ( require 'child_process' ).spawn command, parameters, { stdio: 'inherit', }\n  R.on 'close', handler\n  #.........................................................................................................\n  return R\n\n\n#===========================================================================================================\n# COLORS & EFFECTS\n#-----------------------------------------------------------------------------------------------------------\n@clear_line_right         = @constants.clear_line_right\n@clear_line_left          = @constants.clear_line_left\n@clear_line               = @constants.clear_line\n@clear_below              = @constants.clear_below\n@clear_above              = @constants.clear_above\n@clear                    = @constants.clear\n\n#-----------------------------------------------------------------------------------------------------------\n@goto                     = ( line_nr = 1, column_nr = 1 )  -> return \"\\x1b[#{line_nr};#{column_nr}H\"\n@goto_column              = ( column_nr = 1 )  -> return \"\\x1b[#{column_nr}G\"\n#...........................................................................................................\n@up                       = ( count = 1 ) -> return \"\\x1b[#{count}A\"\n@down                     = ( count = 1 ) -> return \"\\x1b[#{count}B\"\n@right                    = ( count = 1 ) -> return \"\\x1b[#{count}C\"\n@left                     = ( count = 1 ) -> return \"\\x1b[#{count}D\"\n#...........................................................................................................\n@move = ( line_count, column_count ) ->\n  return ( ( if   line_count < 0 then @up     line_count else @down    line_count ) +\n           ( if column_count < 0 then @left column_count else @right column_count ) )\n\n#-----------------------------------------------------------------------------------------------------------\n@ring_bell = ->\n  process.stdout.write \"\\x07\"\n\n#-----------------------------------------------------------------------------------------------------------\neffect_names =\n  blink:        1\n  bold:         1\n  reverse:      1\n  underline:    1\n#...........................................................................................................\nfor effect_name of effect_names\n  effect_on       = @constants[         effect_name ]\n  effect_off      = @constants[ 'no_' + effect_name ]\n  do ( effect_name, effect_on, effect_off ) =>\n    @[ effect_name ] = ( P... ) =>\n      R         = [ effect_on, ]\n      last_idx  = P.length - 1\n      for p, idx in P\n        R.push if isa_text p then p else @rpr p\n        if idx isnt last_idx\n          R.push effect_on\n          R.push @separator\n      R.push effect_off\n      return R.join ''\n#...........................................................................................................\nfor color_name, color_code of @constants[ 'colors' ]\n  do ( color_name, color_code ) =>\n    @[ color_name ] = ( P... ) =>\n      R         = [ color_code, ]\n      last_idx  = P.length - 1\n      for p, idx in P\n        R.push if isa_text p then p else @rpr p\n        if idx isnt last_idx\n          R.push color_code\n          R.push @separator\n      R.push @constants[ 'reset' ]\n      return R.join ''\n\n#-----------------------------------------------------------------------------------------------------------\n@remove_colors = ( text ) ->\n  # this one from http://regexlib.com/UserPatterns.aspx?authorId=f3ce5c3c-5970-48ed-9c4e-81583022a387\n  # looks smarter but isn't JS-compatible:\n  # return text.replace /(?s)(?:\\e\\[(?:(\\d+);?)*([A-Za-z])(.*?))(?=\\e\\[|\\z)/g, ''\n  return text.replace @color_matcher, ''\n\n#-----------------------------------------------------------------------------------------------------------\n@color_matcher = /\\x1b\\[[^m]*m/g\n\n# #-----------------------------------------------------------------------------------------------------------\n# $.length_of_ansi_text = ( text ) ->\n#   return ( text.replace /\\x1b[^m]m/, '' ).length\n\n# #-----------------------------------------------------------------------------------------------------------\n# $.truth = ( P... ) ->\n#   return ( ( ( if p == true then green else if p == false then red else white ) p ) for p in P ).join ''\n\n#-----------------------------------------------------------------------------------------------------------\n# rainbow_color_names = \"\"\"blue tan cyan sepia indigo steel brown red olive lime crimson green plum orange pink\n#                         gold yellow\"\"\".split /\\s+/\nrainbow_color_names = \"\"\"red orange yellow green blue pink\"\"\".split /\\s+/\nrainbow_idx         = -1\n\n#-----------------------------------------------------------------------------------------------------------\n@rainbow = ( P... ) ->\n  rainbow_idx = ( rainbow_idx + 1 ) % rainbow_color_names.length\n  return @[ rainbow_color_names[ rainbow_idx ] ] P...\n\n#-----------------------------------------------------------------------------------------------------------\n@route = ( P... ) ->\n  return @lime @underline P...\n\n#-----------------------------------------------------------------------------------------------------------\n@truth = ( P... ) ->\n  return ( ( if p then @green \"✔  #{@_pen p}\" else @red \"✗  #{@_pen p}\" ) for p in P ).join ''\n\n#-----------------------------------------------------------------------------------------------------------\n@get_logger = ( category, badge = null ) ->\n  #.........................................................................................................\n  switch category\n    #.......................................................................................................\n    when 'plain'\n      colorize  = null\n      pointer   = @grey ' ▶ '\n    #.......................................................................................................\n    when 'info'\n      colorize  = @BLUE.bind @\n      pointer   = @grey ' ▶ '\n    #.......................................................................................................\n    when 'whisper'\n      colorize  = @grey.bind @\n      pointer   = @grey ' ▶ '\n    #.......................................................................................................\n    when 'urge'\n      colorize  = @orange.bind @\n      pointer   = @bold @RED ' ? '\n    #.......................................................................................................\n    when 'praise'\n      colorize  = @GREEN.bind @\n      pointer   = @GREEN ' ✔ '\n    #.......................................................................................................\n    when 'debug'\n      colorize  = @pink.bind @\n      pointer   = @grey ' ⚙ '\n    #.......................................................................................................\n    when 'alert'\n      colorize  = @RED.bind @\n      pointer   = @blink @RED ' ⚠ '\n    #.......................................................................................................\n    when 'warn'\n      colorize  = @RED.bind @\n      pointer   = @bold @RED ' ! '\n    #.......................................................................................................\n    when 'help'\n      colorize  = @lime.bind @\n      pointer   = @gold ' ☛ '\n    #.......................................................................................................\n    else\n      throw new Error \"unknown logger category #{_rpr category}\"\n  #.........................................................................................................\n  prefix = if badge? then ( @grey badge ).concat ' ', pointer else pointer\n  #.........................................................................................................\n  if colorize? then R = ( P... ) => return @log ( ( @grey get_timestamp() ) + ' ' + prefix ), colorize  P...\n  else              R = ( P... ) => return @log ( ( @grey get_timestamp() ) + ' ' + prefix ),           P...\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nget_timestamp = ->\n  t1  = Math.floor ( Date.now() - global[ σ_cnd ].t0 ) / 1000\n  s   = t1 % 60\n  s   = '' + s\n  s   = '0' + s if s.length < 2\n  m   = ( Math.floor t1 / 60 ) % 100\n  m   = '' + m\n  m   = '0' + m if m.length < 2\n  return \"#{m}:#{s}\"\n\n\n#===========================================================================================================\n# EXTRACTING COLORS / CONVERTING COLORS TO HTML\n#-----------------------------------------------------------------------------------------------------------\n### TAINT naming unstable, to be renamed ###\n# @as_html = @ANSI.as_html.bind @ANSI\n# @get_css_source = @ANSI.get_css_source.bind @ANSI\n# @analyze = @ANSI.analyze.bind @ANSI\n\n#-----------------------------------------------------------------------------------------------------------\n@clean = ( text ) ->\n  is_ansicode = yes\n  R           = []\n  #.........................................................................................................\n  return ( chunk for chunk in @analyze text when ( is_ansicode = not is_ansicode ) ).join ''\n\n\n#===========================================================================================================\n# VALUE REPORTING\n#-----------------------------------------------------------------------------------------------------------\n@_prototype_of_object = Object.getPrototypeOf new Object()\n\n#-----------------------------------------------------------------------------------------------------------\n@_dir_options =\n  'skip-list-idxs':   yes\n  'skip-object':      yes\n\n#-----------------------------------------------------------------------------------------------------------\n@_marker_by_type =\n  'function':       '()'\n\n#-----------------------------------------------------------------------------------------------------------\n@dir = ( P... ) ->\n  switch arity = P.length\n    when 0\n      throw new Error \"called TRM.dir without arguments\"\n    when 1\n      x = P[ 0 ]\n    else\n      x = P[ P.length - 1 ]\n      @log @rainbow p for p, idx in P when idx < P.length - 1\n  width = if process.stdout.isTTY then process.stdout.columns else 108\n  r     = ( @rpr x ).replace /\\n\\s*/g, ' '\n  r     = r[ .. Math.max 5, width - 5 ].concat @grey ' ...' if r.length > width\n  @log '\\n'.concat ( @lime r ), '\\n', ( ( @_dir x ).join @grey ' ' ), '\\n'\n\n#-----------------------------------------------------------------------------------------------------------\n@_dir = ( x ) ->\n  R = []\n  for [ role, p, type, names, ] in @_get_prototypes_types_and_property_names x, []\n    R.push @grey '('.concat role, ')'\n    R.push @orange type\n    for name in names\n      marker = @_marker_from_type TYPES.type_of ( Object.getOwnPropertyDescriptor p, name )[ 'value' ]\n      R.push ( @cyan name ).concat @grey marker\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n @_is_list_idx = ( idx_txt, length ) ->\n  return false unless /^[0-9]+$/.test idx_txt\n  return 0 <= ( parseInt idx_txt ) < length\n\n#-----------------------------------------------------------------------------------------------------------\n@_marker_from_type = ( type ) ->\n  return @_marker_by_type[ type ] ? '|'.concat type\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_prototypes_types_and_property_names = ( x, types_and_names ) ->\n  role = if types_and_names.length is 0 then 'type' else 'prototype'\n  unless x?\n    types_and_names.push [ role, x, ( TYPES.type_of x ), [], ]\n    return types_and_names\n  #.........................................................................................................\n  try\n    names           = Object.getOwnPropertyNames x\n    prototype       = Object.getPrototypeOf x\n  catch error\n    throw error unless error[ 'message' ] is 'Object.getOwnPropertyNames called on non-object'\n    x_              = new Object x\n    names           = Object.getOwnPropertyNames x_\n    prototype       = Object.getPrototypeOf x_\n  #.........................................................................................................\n  try\n    length = x.length\n    if length?\n      names = ( name for name in names when not  @_is_list_idx name, x.length )\n  catch error\n    throw error unless error[ 'message' ].test /^Cannot read property 'length' of /\n  #.........................................................................................................\n  names.sort()\n  types_and_names.push [ role, x, ( TYPES.type_of x ), names ]\n  #.........................................................................................................\n  if prototype? and not ( @_dir_options[ 'skip-object' ] and prototype is @_prototype_of_object )\n    @_get_prototypes_types_and_property_names prototype, types_and_names\n  #.........................................................................................................\n  return types_and_names\n\n\n\n\n\n\n"
  ]
}