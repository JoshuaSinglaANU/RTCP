{
  "version": 3,
  "file": "TRM-VT100-ANALYZER.js",
  "sourceRoot": "..",
  "sources": [
    "src/TRM-VT100-ANALYZER.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nCND = require './main'\n\n#-----------------------------------------------------------------------------------------------------------\nrgb_hex_by_vt100_colorcode =\n  # Primary 3-bit 8 colors. Unique representation!\n  '0':    '000000'\n  '1':    '800000'\n  '2':    '008000'\n  '3':    '808000'\n  '4':    '000080'\n  '5':    '800080'\n  '6':    '008080'\n  '7':    'c0c0c0'\n  # Equivalent \"bright\" versions of original 8 colors.\n  '8':    '808080'\n  '9':    'ff0000'\n  '10':   '00ff00'\n  '11':   'ffff00'\n  '12':   '0000ff'\n  '13':   'ff00ff'\n  '14':   '00ffff'\n  '15':   'ffffff'\n  # Strictly ascending.\n  '16':   '000000'\n  '17':   '00005f'\n  '18':   '000087'\n  '19':   '0000af'\n  '20':   '0000d7'\n  '21':   '0000ff'\n  '22':   '005f00'\n  '23':   '005f5f'\n  '24':   '005f87'\n  '25':   '005faf'\n  '26':   '005fd7'\n  '27':   '005fff'\n  '28':   '008700'\n  '29':   '00875f'\n  '30':   '008787'\n  '31':   '0087af'\n  '32':   '0087d7'\n  '33':   '0087ff'\n  '34':   '00af00'\n  '35':   '00af5f'\n  '36':   '00af87'\n  '37':   '00afaf'\n  '38':   '00afd7'\n  '39':   '00afff'\n  '40':   '00d700'\n  '41':   '00d75f'\n  '42':   '00d787'\n  '43':   '00d7af'\n  '44':   '00d7d7'\n  '45':   '00d7ff'\n  '46':   '00ff00'\n  '47':   '00ff5f'\n  '48':   '00ff87'\n  '49':   '00ffaf'\n  '50':   '00ffd7'\n  '51':   '00ffff'\n  '52':   '5f0000'\n  '53':   '5f005f'\n  '54':   '5f0087'\n  '55':   '5f00af'\n  '56':   '5f00d7'\n  '57':   '5f00ff'\n  '58':   '5f5f00'\n  '59':   '5f5f5f'\n  '60':   '5f5f87'\n  '61':   '5f5faf'\n  '62':   '5f5fd7'\n  '63':   '5f5fff'\n  '64':   '5f8700'\n  '65':   '5f875f'\n  '66':   '5f8787'\n  '67':   '5f87af'\n  '68':   '5f87d7'\n  '69':   '5f87ff'\n  '70':   '5faf00'\n  '71':   '5faf5f'\n  '72':   '5faf87'\n  '73':   '5fafaf'\n  '74':   '5fafd7'\n  '75':   '5fafff'\n  '76':   '5fd700'\n  '77':   '5fd75f'\n  '78':   '5fd787'\n  '79':   '5fd7af'\n  '80':   '5fd7d7'\n  '81':   '5fd7ff'\n  '82':   '5fff00'\n  '83':   '5fff5f'\n  '84':   '5fff87'\n  '85':   '5fffaf'\n  '86':   '5fffd7'\n  '87':   '5fffff'\n  '88':   '870000'\n  '89':   '87005f'\n  '90':   '870087'\n  '91':   '8700af'\n  '92':   '8700d7'\n  '93':   '8700ff'\n  '94':   '875f00'\n  '95':   '875f5f'\n  '96':   '875f87'\n  '97':   '875faf'\n  '98':   '875fd7'\n  '99':   '875fff'\n  '100':  '878700'\n  '101':  '87875f'\n  '102':  '878787'\n  '103':  '8787af'\n  '104':  '8787d7'\n  '105':  '8787ff'\n  '106':  '87af00'\n  '107':  '87af5f'\n  '108':  '87af87'\n  '109':  '87afaf'\n  '110':  '87afd7'\n  '111':  '87afff'\n  '112':  '87d700'\n  '113':  '87d75f'\n  '114':  '87d787'\n  '115':  '87d7af'\n  '116':  '87d7d7'\n  '117':  '87d7ff'\n  '118':  '87ff00'\n  '119':  '87ff5f'\n  '120':  '87ff87'\n  '121':  '87ffaf'\n  '122':  '87ffd7'\n  '123':  '87ffff'\n  '124':  'af0000'\n  '125':  'af005f'\n  '126':  'af0087'\n  '127':  'af00af'\n  '128':  'af00d7'\n  '129':  'af00ff'\n  '130':  'af5f00'\n  '131':  'af5f5f'\n  '132':  'af5f87'\n  '133':  'af5faf'\n  '134':  'af5fd7'\n  '135':  'af5fff'\n  '136':  'af8700'\n  '137':  'af875f'\n  '138':  'af8787'\n  '139':  'af87af'\n  '140':  'af87d7'\n  '141':  'af87ff'\n  '142':  'afaf00'\n  '143':  'afaf5f'\n  '144':  'afaf87'\n  '145':  'afafaf'\n  '146':  'afafd7'\n  '147':  'afafff'\n  '148':  'afd700'\n  '149':  'afd75f'\n  '150':  'afd787'\n  '151':  'afd7af'\n  '152':  'afd7d7'\n  '153':  'afd7ff'\n  '154':  'afff00'\n  '155':  'afff5f'\n  '156':  'afff87'\n  '157':  'afffaf'\n  '158':  'afffd7'\n  '159':  'afffff'\n  '160':  'd70000'\n  '161':  'd7005f'\n  '162':  'd70087'\n  '163':  'd700af'\n  '164':  'd700d7'\n  '165':  'd700ff'\n  '166':  'd75f00'\n  '167':  'd75f5f'\n  '168':  'd75f87'\n  '169':  'd75faf'\n  '170':  'd75fd7'\n  '171':  'd75fff'\n  '172':  'd78700'\n  '173':  'd7875f'\n  '174':  'd78787'\n  '175':  'd787af'\n  '176':  'd787d7'\n  '177':  'd787ff'\n  '178':  'd7af00'\n  '179':  'd7af5f'\n  '180':  'd7af87'\n  '181':  'd7afaf'\n  '182':  'd7afd7'\n  '183':  'd7afff'\n  '184':  'd7d700'\n  '185':  'd7d75f'\n  '186':  'd7d787'\n  '187':  'd7d7af'\n  '188':  'd7d7d7'\n  '189':  'd7d7ff'\n  '190':  'd7ff00'\n  '191':  'd7ff5f'\n  '192':  'd7ff87'\n  '193':  'd7ffaf'\n  '194':  'd7ffd7'\n  '195':  'd7ffff'\n  '196':  'ff0000'\n  '197':  'ff005f'\n  '198':  'ff0087'\n  '199':  'ff00af'\n  '200':  'ff00d7'\n  '201':  'ff00ff'\n  '202':  'ff5f00'\n  '203':  'ff5f5f'\n  '204':  'ff5f87'\n  '205':  'ff5faf'\n  '206':  'ff5fd7'\n  '207':  'ff5fff'\n  '208':  'ff8700'\n  '209':  'ff875f'\n  '210':  'ff8787'\n  '211':  'ff87af'\n  '212':  'ff87d7'\n  '213':  'ff87ff'\n  '214':  'ffaf00'\n  '215':  'ffaf5f'\n  '216':  'ffaf87'\n  '217':  'ffafaf'\n  '218':  'ffafd7'\n  '219':  'ffafff'\n  '220':  'ffd700'\n  '221':  'ffd75f'\n  '222':  'ffd787'\n  '223':  'ffd7af'\n  '224':  'ffd7d7'\n  '225':  'ffd7ff'\n  '226':  'ffff00'\n  '227':  'ffff5f'\n  '228':  'ffff87'\n  '229':  'ffffaf'\n  '230':  'ffffd7'\n  '231':  'ffffff'\n  # Gray-scale range\n  '232':  '080808'\n  '233':  '121212'\n  '234':  '1c1c1c'\n  '235':  '262626'\n  '236':  '303030'\n  '237':  '3a3a3a'\n  '238':  '444444'\n  '239':  '4e4e4e'\n  '240':  '585858'\n  '241':  '626262'\n  '242':  '6c6c6c'\n  '243':  '767676'\n  '244':  '808080'\n  '245':  '8a8a8a'\n  '246':  '949494'\n  '247':  '9e9e9e'\n  '248':  'a8a8a8'\n  '249':  'b2b2b2'\n  '250':  'bcbcbc'\n  '251':  'c6c6c6'\n  '252':  'd0d0d0'\n  '253':  'dadada'\n  '254':  'e4e4e4'\n  '255':  'eeeeee'\n\n\n#-----------------------------------------------------------------------------------------------------------\nansi_vt100_cc_matcher = /(?:\\x1b\\x5b)([\\?=;0-9]*?)([ABCDHJKfhlmnpsu])/g\n\n#-----------------------------------------------------------------------------------------------------------\n@analyze = ( text ) ->\n  ### Parse ANSI control codes out of `text` and return a list of alternating text / opcode chunks; the\n  first element of the list and all elements with even indexes will represent (possibly empty) literal\n  texts, while elements with even indexes will be sub-lists representing control codes. Each control\n  code looks like `[ 'm', 38, 5, 199 ]` or `[ 'm', 0 ]`, with the opcode letter coming first, followed\n  by the integer parameters.\n\n  Adapted from https://github.com/atdt/escapes.js/blob/master/escapes.js ###\n  R = []\n  #.........................................................................................................\n  loop\n    position  = ansi_vt100_cc_matcher.lastIndex\n    match     = ansi_vt100_cc_matcher.exec text\n    if match isnt null\n      R.push text.slice position, match.index\n      parameters  = [ match[ 2 ], ]\n      parameters.push parseInt x, 10 for x in match[ 1 ].split ';'\n      R.push parameters\n    break if ansi_vt100_cc_matcher.lastIndex is 0\n  #.........................................................................................................\n  R.push text.slice position if position < text.length\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@as_html = ( text, options ) ->\n  return ( @_as_html text, options ).join ''\n\n#-----------------------------------------------------------------------------------------------------------\n@_as_html = ( text, options ) ->\n  is_ansicode     = yes\n  R               = []\n  open_span_count = 0\n  css_prefix      = if options? and options[ 'css-prefix' ]? then options[ 'css-prefix' ] else 'ansi'\n  vt100_reset     = css_prefix.concat '-m-0'\n  vt100_clear     = css_prefix.concat '-K'\n  #.........................................................................................................\n  for chunk in @analyze text\n    is_ansicode = not is_ansicode\n    if is_ansicode\n      color_code = chunk[ chunk.length - 1 ]\n      css_class = css_prefix.concat '-', chunk.join '-'\n      if css_class is vt100_reset or css_class is vt100_clear\n        R.push '</span>'\n        open_span_count -= 1\n      else\n        R.push \"<span style='color:##{rgb_hex_by_vt100_colorcode[ color_code ]};'>\"\n        # R.push \"<span class='#{css_class}'>\"\n        open_span_count += 1\n      continue\n    else\n      ### TAINT must escape ###\n      R.push CND.escape_html chunk\n  #.........................................................................................................\n  if open_span_count > 0 and ( options? and options[ 'close-spans' ] )\n    R.push '</span>' for n in [ 0 ... open_span_count ]\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@get_css_source = ( options ) ->\n  R           = []\n  css_prefix  = if options? and options[ 'css-prefix' ]? then options[ 'css-prefix' ] else 'ansi'\n  for color_code, rgb_hex of rgb_hex_by_vt100_colorcode\n    R.push \".#{css_prefix}-m-38-5-#{color_code} { color: #{rgb_hex}; }\"\n  #.........................................................................................................\n  return R.join '\\n'\n\n\n"
  ]
}