{
  "version": 3,
  "file": "XJSON.js",
  "sourceRoot": "..",
  "sources": [
    "src/XJSON.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;EAAA;AAAA,MAAA,GAAA,EAAA,GAAA,EAAA;;EAGA,GAAA,GAA4B,OAAA,CAAQ,QAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,GAAA,GAA4B,OAAO,CAAC,IALpC;;;;;;;;;;;;;;;;;;;;;EAyBA,IAAC,CAAA,QAAD,GAAY,QAAA,CAAE,GAAF,EAAO,KAAP,CAAA;AAGV,QAAA,IAAA,EAAA,KAAA,EAAA,IAAA;;;IAAA,IAAG,CAAE,GAAG,CAAC,OAAJ,CAAY,KAAZ,CAAF,CAAA,IAA0B,CAAE,KAAO,CAAA,MAAA,CAAP,KAAmB,QAArB,CAA1B,IAA8D,CAAE,GAAG,CAAC,QAAJ,CAAa,IAAA,GAAO,KAAO,CAAA,MAAA,CAA3B,CAAF,CAAjE;AACE,aAAO;QAAE,MAAA,EAAQ,WAAV;QAA0B,OAAA,EAAS;MAAnC,EADT;KAAA;;AAGA,YAAO,IAAA,GAAO,GAAG,CAAC,OAAJ,CAAY,KAAZ,CAAd;;AAAA,WAEO,KAFP;AAE4B,eAAO;UAAE,MAAA,EAAQ;QAAV,EAFnC;;AAAA,WAIO,KAJP;AAI4B,eAAO;UAAE,MAAA,EAAQ,QAAV;UAA0B,OAAA,EAAW,KAAK,CAAC,IAAN,CAAW,KAAX;QAArC;AAJnC,WAKO,KALP;AAK4B,eAAO;UAAE,MAAA,EAAQ,QAAV;UAA0B,OAAA,EAAW,KAAK,CAAC,IAAN,CAAW,KAAX;QAArC;AALnC,WAMO,UANP;AAM4B,eAAO;UAAE,MAAA,EAAQ,aAAV;UAA0B,OAAA,EAAW,KAAK,CAAC,QAAN,CAAA;QAArC,EANnC;;AAAA,WAQO,QARP;QASI,IAAA,GAAU,KAAK,CAAC,QAAN,CAAA,CAAgB,CAAC,OAAjB,CAAyB,kBAAzB,EAA6C,IAA7C;QACV,KAAA,GAAU,KAAA,KAAS,MAAM,CAAC,GAAP,CAAW,IAAX;AACnB,eAAO;UAAE,MAAA,EAAQ,WAAV;UAAuB,KAAvB;UAA8B,OAAA,EAAS;QAAvC;AAXX,KAHA;;AAgBA,WAAO;EAnBG,EAzBZ;;;EA+CA,IAAC,CAAA,OAAD,GAAW,QAAA,CAAE,GAAF,EAAO,KAAP,CAAA;AAET,QAAA,IAAA;;AAAA,YAAO,IAAA,GAAO,GAAG,CAAC,OAAJ,CAAY,KAAZ,CAAd;;AAAA,WAEO,QAFP;AAE4B,eAAO,IAFnC;;AAAA,WAIO,WAJP;AAI4B,eAAO,MAAM,CAAC,IAAP,CAAY,KAAO,CAAA,OAAA,CAAnB;AAJnC,WAKO,QALP;AAK4B,eAAO,IAAI,GAAJ,CAAQ,KAAO,CAAA,OAAA,CAAf;AALnC,WAMO,QANP;AAM4B,eAAO,IAAI,GAAJ,CAAQ,KAAO,CAAA,OAAA,CAAf;AANnC,WAOO,aAPP;AAO4B,eAAO,CAAE,IAAA,CAAK,IAAA,GAAO,KAAO,CAAA,OAAA,CAAd,GAA0B,IAA/B,CAAF,CAAyC,CAAA,CAAA;AAP5E,WAQO,WARP;AAQ4B,eAAO,MAAM,CAAC,GAAP,CAAW,KAAO,CAAA,OAAA,CAAlB;AARnC,KAAA;;AAUA,WAAO;EAZE,EA/CX;;;EA8DA,IAAC,CAAA,SAAD,GAAa,QAAA,CAAE,KAAF,EAAS,QAAT,EAAmB,MAAnB,CAAA;;MACX,WAAY,IAAC,CAAA;;AACb,WAAO,IAAI,CAAC,SAAL,CAAe,KAAf,EAAsB,QAAtB,EAAgC,MAAhC;EAFI,EA9Db;;;EAmEA,IAAC,CAAA,KAAD,GAAS,QAAA,CAAE,IAAF,EAAQ,OAAR,CAAA;;MACP,UAAW,IAAC,CAAA;;AACZ,WAAO,IAAI,CAAC,KAAL,CAAW,IAAX,EAAiB,OAAjB;EAFA,EAnET;;;EAwEA,IAAC,CAAA,QAAD,GAAc,IAAC,CAAA,QAAQ,CAAC,IAAV,CAAgB,IAAhB;;EACd,IAAC,CAAA,OAAD,GAAc,IAAC,CAAA,OAAO,CAAC,IAAT,CAAgB,IAAhB;;EACd,IAAC,CAAA,SAAD,GAAc,IAAC,CAAA,SAAS,CAAC,IAAX,CAAgB,IAAhB;;EACd,IAAC,CAAA,KAAD,GAAc,IAAC,CAAA,KAAK,CAAC,IAAP,CAAgB,IAAhB;AA3Ed",
  "sourcesContent": [
    "\n\n############################################################################################################\nCND                       = require './main'\nrpr                       = CND.rpr\nlog                       = console.log\n# badge                     = 'scratch'\n# log                       = CND.get_logger 'plain',     badge\n# info                      = CND.get_logger 'info',      badge\n# whisper                   = CND.get_logger 'whisper',   badge\n# alert                     = CND.get_logger 'alert',     badge\n# debug                     = CND.get_logger 'debug',     badge\n# warn                      = CND.get_logger 'warn',      badge\n# help                      = CND.get_logger 'help',      badge\n# urge                      = CND.get_logger 'urge',      badge\n# echo                      = CND.echo.bind CND\n# rainbow                   = CND.rainbow.bind CND\n# suspend                   = require 'coffeenode-suspend'\n# step                      = suspend.step\n# after                     = suspend.after\n# eventually                = suspend.eventually\n# immediately               = suspend.immediately\n# every                     = suspend.every\n\n#-----------------------------------------------------------------------------------------------------------\n@replacer = ( key, value ) ->\n  ### NOTE Buffers are treated specially; at this point, they are already converted into sth that looks\n  like `{ type: 'Buffer', data: [ ... ], }`. ###\n  if ( CND.isa_pod value ) and ( value[ 'type' ] is 'Buffer' ) and ( CND.isa_list data = value[ 'data' ] )\n    return { '~isa': '-x-buffer',    '%self': data, }\n  #.........................................................................................................\n  switch type = CND.type_of value\n    #.......................................................................................................\n    when 'nan'          then  return { '~isa': '-x-nan',        }\n    #.......................................................................................................\n    when 'set'          then  return { '~isa': '-x-set',       '%self': ( Array.from value ), }\n    when 'map'          then  return { '~isa': '-x-map',       '%self': ( Array.from value ), }\n    when 'function'     then  return { '~isa': '-x-function',  '%self': ( value.toString() ), }\n    #.......................................................................................................\n    when 'symbol'\n      data    = value.toString().replace /^Symbol\\((.*)\\)$/, '$1'\n      local   = value is Symbol.for data\n      return { '~isa': '-x-symbol', local, '%self': data, }\n  #.........................................................................................................\n  return value\n\n#-----------------------------------------------------------------------------------------------------------\n@reviver = ( key, value ) ->\n  #.........................................................................................................\n  switch type = CND.type_of value\n    #.......................................................................................................\n    when '-x-nan'       then  return NaN\n    #.......................................................................................................\n    when '-x-buffer'    then  return Buffer.from value[ '%self' ]\n    when '-x-set'       then  return new Set value[ '%self' ]\n    when '-x-map'       then  return new Map value[ '%self' ]\n    when '-x-function'  then  return ( eval \"[ \" + value[ '%self' ] + \" ]\" )[ 0 ]\n    when '-x-symbol'    then  return Symbol.for value[ '%self' ]\n  #.........................................................................................................\n  return value\n\n#-----------------------------------------------------------------------------------------------------------\n@stringify = ( value, replacer, spaces ) ->\n  replacer ?= @replacer\n  return JSON.stringify value, replacer, spaces\n\n#-----------------------------------------------------------------------------------------------------------\n@parse = ( text, reviver ) ->\n  reviver ?= @reviver\n  return JSON.parse text, reviver\n\n#-----------------------------------------------------------------------------------------------------------\n@replacer   = @replacer.bind  @\n@reviver    = @reviver.bind   @\n@stringify  = @stringify.bind @\n@parse      = @parse.bind     @\n\n"
  ]
}