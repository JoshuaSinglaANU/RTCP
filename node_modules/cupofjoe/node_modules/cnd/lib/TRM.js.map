{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/TRM.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n############################################################################################################\n@constants                = require './TRM-CONSTANTS'\n@separator                = ' '\n@depth_of_inspect         = 20\nbadge                     = 'TRM'\n@ANSI                     = require './TRM-VT100-ANALYZER'\nσ_cnd                     = Symbol.for 'cnd'\n_inspect                  = ( require 'util' ).inspect\nisa_text                  = ( x ) -> ( typeof x ) is 'string'\n\n#-----------------------------------------------------------------------------------------------------------\nrpr_settings =\n  depth:            Infinity\n  maxArrayLength:   Infinity\n  breakLength:      Infinity\n  compact:          true\n  colors:           false\n@rpr = rpr = ( P... ) -> ( ( _inspect x, rpr_settings ) for x in P ).join ' '\n\n#-----------------------------------------------------------------------------------------------------------\ninspect_settings =\n  depth:            Infinity\n  maxArrayLength:   Infinity\n  breakLength:      Infinity\n  compact:          false\n  colors:           true\n@inspect = ( P... ) -> ( ( _inspect x, inspect_settings ) for x in P ).join ' '\n\n#-----------------------------------------------------------------------------------------------------------\n@get_output_method = ( target, options ) ->\n  return ( P... ) => target.write @pen P...\n\n#-----------------------------------------------------------------------------------------------------------\n@pen = ( P... ) ->\n  ### Given any number of arguments, return a text representing the arguments as seen fit for output\n  commands like `log`, `echo`, and the colors. ###\n  return ( @_pen P... ).concat '\\n'\n\n#-----------------------------------------------------------------------------------------------------------\n@_pen = ( P... ) ->\n  ### ... ###\n  R = ( ( if isa_text p then p else @rpr p ) for p in P )\n  return R.join @separator\n\n#-----------------------------------------------------------------------------------------------------------\n@log                      = @get_output_method process.stderr\n@echo                     = @get_output_method process.stdout\n\n#===========================================================================================================\n# KEY CAPTURING\n#-----------------------------------------------------------------------------------------------------------\n@listen_to_keys = ( handler ) ->\n  ### thx to http://stackoverflow.com/a/12506613/256361 ###\n  #.........................................................................................................\n  ### try not to bind handler to same handler more than once: ###\n  return null if handler.__TRM__listen_to_keys__is_registered\n  Object.defineProperty handler, '__TRM__listen_to_keys__is_registered', value: true, enumerable: false\n  help                = @get_logger 'help', badge\n  last_key_was_ctrl_c = false\n  R                   = process.openStdin()\n  R.setRawMode  true\n  R.setEncoding 'utf-8'\n  R.resume()\n  #.........................................................................................................\n  R.on 'data', ( key ) =>\n    response = handler key\n    if key is '\\u0003'\n      process.exit() if last_key_was_ctrl_c\n      last_key_was_ctrl_c = yes\n      help \"press ctrl-C again to exit\"\n    else\n      last_key_was_ctrl_c = no\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@ask = ( prompt, handler ) ->\n  rl = ( require 'readline' ).createInterface\n    input:  process.stdin\n    output: process.stdout\n  #.........................................................................................................\n  prompt += ' ' unless /\\s+$/.test prompt\n  rl.question ( @cyan prompt ), ( answer ) ->\n    rl.close()\n    handler null, answer\n\n\n# #===========================================================================================================\n# # SHELL COMMANDS\n# #-----------------------------------------------------------------------------------------------------------\n# @execute = ( command, handler ) ->\n#   unless handler?\n#     ### https://github.com/gvarsanyi/sync-exec ###\n#     exec = require 'sync-exec'\n#     #...........................................................................................................\n#     { stdout\n#       stderr\n#       status } = exec 'ls'\n#     throw new Error stderr if stderr? and stderr.length > 0\n#     return lines_from_stdout stdout\n#   #.........................................................................................................\n#   ( require 'child_process' ).exec O[ 'on-change' ], ( error, stdout, stderr ) =>\n#     return handler error if error?\n#     return handler new Error stderr if stderr? and stderr.length isnt 0\n#     handler null, lines_from_stdout stdout\n#   #.........................................................................................................\n#   return null\n\n#-----------------------------------------------------------------------------------------------------------\nlines_from_stdout = ( stdout ) ->\n  R = stdout.split '\\n'\n  R.length -= 1 if R[ R.length - 1 ].length is 0\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@spawn = ( command, parameters, handler ) ->\n  R = ( require 'child_process' ).spawn command, parameters, { stdio: 'inherit', }\n  R.on 'close', handler\n  #.........................................................................................................\n  return R\n\n\n#===========================================================================================================\n# COLORS & EFFECTS\n#-----------------------------------------------------------------------------------------------------------\n@clear_line_right         = @constants.clear_line_right\n@clear_line_left          = @constants.clear_line_left\n@clear_line               = @constants.clear_line\n@clear_below              = @constants.clear_below\n@clear_above              = @constants.clear_above\n@clear                    = @constants.clear\n\n#-----------------------------------------------------------------------------------------------------------\n@goto                     = ( line_nr = 1, column_nr = 1 )  -> return \"\\x1b[#{line_nr};#{column_nr}H\"\n@goto_column              = ( column_nr = 1 )  -> return \"\\x1b[#{column_nr}G\"\n#...........................................................................................................\n@up                       = ( count = 1 ) -> return \"\\x1b[#{count}A\"\n@down                     = ( count = 1 ) -> return \"\\x1b[#{count}B\"\n@right                    = ( count = 1 ) -> return \"\\x1b[#{count}C\"\n@left                     = ( count = 1 ) -> return \"\\x1b[#{count}D\"\n#...........................................................................................................\n@move = ( line_count, column_count ) ->\n  return ( ( if   line_count < 0 then @up     line_count else @down    line_count ) +\n           ( if column_count < 0 then @left column_count else @right column_count ) )\n\n#-----------------------------------------------------------------------------------------------------------\n@ring_bell = ->\n  process.stdout.write \"\\x07\"\n\n#-----------------------------------------------------------------------------------------------------------\neffect_names =\n  blink:        1\n  bold:         1\n  reverse:      1\n  underline:    1\n#...........................................................................................................\nfor effect_name of effect_names\n  effect_on       = @constants[         effect_name ]\n  effect_off      = @constants[ 'no_' + effect_name ]\n  do ( effect_name, effect_on, effect_off ) =>\n    @[ effect_name ] = ( P... ) =>\n      R         = [ effect_on, ]\n      last_idx  = P.length - 1\n      for p, idx in P\n        R.push if isa_text p then p else @rpr p\n        if idx isnt last_idx\n          R.push effect_on\n          R.push @separator\n      R.push effect_off\n      return R.join ''\n#...........................................................................................................\nfor color_name, color_code of @constants[ 'colors' ]\n  do ( color_name, color_code ) =>\n    @[ color_name ] = ( P... ) =>\n      R         = [ color_code, ]\n      last_idx  = P.length - 1\n      for p, idx in P\n        R.push if isa_text p then p else @rpr p\n        if idx isnt last_idx\n          R.push color_code\n          R.push @separator\n      R.push @constants[ 'reset' ]\n      return R.join ''\n\n#-----------------------------------------------------------------------------------------------------------\n@remove_colors = ( text ) ->\n  # this one from http://regexlib.com/UserPatterns.aspx?authorId=f3ce5c3c-5970-48ed-9c4e-81583022a387\n  # looks smarter but isn't JS-compatible:\n  # return text.replace /(?s)(?:\\e\\[(?:(\\d+);?)*([A-Za-z])(.*?))(?=\\e\\[|\\z)/g, ''\n  return text.replace @color_matcher, ''\n\n#-----------------------------------------------------------------------------------------------------------\n@color_matcher = /\\x1b\\[[^m]*m/g\n\n# #-----------------------------------------------------------------------------------------------------------\n# $.length_of_ansi_text = ( text ) ->\n#   return ( text.replace /\\x1b[^m]m/, '' ).length\n\n# #-----------------------------------------------------------------------------------------------------------\n# $.truth = ( P... ) ->\n#   return ( ( ( if p == true then green else if p == false then red else white ) p ) for p in P ).join ''\n\n#-----------------------------------------------------------------------------------------------------------\n# rainbow_color_names = \"\"\"blue tan cyan sepia indigo steel brown red olive lime crimson green plum orange pink\n#                         gold yellow\"\"\".split /\\s+/\nrainbow_color_names = \"\"\"red orange yellow green blue pink\"\"\".split /\\s+/\nrainbow_idx         = -1\n\n#-----------------------------------------------------------------------------------------------------------\n@rainbow = ( P... ) ->\n  rainbow_idx = ( rainbow_idx + 1 ) % rainbow_color_names.length\n  return @[ rainbow_color_names[ rainbow_idx ] ] P...\n\n#-----------------------------------------------------------------------------------------------------------\n@route = ( P... ) ->\n  return @lime @underline P...\n\n#-----------------------------------------------------------------------------------------------------------\n@truth = ( P... ) ->\n  return ( ( if p then @green \"✔  #{@_pen p}\" else @red \"✗  #{@_pen p}\" ) for p in P ).join ''\n\n#-----------------------------------------------------------------------------------------------------------\n@get_logger = ( category, badge = null ) ->\n  #.........................................................................................................\n  switch category\n    #.......................................................................................................\n    when 'plain'\n      colorize  = null\n      pointer   = @grey ' ▶ '\n    #.......................................................................................................\n    when 'info'\n      colorize  = @BLUE.bind @\n      pointer   = @grey ' ▶ '\n    #.......................................................................................................\n    when 'whisper'\n      colorize  = @grey.bind @\n      pointer   = @grey ' ▶ '\n    #.......................................................................................................\n    when 'urge'\n      colorize  = @orange.bind @\n      pointer   = @bold @RED ' ? '\n    #.......................................................................................................\n    when 'praise'\n      colorize  = @GREEN.bind @\n      pointer   = @GREEN ' ✔ '\n    #.......................................................................................................\n    when 'debug'\n      colorize  = @pink.bind @\n      pointer   = @grey ' ⚙ '\n    #.......................................................................................................\n    when 'alert'\n      colorize  = @RED.bind @\n      pointer   = @blink @RED ' ⚠ '\n    #.......................................................................................................\n    when 'warn'\n      colorize  = @RED.bind @\n      pointer   = @bold @RED ' ! '\n    #.......................................................................................................\n    when 'help'\n      colorize  = @lime.bind @\n      pointer   = @gold ' ☛ '\n    #.......................................................................................................\n    else\n      throw new Error \"unknown logger category #{rpr category}\"\n  #.........................................................................................................\n  prefix = if badge? then ( @grey badge ).concat ' ', pointer else pointer\n  #.........................................................................................................\n  if colorize? then R = ( P... ) => return @log ( ( @grey get_timestamp() ) + ' ' + prefix ), colorize  P...\n  else              R = ( P... ) => return @log ( ( @grey get_timestamp() ) + ' ' + prefix ),           P...\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nget_timestamp = ->\n  t1  = Math.floor ( Date.now() - global[ σ_cnd ].t0 ) / 1000\n  s   = t1 % 60\n  s   = '' + s\n  s   = '0' + s if s.length < 2\n  m   = ( Math.floor t1 / 60 ) % 100\n  m   = '' + m\n  m   = '0' + m if m.length < 2\n  return \"#{m}:#{s}\"\n\n\n#===========================================================================================================\n# EXTRACTING COLORS / CONVERTING COLORS TO HTML\n#-----------------------------------------------------------------------------------------------------------\n### TAINT naming unstable, to be renamed ###\n# @as_html = @ANSI.as_html.bind @ANSI\n# @get_css_source = @ANSI.get_css_source.bind @ANSI\n# @analyze = @ANSI.analyze.bind @ANSI\n\n#-----------------------------------------------------------------------------------------------------------\n@clean = ( text ) ->\n  is_ansicode = yes\n  R           = []\n  #.........................................................................................................\n  return ( chunk for chunk in @analyze text when ( is_ansicode = not is_ansicode ) ).join ''\n\n\n#===========================================================================================================\n# VALUE REPORTING\n# #-----------------------------------------------------------------------------------------------------------\n# @_prototype_of_object = Object.getPrototypeOf new Object()\n\n#-----------------------------------------------------------------------------------------------------------\n@_dir_options =\n  'skip-list-idxs':   yes\n  'skip-object':      yes\n\n#-----------------------------------------------------------------------------------------------------------\n@_marker_by_type =\n  'function':       '()'\n\n# #-----------------------------------------------------------------------------------------------------------\n# @dir = ( P... ) ->\n#   switch arity = P.length\n#     when 0\n#       throw new Error \"called TRM.dir without arguments\"\n#     when 1\n#       x = P[ 0 ]\n#     else\n#       x = P[ P.length - 1 ]\n#       @log @rainbow p for p, idx in P when idx < P.length - 1\n#   width = if process.stdout.isTTY then process.stdout.columns else 108\n#   r     = ( @rpr x ).replace /\\n\\s*/g, ' '\n#   r     = r[ .. Math.max 5, width - 5 ].concat @grey ' ...' if r.length > width\n#   @log '\\n'.concat ( @lime r ), '\\n', ( ( @_dir x ).join @grey ' ' ), '\\n'\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_dir = ( x ) ->\n#   R = []\n#   for [ role, p, type, names, ] in @_get_prototypes_types_and_property_names x, []\n#     R.push @grey '('.concat role, ')'\n#     R.push @orange type\n#     for name in names\n#       marker = @_marker_from_type type_of ( Object.getOwnPropertyDescriptor p, name )[ 'value' ]\n#       R.push ( @cyan name ).concat @grey marker\n#   return R\n\n#-----------------------------------------------------------------------------------------------------------\n @_is_list_idx = ( idx_txt, length ) ->\n  return false unless /^[0-9]+$/.test idx_txt\n  return 0 <= ( parseInt idx_txt ) < length\n\n#-----------------------------------------------------------------------------------------------------------\n@_marker_from_type = ( type ) ->\n  return @_marker_by_type[ type ] ? '|'.concat type\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_get_prototypes_types_and_property_names = ( x, types_and_names ) ->\n#   types                     = require './types'\n#   { isa\n#     type_of }               = @types\n#   #.........................................................................................................\n#   role = if types_and_names.length is 0 then 'type' else 'prototype'\n#   unless x?\n#     types_and_names.push [ role, x, ( type_of x ), [], ]\n#     return types_and_names\n#   #.........................................................................................................\n#   try\n#     names           = Object.getOwnPropertyNames x\n#     prototype       = Object.getPrototypeOf x\n#   catch error\n#     throw error unless error[ 'message' ] is 'Object.getOwnPropertyNames called on non-object'\n#     x_              = new Object x\n#     names           = Object.getOwnPropertyNames x_\n#     prototype       = Object.getPrototypeOf x_\n#   #.........................................................................................................\n#   try\n#     length = x.length\n#     if length?\n#       names = ( name for name in names when not  @_is_list_idx name, x.length )\n#   catch error\n#     throw error unless error[ 'message' ].test /^Cannot read property 'length' of /\n#   #.........................................................................................................\n#   names.sort()\n#   types_and_names.push [ role, x, ( type_of x ), names ]\n#   #.........................................................................................................\n#   if prototype? and not ( @_dir_options[ 'skip-object' ] and prototype is @_prototype_of_object )\n#     @_get_prototypes_types_and_property_names prototype, types_and_names\n#   #.........................................................................................................\n#   return types_and_names\n\n\n\n\n\n\n"
  ]
}