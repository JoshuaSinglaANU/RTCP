{
  "version": 3,
  "file": "exception-handler.js",
  "sourceRoot": "..",
  "sources": [
    "src/exception-handler.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = '明快打字机/exception-handler'\nlog                       = CND.get_logger 'plain',     badge\ndebug                     = CND.get_logger 'debug',     badge\ninfo                      = CND.get_logger 'info',      badge\nwarn                      = CND.get_logger 'warn',      badge\nalert                     = CND.get_logger 'alert',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n\n#-----------------------------------------------------------------------------------------------------------\n@exit_handler = ( exception ) ->\n  # debug '55567', rpr exception\n  print               = alert\n  message             = 'ROGUE EXCEPTION: ' + ( exception?.message ? \"an unrecoverable condition occurred\" )\n  if exception?.where?\n    message += '\\n--------------------\\n' + exception.where + '\\n--------------------'\n  [ head, tail..., ]  = message.split '\\n'\n  print CND.reverse ' ' + head + ' '\n  warn line for line in tail\n  ### TAINT should have a way to set exit code explicitly ###\n  whisper exception?.stack ? \"(exception undefined, no stack)\"\n  process.exit 1\n@exit_handler = @exit_handler.bind @\n\n# debug 'µ55531', __filename\n# debug 'µ55531', \"app:\", typeof app\n# check for process.type:\n# if process.type is 'renderer'\n# # if typeof app is 'undefined'\n#   process.on 'uncaughtException',  @exit_handler\n#   process.on 'unhandledRejection', @exit_handler\n# else\n#   urge \"µ55531 using electron-unhandled\"\n# ( require 'electron-unhandled' ) { showDialog: true, logger: @exit_handler, }\n\n# if process.type is 'renderer'\n#   window.addEventListener 'error', ( event ) =>\n#     event.preventDefault()\n#     warn 'µ44333', \"error:\", ( k for k of event )\n\n#   window.addEventListener 'unhandledrejection', ( event ) =>\n#     event.preventDefault()\n#     # warn 'µ44333', \"unhandled rejection:\", ( k for k of event )\n#     warn 'µ44333', \"unhandled rejection:\", event.reason?.message ? \"(no message)\"\n\n\n############################################################################################################\nif process.type is 'renderer'\n  window.addEventListener 'error', ( event ) =>\n    # event.preventDefault()\n    message = ( event.error?.message ? \"(error without message)\" ) + '\\n' + ( event.error?.stack ? '' )[ ... 500 ]\n    OPS.log message\n    # @exit_handler event.error\n    OPS.open_devtools()\n    return true\n\n  window.addEventListener 'unhandledrejection', ( event ) =>\n    # event.preventDefault()\n    message = ( event.reason?.message ? \"(error without message)\" ) + '\\n' + ( event.reason?.stack ? '' )[ ... 500 ]\n    OPS.log message\n    # @exit_handler event.reason\n    OPS.open_devtools()\n    return true\nelse\n  process.on 'uncaughtException',  @exit_handler\n  process.on 'unhandledRejection', @exit_handler\n\n"
  ]
}