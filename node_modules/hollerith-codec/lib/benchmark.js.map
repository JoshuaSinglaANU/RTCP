{
  "version": 3,
  "file": "benchmark.js",
  "sourceRoot": "..",
  "sources": [
    "src/benchmark.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HOLLERITH-CODEC/benchmarks'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nBYTEWISE                  = require 'bytewise'\nCODEC                     = require './main'\nCHANCE                    = new ( require 'chance' )()\nƒ                         = CND.format_number.bind CND\n\n#-----------------------------------------------------------------------------------------------------------\ntimes = {}\n\n#-----------------------------------------------------------------------------------------------------------\nstart = ( name ) ->\n  whisper \"start #{name}\"\n  times[ name ] = process.hrtime()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nstop = ( name ) ->\n  dt = process.hrtime times[ name ]\n  times[ name ] = dt[ 0 ] + dt[ 1 ] / 1e9\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nreport = ( n, min_name ) ->\n  columnify_settings =\n    config:\n      dt:     { align: 'right' }\n      rel:    { align: 'right' }\n      max:    { align: 'right' }\n  if min_name?\n    min = times[ min_name ]\n  else\n    min = Math.min ( dt for _, dt of times )...\n  max = Math.max ( dt for _, dt of times )...\n  debug '©q6yuS', min, max\n  data = []\n  for name, dt of times\n    # nanos = \"000000000#{dt[ 1 ]}\"\n    # nanos = nanos[ nanos.length - 9 .. nanos.length - 1 ]\n    # urge \"#{dt[ 0 ]}.#{nanos} #{name}\"\n    entry =\n      name:     name\n      dt:       ( dt.toFixed 9 )\n      rel:      \"#{( dt / min ).toFixed 2}\"\n      max:      \"#{( dt / max ).toFixed 2}\"\n    data.push entry\n  urge \"time needed to process #{ƒ n} probes (lower is better):\"\n  help '\\n' + CND.columnify data, columnify_settings\n\n#-----------------------------------------------------------------------------------------------------------\n@test_h2c = ( probes ) ->\n  start 'H2C.encode'\n  CODEC.encode probe for probe in probes\n  stop 'H2C.encode'\n\n#-----------------------------------------------------------------------------------------------------------\n@test_bytewise = ( probes ) ->\n  start 'bytewise.encode'\n  BYTEWISE.encode probe for probe in probes\n  stop 'bytewise.encode'\n\n#-----------------------------------------------------------------------------------------------------------\n@test_json = ( probes ) ->\n  start 'new Buffer JSON.stringify'\n  new Buffer JSON.stringify probe for probe in probes\n  stop 'new Buffer JSON.stringify'\n\n#-----------------------------------------------------------------------------------------------------------\n@test_new_buffer = ( probes ) ->\n  start 'new_buffer'\n  for probe in probes\n    b = new Buffer probe\n  stop 'new_buffer'\n\n#-----------------------------------------------------------------------------------------------------------\n@test_buffer_write = ( probes ) ->\n  b = new Buffer 1024\n  start 'buffer_write'\n  for probe in probes\n    b.write probe[ 0 ]\n  stop 'buffer_write'\n\n#-----------------------------------------------------------------------------------------------------------\n@test_string_replace = ( probes ) ->\n  start 'string_replace'\n  for probe in probes\n    x = probe[ 0 ].replace /a/g, '#'\n  stop 'string_replace'\n\n#-----------------------------------------------------------------------------------------------------------\n@main = ->\n  n = 100000\n  whisper \"generating #{ƒ n} probes\"\n  method_names  = [ 'bool', 'word', 'floating', 'string', ]\n  probes        = []\n  for probe_idx in [ 1 .. n ]\n    probe = []\n    for _ in [ 0 .. 3 ]\n      method_name = method_names[ CND.random_integer 0, method_names.length - 1 ]\n      probe.push CHANCE[ method_name ]()\n    probes.push probe\n  #.........................................................................................................\n  help \"generated #{ƒ probes.length} probes; now performing benchmarks\"\n  @test_bytewise              probes\n  @test_json                  probes\n  @test_h2c                   probes\n  # @test_new_buffer            probes\n  # @test_buffer_write          probes\n  # @test_string_replace        probes\n  report n, 'new Buffer JSON.stringify'\n\n\n############################################################################################################\nunless module.parent?\n  @main()\n\n\n\n\n\n\n\n\n\n\n\n"
  ]
}