{
  "version": 3,
  "file": "demo.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/demo.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MULTIMIX/EXPERIMENTS/ES6-CLASSES-WITH.MIXINS'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\n\n\n#-----------------------------------------------------------------------------------------------------------\nrewritten_example = ->\n\n\n  #=========================================================================================================\n  # MODULE METACLASS provides static methods `@extend()`, `@include()`\n  #---------------------------------------------------------------------------------------------------------\n  ### The little dance around the module_keywords variable is to ensure we have callback support when mixins\n  extend a class. See https://arcturo.github.io/library/coffeescript/03_classes.html ###\n  #---------------------------------------------------------------------------------------------------------\n  module_keywords = [ 'extended', 'included', ]\n\n  #=========================================================================================================\n  class Multimix\n\n    #-------------------------------------------------------------------------------------------------------\n    @extend: ( object ) ->\n      for key, value of object when key not in module_keywords\n        @[ key ] = value\n      object.extended?.apply @\n      return @\n\n    #-------------------------------------------------------------------------------------------------------\n    @include: ( object ) ->\n      for key, value of object when key not in module_keywords\n        # Assign properties to the prototype\n        @::[ key ] = value\n      object.included?.apply @\n      return @\n\n    #-------------------------------------------------------------------------------------------------------\n    export: ->\n      ### Return an object with methods, bound to the current instance. ###\n      R = {}\n      for k, v of @\n        continue unless v?.bind?\n        if ( v[ isa_keymethod_proxy ] ? false )\n          R[ k ] = _get_keymethod_proxy @, v\n        else\n          R[ k ] = v.bind @\n      return R\n\n  #=========================================================================================================\n  # KEYMETHOD FACTORY\n  #---------------------------------------------------------------------------------------------------------\n  _get_keymethod_proxy = ( bind_target, f ) ->\n    R = new Proxy ( f.bind bind_target ),\n      get: ( target, key ) ->\n        return target[ key ] if key in [ 'bind', ] # ... other properties ...\n        return target[ key ] if ( js_type_of key ) is 'symbol'\n        return ( xP... ) -> target key, xP...\n    R[ isa_keymethod_proxy ] = true\n    return R\n\n\n  #=========================================================================================================\n  # SAMPLE OBJECTS WITH INSTANCE METHODS, STATIC METHODS\n  #---------------------------------------------------------------------------------------------------------\n  object_with_class_properties =\n    find:   ( id    ) -> info \"class method 'find()'\", ( k for k of @ )\n    create: ( attrs ) -> info \"class method 'create()'\", ( k for k of @ )\n\n  #---------------------------------------------------------------------------------------------------------\n  object_with_instance_properties =\n    save: -> info \"instance method 'save()'\", ( k for k of @ )\n\n  #=========================================================================================================\n  js_type_of = ( x ) -> return ( ( Object::toString.call x ).slice 8, -1 ).toLowerCase()\n  isa_keymethod_proxy = Symbol 'proxy'\n\n  #---------------------------------------------------------------------------------------------------------\n  isa = ( type, xP... ) ->\n    ### NOTE realistic method should throw error when `type` not in `specs` ###\n    urge \"µ1129 object #{rpr @instance_name} isa #{rpr type} called with #{rpr xP}\"\n    urge \"µ1129 my @specs: #{rpr @specs}\"\n    urge \"µ1129 spec for type #{rpr type}: #{rpr @specs[ type ]}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  class Intertype extends Multimix\n    @extend   object_with_class_properties\n    @include  object_with_instance_properties\n\n    #-------------------------------------------------------------------------------------------------------\n    constructor: ( @instance_name ) ->\n      super()\n      @specs = {}\n      @declare type, value for type, value of @constructor.base_types\n      @isa = _get_keymethod_proxy @, isa\n\n    #-------------------------------------------------------------------------------------------------------\n    declare: ( type, value ) ->\n      whisper 'µ7474', 'declare', type, rpr value\n      @specs[ type ] = value\n\n    #-------------------------------------------------------------------------------------------------------\n    @base_types =\n      foo: 'spec for type foo'\n      bar: 'spec for type bar'\n\n\n  ##########################################################################################################\n  intertype_1 = new Intertype\n  intertype_2 = new Intertype\n\n  info 'µ002-1', Intertype.base_types\n  info 'µ002-2', intertype_1.declare 'new_on_it1', 'a new hope'\n  info 'µ002-3', 'intertype_1.specs', intertype_1.specs\n  info 'µ002-4', 'intertype_2.specs', intertype_2.specs\n  info 'µ002-5', intertype_1.isa 'new_on_it1', 1, 2, 3\n  info 'µ002-6', intertype_1.isa.new_on_it1    1, 2, 3\n  info 'µ002-7', intertype_2.isa 'new_on_it1', 1, 2, 3\n  info 'µ002-8', intertype_2.isa.new_on_it1    1, 2, 3\n  { isa, declare, } = intertype_1.export()\n  info 'µ002-9', isa 'new_on_it1', 1, 2, 3\n  info 'µ002-10', isa.new_on_it1    1, 2, 3\n\n#-----------------------------------------------------------------------------------------------------------\nexample_using_multimix = ->\n  Multimix = require '../..'\n\n  #=========================================================================================================\n  # SAMPLE OBJECTS WITH INSTANCE METHODS, STATIC METHODS\n  #---------------------------------------------------------------------------------------------------------\n  object_with_class_properties =\n    find:   ( id    ) -> info \"class method 'find()'\", ( k for k of @ )\n    create: ( attrs ) -> info \"class method 'create()'\", ( k for k of @ )\n\n  #---------------------------------------------------------------------------------------------------------\n  object_with_instance_properties =\n    save: -> info \"instance method 'save()'\", ( k for k of @ )\n    find: -> info \"instance method 'find()'\", ( k for k of @ )\n\n  #=========================================================================================================\n  # CLASS DECLARATION\n  #---------------------------------------------------------------------------------------------------------\n  isa = ( type, xP... ) ->\n    ### NOTE realistic method should throw error when `type` not in `specs` ###\n    urge \"µ1129 object #{rpr @instance_name} isa #{rpr type} called with #{rpr xP}\"\n    urge \"µ1129 my @specs: #{rpr @specs}\"\n    urge \"µ1129 spec for type #{rpr type}: #{rpr @specs[ type ]}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  class Intertype extends Multimix\n    @extend   object_with_class_properties,     { overwrite: true, }\n    @include  object_with_instance_properties,  { overwrite: true, }\n\n    #-------------------------------------------------------------------------------------------------------\n    constructor: ( @instance_name ) ->\n      super()\n      @specs = {}\n      @declare type, value for type, value of @constructor.base_types\n      @isa = Multimix.get_keymethod_proxy @, isa\n\n    #-------------------------------------------------------------------------------------------------------\n    declare: ( type, value ) ->\n      whisper 'µ7474', 'declare', type, rpr value\n      @specs[ type ] = value\n\n    #-------------------------------------------------------------------------------------------------------\n    @base_types =\n      foo: 'spec for type foo'\n      bar: 'spec for type bar'\n\n\n  ##########################################################################################################\n  target      = {}\n  intertype_1 = new Intertype target\n  intertype_2 = new Intertype\n\n  info 'µ002-1', Intertype.base_types\n  info 'µ002-2', intertype_1.declare 'new_on_it1', 'a new hope'\n  info 'µ002-3', 'intertype_1.specs', intertype_1.specs\n  info 'µ002-4', 'intertype_2.specs', intertype_2.specs\n  info 'µ002-5', intertype_1.isa 'new_on_it1', 1, 2, 3\n  info 'µ002-6', intertype_1.isa.new_on_it1    1, 2, 3\n  info 'µ002-7', intertype_2.isa 'new_on_it1', 1, 2, 3\n  info 'µ002-8', intertype_2.isa.new_on_it1    1, 2, 3\n  target = {}\n  { isa, declare, } = intertype_1.export target\n  info 'µ002-9',  isa 'new_on_it1', 1, 2, 3\n  info 'µ002-10', isa.new_on_it1    1, 2, 3\n  info 'µ002-11', target.isa 'new_on_it1', 1, 2, 3\n  info 'µ002-12', target.isa.new_on_it1    1, 2, 3\n  info 'µ002-13', intertype_1.find()\n  info 'µ002-14', intertype_2.find()\n  debug target\n  debug intertype_2\n\n\n#-----------------------------------------------------------------------------------------------------------\nexample_for_overwrite_false = ->\n  Multimix = require '../..'\n\n  #=========================================================================================================\n  # SAMPLE OBJECTS WITH INSTANCE METHODS, STATIC METHODS\n  #---------------------------------------------------------------------------------------------------------\n  object_with_class_properties =\n    find:   ( id    ) -> info \"class method 'find()'\", ( k for k of @ )\n    create: ( attrs ) -> info \"class method 'create()'\", ( k for k of @ )\n\n  #---------------------------------------------------------------------------------------------------------\n  object_with_instance_properties =\n    save: -> info \"instance method 'save()'\", ( k for k of @ )\n    find: -> info \"instance method 'find()'\", ( k for k of @ )\n\n  #=========================================================================================================\n  # CLASS DECLARATION\n  #---------------------------------------------------------------------------------------------------------\n  isa = ( type, xP... ) ->\n    ### NOTE realistic method should throw error when `type` not in `specs` ###\n    urge \"µ1129 object #{rpr @instance_name} isa #{rpr type} called with #{rpr xP}\"\n    urge \"µ1129 my @specs: #{rpr @specs}\"\n    urge \"µ1129 spec for type #{rpr type}: #{rpr @specs[ type ]}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  try\n    class Intertype extends Multimix\n      @extend   object_with_class_properties,     { overwrite: false, }\n      @include  object_with_instance_properties,  { overwrite: false, }\n    # intertype = new Intertype()\n  catch error\n    warn error.message\n  return null\n\n\n############################################################################################################\nunless module.parent?\n  # raw_example()\n  # rewritten_example()\n  example_using_multimix()\n  example_for_overwrite_false()\n\n"
  ]
}