// Generated by CoffeeScript 2.5.1
(function() {
  //###########################################################################################################
  var js_type_of, log, njs_util, rpr;

  log = console.log;

  rpr = function(x) {
    return (require('util')).inspect(x, false, 22);
  };

  //-----------------------------------------------------------------------------------------------------------
  njs_util = require('util');

  js_type_of = function(x) {
    return Object.prototype.toString.call(x);
  };

  //...........................................................................................................

  //===========================================================================================================
  // TYPE ELUCIDATION
  //-----------------------------------------------------------------------------------------------------------
  this._coffeenode_type_by_js_type = {
    '[object Array]': 'list',
    // '[object Boolean]':                   'boolean'
    '[object Function]': 'function',
    // '[object Null]':                      'null'
    '[object String]': 'text',
    //.........................................................................................................
    '[object Generator]': 'generator',
    //.........................................................................................................
    // '[object Undefined]':                 'jsundefined'
    '[object Arguments]': 'arguments',
    '[object Date]': 'date',
    '[object Error]': 'error',
    '[object global]': 'global',
    '[object RegExp]': 'regex',
    '[object DOMWindow]': 'window',
    '[object CanvasRenderingContext2D]': 'canvasrenderingcontext2d',
    '[object ArrayBuffer]': 'arraybuffer',
    //.........................................................................................................
    '[object Object]': function(x) {
      if (Buffer.isBuffer(x)) {
        return 'buffer';
      }
      return 'pod';
    },
    //.........................................................................................................
    '[object Number]': function(x) {
      if (isNaN(x)) {
        /* TAINT isNaN is broken as per https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN#Description */
        return 'nan';
      }
      // return 'jsinfinity'   if x == Infinity or x == -Infinity
      return 'number';
    }
  };

  //-----------------------------------------------------------------------------------------------------------
  this.type_of = function(x) {
    `Given any kind of value \`\`x\`\`, return its type.`;
    var R, js_type;
    //.........................................................................................................
    switch (x) {
      case null:
        return 'null';
      case void 0:
        return 'undefined';
      case true:
      case false:
        return 'boolean';
      case -2e308:
      case 2e308:
        return 'infinity';
    }
    //.........................................................................................................
    R = x['~isa'];
    if (R != null) {
      return R;
    }
    if (Buffer.isBuffer(x)) {
      //.........................................................................................................
      return 'buffer';
    }
    js_type = js_type_of(x);
    R = this._coffeenode_type_by_js_type[js_type];
    if (R == null) {
      return (js_type.replace(/^\[object (.+)\]$/, '$1')).toLowerCase();
    }
    if (this.isa_function(R)) {
      return R(x);
    } else {
      return R;
    }
  };

  //-----------------------------------------------------------------------------------------------------------
  this.isa = function(x, probe) {
    `Given any value \`\`x\`\` and a non-empty text \`\`probe\`\`, return whether \`\`TYPES/type_of x\`\` equals
\`\`probe\`\`.`;
    // validate_name probe
    return (this.type_of(x)) === probe;
  };

  //===========================================================================================================
  // TYPE TESTING
  //-----------------------------------------------------------------------------------------------------------
  // It is outright incredible, some would think frightening, how much manpower has gone into reliable
  // JavaScript type checking. Here is the latest and greatest for a language that can claim to be second
  // to none when it comes to things that should be easy but aren’t: the ‘Miller Device’ by Mark Miller of
  // Google (http://www.caplet.com), popularized by James Crockford of Yahoo!.*

  // As per https://groups.google.com/d/msg/nodejs/P_RzSyPkjkI/NvP28SXvf24J, now also called the 'Flanagan
  // Device'

  // http://ajaxian.com/archives/isarray-why-is-it-so-bloody-hard-to-get-right
  // http://blog.360.yahoo.com/blog-TBPekxc1dLNy5DOloPfzVvFIVOWMB0li?p=916 # page gone
  // http://zaa.ch/past/2009/1/31/the_miller_device_on_null_and_other_lowly_unvalues/ # moved to:
  // http://zaa.ch/post/918977126/the-miller-device-on-null-and-other-lowly-unvalues
  //...........................................................................................................
  this.isa_list = function(x) {
    return (js_type_of(x)) === '[object Array]';
  };

  this.isa_boolean = function(x) {
    return (js_type_of(x)) === '[object Boolean]';
  };

  this.isa_function = function(x) {
    return (js_type_of(x)) === '[object Function]';
  };

  this.isa_pod = function(x) {
    return (js_type_of(x)) === '[object Object]' && !Buffer.isBuffer(x);
  };

  this.isa_text = function(x) {
    return (js_type_of(x)) === '[object String]';
  };

  this.isa_number = function(x) {
    return (js_type_of(x)) === '[object Number]' && isFinite(x);
  };

  this.isa_null = function(x) {
    return x === null;
  };

  this.isa_jsundefined = function(x) {
    return x === void 0;
  };

  this.isa_infinity = function(x) {
    return x === 2e308 || x === -2e308;
  };

  //...........................................................................................................
  this.isa_jsarguments = function(x) {
    return (js_type_of(x)) === '[object Arguments]';
  };

  /* TAINT isNaN is broken as per https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN#Description */
  this.isa_jsnotanumber = function(x) {
    return isNaN(x);
  };

  this.isa_jsdate = function(x) {
    return (js_type_of(x)) === '[object Date]';
  };

  this.isa_jsglobal = function(x) {
    return (js_type_of(x)) === '[object global]';
  };

  this.isa_jsregex = function(x) {
    return (js_type_of(x)) === '[object RegExp]';
  };

  this.isa_jserror = function(x) {
    return (js_type_of(x)) === '[object Error]';
  };

  this.isa_jswindow = function(x) {
    return (js_type_of(x)) === '[object DOMWindow]';
  };

  this.isa_jsctx = function(x) {
    return (js_type_of(x)) === '[object CanvasRenderingContext2D]';
  };

  this.isa_jsarraybuffer = function(x) {
    return (js_type_of(x)) === '[object ArrayBuffer]';
  };

  //...........................................................................................................
  // @isa_jsbuffer      = Buffer.isBuffer

  //-----------------------------------------------------------------------------------------------------------
  /* https://github.com/blakeembrey/is-generator/blob/master/is-generator.js */
  this.isa_generator = function(x) {
    return (x != null) && (typeof x.next === 'function') && (typeof x.throw === 'function');
  };

  this.isa_generator_function = function(x) {
    return (typeof x === 'function') && (x.constructor.name === 'GeneratorFunction');
  };

  //-----------------------------------------------------------------------------------------------------------
  // Replace some of our ``isa_*`` methods by the ≈6× faster methods provided by NodeJS ≥ 0.6.0, where
  // available:
  this.isa_list = Array.isArray;

  this.isa_buffer = Buffer.isBuffer;

  // @isa_jsregex          = njs_util.isRegExp           if njs_util.isRegExp?
  // @isa_jsdate           = njs_util.isDate             if njs_util.isDate?
  // @isa_boolean          = njs_util.isBoolean          if njs_util.isBoolean?
  // @isa_jserror          = njs_util.isError            if njs_util.isError?
  // @isa_function         = njs_util.isFunction         if njs_util.isFunction?
  // @isa_primitive        = njs_util.isPrimitive        if njs_util.isPrimitive?
  // @isa_text             = njs_util.isString           if njs_util.isString?
  // @isa_jsundefined      = njs_util.isUndefined        if njs_util.isUndefined?
  // @isa_null             = njs_util.isNull             if njs_util.isNull?
  // @isa_nullorundefined  = njs_util.isNullOrUndefined  if njs_util.isNullOrUndefined?
  // @isa_number           = njs_util.isNumber           if njs_util.isNumber?
  // @isa_object           = njs_util.isObject           if njs_util.isObject?
  // @isa_symbol           = njs_util.isSymbol           if njs_util.isSymbol?

  //===========================================================================================================
  // TYPE FEATURES
  //-----------------------------------------------------------------------------------------------------------
  // these await further elaboration

  // @is_mutable          = ( x ) -> return type_features[ @type_of x ][ 'mutable'        ] is true
  // @is_indexed          = ( x ) -> return type_features[ @type_of x ][ 'indexed'        ] is true
  // @is_facetted         = ( x ) -> return type_features[ @type_of x ][ 'facetted'       ] is true
  // @is_ordered          = ( x ) -> return type_features[ @type_of x ][ 'ordered'        ] is true
  // @is_repetitive       = ( x ) -> return type_features[ @type_of x ][ 'repetitive'     ] is true
  // @is_single_valued    = ( x ) -> return type_features[ @type_of x ][ 'single_valued'  ] is true
  // @is_dense            = ( x ) -> return type_features[ @type_of x ][ 'dense'          ] is true
  // @is_callable         = ( x ) -> return type_features[ @type_of x ][ 'callable'       ] is true
  // @is_numeric          = ( x ) -> return type_features[ @type_of x ][ 'numeric'        ] is true
  // @is_basic            = ( x ) -> return type_features[ @type_of x ][ 'basic'          ] is true
  // @is_ecma             = ( x ) -> return type_features[ @type_of x ][ 'ecma'           ] is true
  // @is_covered_by_json  = ( x ) -> return type_features[ @type_of x ][ 'json'           ] is true

  //===========================================================================================================
  // HELPERS
  //-----------------------------------------------------------------------------------------------------------
  // vaq = validate_argument_count_equals = ( count ) ->
  //   a = arguments.callee.caller.arguments
  //   unless a.length == count then throw new Error "expected #{count} arguments, got #{a.length}"

  // #-----------------------------------------------------------------------------------------------------------
  // validate_name = ( x ) ->
  //   unless @isa_text x   then throw new Error "expected a text, got a #{@type_of x}"
  //   unless x.length > 0   then throw new Error "expected a non-empty text, got an empty one"

  //-----------------------------------------------------------------------------------------------------------
  // This registry lists all types that can be meaningfully compared using JS's ``===`` / CS's ``==`` strict
  // equality operator; conspicuously absent here are lists and PODs, for which the Δ method ``equals`` should
  // be used instead:
  this.simple_equality_types = {
    'number': true,
    'infinity': true,
    'text': true,
    'boolean': true,
    'null': true,
    'jsundefined': true
  };

  //-----------------------------------------------------------------------------------------------------------
  // This registry lists all types that can be meaningfully compared using `<` and `>`:
  this.simple_comparison_types = {
    'number': true,
    'infinity': true,
    'text': true,
    'boolean': true,
    'null': true
  };

  // 'jsundefined':  true

  //-----------------------------------------------------------------------------------------------------------
  // 'ISA' VALIDATION
  //...........................................................................................................
  this.validate_isa = function(x, ...types) {
    var i, len, message, probe_type, type;
    if (types.length === 0) {
      throw new Error("expected one or more types, got none");
    }
    //.........................................................................................................
    probe_type = this.type_of(x);
    for (i = 0, len = types.length; i < len; i++) {
      type = types[i];
      if (type === probe_type) {
        return null;
      }
    }
    //.........................................................................................................
    if (types.length === 1) {
      message = `expected a ${types[0]}, got a ${probe_type}`;
    } else {
      types = types.join(', ');
      message = `expected value to have one of these types: ${types}, got a ${probe_type}`;
    }
    //.........................................................................................................
    return null;
  };

  (() => {    //-----------------------------------------------------------------------------------------------------------
    var match, name, results, type;
    results = [];
    for (name in this) {
      match = name.match(/^isa_(.+)/);
      if (match == null) {
        continue;
      }
      type = match[1];
      //.......................................................................................................
      results.push(((name, type) => {
        return this[`validate_${name}`] = function(x) {
          if (this[name](x)) {
            return null;
          }
          throw new Error(`expected a ${type}, got a ${this.type_of(x)}`);
        };
      })(name, type));
    }
    return results;
  })();

  //-----------------------------------------------------------------------------------------------------------
// TAG VALIDATION
//...........................................................................................................
// do ->
//   for name of TYPES
//     continue unless name.match /^is_/
//     do ( name ) ->
//       $[ "validate_#{name}" ] = ( x ) ->
//         return null if TYPES[ name ] x
//         throw new Error "expected a x, got a #{TYPES.type_of x}"

}).call(this);

//# sourceMappingURL=TYPES.js.map
