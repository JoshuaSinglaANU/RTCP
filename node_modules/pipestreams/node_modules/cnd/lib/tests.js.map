{
  "version": 3,
  "file": "tests.js",
  "sourceRoot": "..",
  "sources": [
    "src/tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n############################################################################################################\n# njs_util                  = require 'util'\nnjs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nTRM                       = require './TRM'\nrpr                       = TRM.rpr.bind TRM\nbadge                     = 'CND/test'\nlog                       = TRM.get_logger 'plain',     badge\ninfo                      = TRM.get_logger 'info',      badge\nwhisper                   = TRM.get_logger 'whisper',   badge\nalert                     = TRM.get_logger 'alert',     badge\ndebug                     = TRM.get_logger 'debug',     badge\nwarn                      = TRM.get_logger 'warn',      badge\nhelp                      = TRM.get_logger 'help',      badge\nurge                      = TRM.get_logger 'urge',      badge\npraise                    = TRM.get_logger 'praise',    badge\necho                      = TRM.echo.bind TRM\n#...........................................................................................................\nCND                       = require './main'\ntest                      = require 'guy-test'\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# eq = ( P... ) =>\n#   whisper P\n#   # throw new Error \"not equal: \\n#{( ( rpr p ) for p in P ).join '\\n'}\" unless CND.equals P...\n#   unless CND.equals P...\n#     warn \"not equal: \\n#{( ( rpr p ) for p in P ).join '\\n'}\"\n#     return 1\n#   return 0\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_test = ->\n#   error_count = 0\n#   for name, method of @\n#     continue if name.startsWith '_'\n#     whisper name\n#     try\n#       method()\n#     catch error\n#       # throw error\n#       error_count += +1\n#       warn error[ 'message' ]\n#   help \"tests completed successfully\" if error_count is 0\n#   process.exit error_count\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"test type_of\" ] = ( T ) ->\n  T.eq ( CND.type_of new WeakMap()            ), 'weakmap'\n  T.eq ( CND.type_of new Map()                ), 'map'\n  T.eq ( CND.type_of new Set()                ), 'set'\n  T.eq ( CND.type_of new Date()               ), 'date'\n  T.eq ( CND.type_of new Error()              ), 'error'\n  T.eq ( CND.type_of []                       ), 'list'\n  T.eq ( CND.type_of true                     ), 'boolean'\n  T.eq ( CND.type_of false                    ), 'boolean'\n  T.eq ( CND.type_of ( -> )                   ), 'function'\n  T.eq ( CND.type_of ( -> yield 123 )()       ), 'generator'\n  T.eq ( CND.type_of null                     ), 'null'\n  T.eq ( CND.type_of 'helo'                   ), 'text'\n  T.eq ( CND.type_of undefined                ), 'undefined'\n  T.eq ( CND.type_of arguments                ), 'arguments'\n  T.eq ( CND.type_of global                   ), 'global'\n  T.eq ( CND.type_of /^xxx$/g                 ), 'regex'\n  T.eq ( CND.type_of {}                       ), 'pod'\n  T.eq ( CND.type_of NaN                      ), 'nan'\n  T.eq ( CND.type_of 1 / 0                    ), 'infinity'\n  T.eq ( CND.type_of -1 / 0                   ), 'infinity'\n  T.eq ( CND.type_of 12345                    ), 'number'\n  T.eq ( CND.type_of Buffer.from 'helo'       ), 'buffer'\n  T.eq ( CND.type_of new ArrayBuffer 42       ), 'arraybuffer'\n  #.........................................................................................................\n  T.eq ( CND.type_of new Int8Array         5  ), 'int8array'\n  T.eq ( CND.type_of new Uint8Array        5  ), 'uint8array'\n  T.eq ( CND.type_of new Uint8ClampedArray 5  ), 'uint8clampedarray'\n  T.eq ( CND.type_of new Int16Array        5  ), 'int16array'\n  T.eq ( CND.type_of new Uint16Array       5  ), 'uint16array'\n  T.eq ( CND.type_of new Int32Array        5  ), 'int32array'\n  T.eq ( CND.type_of new Uint32Array       5  ), 'uint32array'\n  T.eq ( CND.type_of new Float32Array      5  ), 'float32array'\n  T.eq ( CND.type_of new Float64Array      5  ), 'float64array'\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"test size_of\" ] = ( T ) ->\n  # debug ( Buffer.from '𣁬', ), ( '𣁬'.codePointAt 0 ).toString 16\n  # debug ( Buffer.from '𡉜', ), ( '𡉜'.codePointAt 0 ).toString 16\n  # debug ( Buffer.from '𠑹', ), ( '𠑹'.codePointAt 0 ).toString 16\n  # debug ( Buffer.from '𠅁', ), ( '𠅁'.codePointAt 0 ).toString 16\n  T.eq ( CND.size_of [ 1, 2, 3, 4, ]                                    ), 4\n  T.eq ( CND.size_of Buffer.from [ 1, 2, 3, 4, ]                         ), 4\n  T.eq ( CND.size_of '𣁬𡉜𠑹𠅁'                                             ), 2 * ( Array.from '𣁬𡉜𠑹𠅁' ).length\n  T.eq ( CND.size_of '𣁬𡉜𠑹𠅁', count: 'codepoints'                        ), ( Array.from '𣁬𡉜𠑹𠅁' ).length\n  T.eq ( CND.size_of '𣁬𡉜𠑹𠅁', count: 'codeunits'                         ), 2 * ( Array.from '𣁬𡉜𠑹𠅁' ).length\n  T.eq ( CND.size_of '𣁬𡉜𠑹𠅁', count: 'bytes'                             ), ( Buffer.from '𣁬𡉜𠑹𠅁', 'utf-8' ).length\n  T.eq ( CND.size_of 'abcdefghijklmnopqrstuvwxyz'                       ), 26\n  T.eq ( CND.size_of 'abcdefghijklmnopqrstuvwxyz', count: 'codepoints'  ), 26\n  T.eq ( CND.size_of 'abcdefghijklmnopqrstuvwxyz', count: 'codeunits'   ), 26\n  T.eq ( CND.size_of 'abcdefghijklmnopqrstuvwxyz', count: 'bytes'       ), 26\n  T.eq ( CND.size_of 'ä'                                                ), 1\n  T.eq ( CND.size_of 'ä', count: 'codepoints'                           ), 1\n  T.eq ( CND.size_of 'ä', count: 'codeunits'                            ), 1\n  T.eq ( CND.size_of 'ä', count: 'bytes'                                ), 2\n  T.eq ( CND.size_of new Map [ [ 'foo', 42, ], [ 'bar', 108, ], ]       ), 2\n  T.eq ( CND.size_of new Set [ 'foo', 42, 'bar', 108, ]                 ), 4\n  T.eq ( CND.size_of { 'foo': 42, 'bar': 108, 'baz': 3, }                           ), 3\n  T.eq ( CND.size_of { '~isa': 'XYZ/yadda', 'foo': 42, 'bar': 108, 'baz': 3, }      ), 4\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"is_subset\" ] = ( T ) ->\n  T.eq false, CND.is_subset ( Array.from 'abcde' ), ( Array.from 'abcd' )\n  T.eq false, CND.is_subset ( Array.from 'abcx'  ), ( Array.from 'abcd' )\n  T.eq false, CND.is_subset ( Array.from 'abcd'  ), ( []                )\n  T.eq true,  CND.is_subset ( Array.from 'abcd'  ), ( Array.from 'abcd' )\n  T.eq true,  CND.is_subset ( Array.from 'abc'   ), ( Array.from 'abcd' )\n  T.eq true,  CND.is_subset ( []                 ), ( Array.from 'abcd' )\n  T.eq true,  CND.is_subset ( []                 ), ( Array.from []     )\n  T.eq false, CND.is_subset ( new Set 'abcde'    ), ( new Set 'abcd'    )\n  T.eq false, CND.is_subset ( new Set 'abcx'     ), ( new Set 'abcd'    )\n  T.eq false, CND.is_subset ( new Set 'abcx'     ), ( new Set()         )\n  T.eq true,  CND.is_subset ( new Set 'abcd'     ), ( new Set 'abcd'    )\n  T.eq true,  CND.is_subset ( new Set 'abc'      ), ( new Set 'abcd'    )\n  T.eq true,  CND.is_subset ( new Set()          ), ( new Set 'abcd'    )\n  T.eq true,  CND.is_subset ( new Set()          ), ( new Set()         )\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"deep_copy\" ] = ( T ) ->\n  ### TAINT set comparison doesn't work ###\n  probes = [\n    [ 'foo', 42, [ 'bar', ( -> 'xxx' ), ], { q: 'Q', s: 'S', }, ]\n    ]\n  # probe   = [ 'foo', 42, [ 'bar', ( -> 'xxx' ), ], ( new Set Array.from 'abc' ), ]\n  # matcher = [ 'foo', 42, [ 'bar', ( -> 'xxx' ), ], ( new Set Array.from 'abc' ), ]\n  for probe in probes\n    result  = CND.deep_copy probe\n    T.eq result, probe\n    T.ok result isnt probe\n  #.........................................................................................................\n  return null\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"logging with timestamps\" ] = ( T, done ) ->\n  my_badge                  = 'BITSNPIECES/test'\n  my_info                   = TRM.get_logger 'info',      badge\n  my_help                   = TRM.get_logger 'help',      badge\n  my_info 'helo'\n  my_help 'world'\n  done()\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"isa-generator\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [ ( -> ),                       no,   no,   'function',           ]\n    [ ( -> yield 42 ),              no,   yes,  'generatorfunction',  ]\n    [ ( -> yield 42 )(),            yes,  no,   'generator',          ]\n    ]\n  jr = JSON.stringify\n  for [ probe, is_gen, is_genf, type, ] in probes_and_matchers\n    result_is_gen  = CND.isa_generator           probe\n    result_is_genf = CND.isa_generator_function  probe\n    # debug jr [ probe, result_is_gen, result_is_genf, ]\n    # debug ( CND.isa_function probe ), probe.constructor.name\n    T.eq result_is_gen,  is_gen\n    T.eq result_is_genf, is_genf\n    T.eq ( CND.type_of probe ), type\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"path methods\" ] = ( T, done ) ->\n  T.eq ( CND.here_abspath  '/foo/bar', '/baz/coo'       ), '/baz/coo'\n  T.eq ( CND.cwd_abspath   '/foo/bar', '/baz/coo'       ), '/baz/coo'\n  T.eq ( CND.here_abspath  '/baz/coo'                   ), '/baz/coo'\n  T.eq ( CND.cwd_abspath   '/baz/coo'                   ), '/baz/coo'\n  T.eq ( CND.here_abspath  '/foo/bar', 'baz/coo'        ), '/foo/bar/baz/coo'\n  T.eq ( CND.cwd_abspath   '/foo/bar', 'baz/coo'        ), '/foo/bar/baz/coo'\n  # T.eq ( CND.here_abspath  'baz/coo'                    ), '/....../cnd/baz/coo'\n  # T.eq ( CND.cwd_abspath   'baz/coo'                    ), '/....../cnd/baz/coo'\n  # T.eq ( CND.here_abspath  __dirname, 'baz/coo', 'x.js' ), '/....../cnd/lib/baz/coo/x.js'\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"format_number\" ] = ( T, done ) ->\n  T.eq ( CND.format_number 42         ), '42'\n  T.eq ( CND.format_number 42000      ), '42,000'\n  T.eq ( CND.format_number 42000.1234 ), '42,000.123'\n  T.eq ( CND.format_number 42.1234e6  ), '42,123,400'\n  done()\n\n\n\n\n\n\n\n############################################################################################################\nunless module.parent?\n  test @, 'timeout': 2500\n  # test @[ \"path methods\" ]\n  # test @[ \"format_number\" ]\n\n  # require './exception-handler'\n  # require './exception-handler'\n  # require './exception-handler'\n  # require './exception-handler'\n  # require './exception-handler'\n  # xxx\n\n\n\n"
  ]
}