{
  "version": 3,
  "file": "basics.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/basics.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\n# njs_util                  = require 'util'\nnjs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr.bind CND\nbadge                     = 'MULTIMIX/TESTS/BASICS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\npraise                    = CND.get_logger 'praise',    badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\n\n\n# #===========================================================================================================\n# # OBJECT PROPERTY CATALOGUING\n# #-----------------------------------------------------------------------------------------------------------\n# provide_cataloguing = ->\n#   @keys_of              = ( P... ) -> @values_of @walk_keys_of      P...\n#   @all_keys_of          = ( P... ) -> @values_of @walk_all_keys_of  P...\n#   @all_own_keys_of      = ( x    ) -> if x? then Object.getOwnPropertyNames x else []\n#   @walk_all_own_keys_of = ( x    ) -> yield k for k in @all_own_keys_of x\n\n#   #-----------------------------------------------------------------------------------------------------------\n#   @walk_keys_of = ( x, settings ) ->\n#     defaults = { skip_undefined: true, }\n#     settings = if settings? then ( assign {}, settings, defaults ) else defaults\n#     for k of x\n#       ### TAINT should use property descriptors to avoid possible side effects ###\n#       continue if ( x[ k ] is undefined ) and settings.skip_undefined\n#       yield k\n\n#   #-----------------------------------------------------------------------------------------------------------\n#   @walk_all_keys_of = ( x, settings ) ->\n#     defaults = { skip_object: true, skip_undefined: true, }\n#     settings = { defaults..., settings..., }\n#     return @_walk_all_keys_of x, new Set(), settings\n\n#   #-----------------------------------------------------------------------------------------------------------\n#   @_walk_all_keys_of = ( x, seen, settings ) ->\n#     if ( not settings.skip_object ) and x is Object::\n#       yield return\n#     #.........................................................................................................\n#     for k from @walk_all_own_keys_of x\n#       continue if seen.has k\n#       seen.add k\n#       ### TAINT should use property descriptors to avoid possible side effects ###\n#       ### TAINT trying to access `arguments` causes error ###\n#       try value = x[ k ] catch error then continue\n#       continue if ( value is undefined ) and settings.skip_undefined\n#       if settings.symbol?\n#         continue unless value?\n#         continue unless value[ settings.symbol ]\n#       yield [ x, k, ]\n#     #.........................................................................................................\n#     if ( proto = Object.getPrototypeOf x )?\n#       yield from @_walk_all_keys_of proto, seen, settings\n# provide_cataloguing.apply C = {}\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"classes with MultiMix\" ] = ( T, done ) ->\n  Multimix                  = require '../..'\n  #.........................................................................................................\n  class A\n    method1: ( x ) -> x + 2\n    method2: ( x ) -> ( @method1 x ) * 2\n  a = new A()\n  T.eq ( a.method1 100 ), 102\n  T.eq ( a.method2 100 ), 204\n  #.........................................................................................................\n  class B extends Multimix\n    method1: ( x ) -> x + 2\n    method2: ( x ) -> ( @method1 x ) * 2\n  b = new B()\n  T.eq ( b.method1 100 ), 102\n  T.eq ( b.method2 100 ), 204\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"multimix.export()\" ] = ( T, done ) ->\n  Multimix                  = require '../..'\n  types                     = new ( require 'intertype' ).Intertype()\n  #.........................................................................................................\n  class A extends Multimix\n    constructor: -> super(); @name = 'class A'\n    identify_1: -> @name\n  #.........................................................................................................\n  class B extends A\n    constructor: -> super(); @name = 'class B'\n    identify_2: -> @name\n  #.........................................................................................................\n  a = new A()\n  b = new B()\n  #.........................................................................................................\n  { identify_1\n    identify_2 } = a.export()\n  T.eq identify_1(), 'class A'\n  T.eq identify_2,   undefined\n  #.........................................................................................................\n  { identify_1\n    identify_2 } = b.export()\n  T.eq identify_1(), 'class B'\n  T.eq identify_2(), 'class B'\n  #.........................................................................................................\n  done()\n\n\n\n\n"
  ]
}