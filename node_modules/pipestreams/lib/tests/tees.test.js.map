{
  "version": 3,
  "file": "tees.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/tees.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPESTREAMS/TESTS/TEE'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nOS                        = require 'os'\ntest                      = require 'guy-test'\n#...........................................................................................................\nPS                        = require '../..'\n{ $, $async, }            = PS.export()\n#...........................................................................................................\nread                      = ( path ) -> FS.readFileSync path, { encoding: 'utf-8', }\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"tee and stop events\" ] = ( T, done ) ->\n#   sink_0_path       = '/tmp/pipestreams-test-tee-0.txt'\n#   sink_1_path       = '/tmp/pipestreams-test-tee-1.txt'\n#   sink_2_path       = '/tmp/pipestreams-test-tee-2.txt'\n#   #.........................................................................................................\n#   sink_0_finished   = false\n#   sink_1_finished   = false\n#   sink_2_finished   = false\n#   #.........................................................................................................\n#   sink_0 = PS.write_to_file sink_0_path, ( error ) =>\n#     throw error if error\n#     sink_0_finished = true\n#     finish()\n#   #.........................................................................................................\n#   sink_1 = PS.write_to_file sink_1_path, ( error ) =>\n#     throw error if error\n#     sink_1_finished = true\n#     finish()\n#   #.........................................................................................................\n#   sink_2 = PS.write_to_file sink_2_path, ( error ) =>\n#     throw error if error\n#     sink_2_finished = true\n#     finish()\n#   #.........................................................................................................\n#   $link       = ( linker )  -> PS.$map    ( value  ) -> ( JSON.stringify value ) + linker\n#   $keep_odd   =             -> PS.$filter ( number ) -> number % 2 isnt 0\n#   $keep_even  =             -> PS.$filter ( number ) -> number % 2 is   0\n#   #.........................................................................................................\n#   finish = ->\n#     if sink_0_finished then help \"sink_0 finished\" else warn \"waiting for sink_0\"\n#     if sink_1_finished then help \"sink_1 finished\" else warn \"waiting for sink_1\"\n#     if sink_2_finished then help \"sink_2 finished\" else warn \"waiting for sink_2\"\n#     whisper '----------------------'\n#     return unless sink_0_finished and sink_1_finished and sink_2_finished\n#     T.ok CND.equals ( read sink_0_path ), '0-1-2-3-4-5-6-7-8-9-10-11-12-13-14-15-16-17-18-19-20-'\n#     T.ok CND.equals ( read sink_1_path ), '1*3*5*7*9*11*13*15*17*19*'\n#     T.ok CND.equals ( read sink_2_path ), '0+2+4+6+8+10+12+14+16+18+20+'\n#     done()\n#   #.........................................................................................................\n#   pipeline_1  = []\n#   pipeline_1.push $keep_odd()\n#   pipeline_1.push $link '*'\n#   pipeline_1.push sink_1\n#   stream_1 = PS.pull pipeline_1...\n#   #.........................................................................................................\n#   pipeline_2  = []\n#   pipeline_2.push $keep_even()\n#   pipeline_2.push $link '+'\n#   pipeline_2.push sink_2\n#   stream_2 = PS.pull pipeline_2...\n#   #.........................................................................................................\n#   pipeline_0  = []\n#   pipeline_0.push PS.new_value_source ( n for n in [ 0 .. 20 ] )\n#   pipeline_0.push PS.$tee stream_1\n#   pipeline_0.push PS.$tee stream_2\n#   pipeline_0.push $link '-'\n#   pipeline_0.push sink_0\n#   #.........................................................................................................\n#   stream_0 = PS.pull pipeline_0...\n#   # PS.pull pipeline_1...\n#   #.........................................................................................................\n#   return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"tee and stop events, 'collective' API\" ] = ( T, done ) ->\n  wait_count        = 3\n  #.........................................................................................................\n  sink_0_path       = '/tmp/pipestreams-test-tee-0.txt'\n  sink_1_path       = '/tmp/pipestreams-test-tee-1.txt'\n  sink_2_path       = '/tmp/pipestreams-test-tee-2.txt'\n  #.........................................................................................................\n  sink_0            = PS.write_to_file sink_0_path, ( error ) ->\n    throw error if error?\n    file_contents = read sink_0_path\n    debug '77783-1', rpr file_contents\n    T.ok CND.equals file_contents, '0-1-2-3-4-5-6-7-8-9-10-11-12-13-14-15-16-17-18-19-20-'\n    wait_count += -1\n    done() if wait_count <= 0\n  #.........................................................................................................\n  sink_1            = PS.write_to_file sink_1_path, ( error ) ->\n    throw error if error?\n    file_contents = read sink_1_path\n    debug '77783-2', rpr file_contents\n    T.ok CND.equals file_contents, '1*3*5*7*9*11*13*15*17*19*'\n    wait_count += -1\n    done() if wait_count <= 0\n  #.........................................................................................................\n  sink_2            = PS.write_to_file sink_2_path, ( error ) ->\n    throw error if error?\n    file_contents = read sink_2_path\n    debug '77783-3', rpr file_contents\n    T.ok CND.equals file_contents, '0+2+4+6+8+10+12+14+16+18+20+'\n    wait_count += -1\n    done() if wait_count <= 0\n  #.........................................................................................................\n  $link       = ( linker )  -> PS.$map    ( value  ) -> ( JSON.stringify value ) + linker\n  $keep_odd   =             -> PS.$filter ( number ) -> number % 2 isnt 0\n  $keep_even  =             -> PS.$filter ( number ) -> number % 2 is   0\n  #.........................................................................................................\n  pipeline_1  = []\n  pipeline_1.push $keep_odd()\n  pipeline_1.push $link '*'\n  pipeline_1.push sink_1\n  stream_1 = PS.pull pipeline_1...\n  #.........................................................................................................\n  pipeline_2  = []\n  pipeline_2.push $keep_even()\n  pipeline_2.push $link '+'\n  pipeline_2.push sink_2\n  stream_2 = PS.pull pipeline_2...\n  #.........................................................................................................\n  pipeline_0  = []\n  pipeline_0.push PS.new_value_source ( n for n in [ 0 .. 20 ] )\n  pipeline_0.push PS.$tee stream_1\n  pipeline_0.push PS.$tee stream_2\n  pipeline_0.push $link '-'\n  pipeline_0.push sink_0\n  #.........................................................................................................\n  PS.pull pipeline_0...\n  return null\n\n############################################################################################################\nunless module.parent?\n  test @\n\n"
  ]
}