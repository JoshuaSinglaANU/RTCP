{
  "version": 3,
  "file": "sort.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/sort.test.coffee"
  ],
  "names": [],
  "mappings": ";AACA;EAAA;AAAA,MAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,EAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;IAAA,oBAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd;;EAC5B,CAAA,CAAE,QAAF,EACE,IADF,EAEE,MAFF,EAGE,EAHF,CAAA,GAG4B,GAH5B,EAfA;;;EAoBA,IAAA,GAA4B,OAAA,CAAQ,UAAR,EApB5B;;;EAsBA,EAAA,GAA4B,OAAA,CAAQ,OAAR;;EAC5B,CAAA,CAAE,CAAF,EAAK,MAAL,CAAA,GAA4B,EAAE,CAAC,MAAH,CAAA,CAA5B,EAvBA;;;EA0BA,IAAC,CAAA,MAAD,GAAU,QAAA,CAAA,CAAA;AACV,QAAA,IAAA,EAAA,GAAA,EAAA;AAAE;IAAA,KAAA,WAAA;;MACE,IAAY,IAAI,CAAC,UAAL,CAAgB,GAAhB,CAAZ;AAAA,iBAAA;;MACA,iBAAgC,SAAR,SAAxB;QAAA,OAAO,IAAC,CAAE,IAAF,EAAR;;IAFF;AAGA,WAAO;EAJC,EA1BV;;;EAiCA,IAAC,CAAA,KAAD,GAAS,QAAA,CAAA,CAAA;WACP,IAAA,CAAK,IAAL,EAAQ;MAAA,SAAA,EAAW;IAAX,CAAR;EADO,EAjCT;;;EAsCA,IAAA,GAAO,QAAA,CAAE,MAAF,CAAA,EAAA;;AAEL,WAAO,IAAI,OAAJ,CAAY,CAAE,OAAF,EAAW,MAAX,CAAA,GAAA;AACrB,UAAA;MAAI,QAAA,GAAY;MACZ,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,gBAAH,CAAoB,MAApB,CAAd;MACA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,KAAH,CAAA,CAAd,EAFJ;;MAII,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,QAAH,CAAA,CAAd;MACA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,MAAH,CAAU,QAAA,CAAE,MAAF,CAAA;eAAc,OAAA,CAAQ,MAAR;MAAd,CAAV,CAAd;MACA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,MAAH,CAAA,CAAd;MACA,EAAE,CAAC,IAAH,CAAQ,GAAA,QAAR;AACA,aAAO;IATU,CAAZ;EAFF,EAtCP;;;EAoDA,IAAC,CAAE,QAAF,CAAD,GAAgB,MAAA,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAChB,QAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA,mBAAA,EAAA,MAAA,EAAA,MAAA;;IACE,mBAAA,GAAsB,CACpB,CAAE,CAAE,CAAF,EAAK,CAAL,EAAQ,EAAR,EAAY,CAAZ,EAAe,CAAf,CAAF,EAAsB,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,EAAd,CAAtB,CADoB,EAEpB,CAAE,CAAE,GAAF,EAAO,GAAP,EAAY,KAAZ,CAAF,EAAuB,CAAE,GAAF,EAAO,KAAP,EAAc,GAAd,CAAvB,CAFoB;IAItB,KAAA,GAAY,mBAAmB,CAAC;IAChC,MAAA,GAAY,EAAE,CAAC,eAAH,CAAA,EANd;;IAQE,KAAA,qDAAA;MAAI,CAAE,KAAF,EAAS,OAAT;MACF,MAAA,GAAS,CAAA,MAAM,IAAA,CAAK,KAAL,CAAN;MACT,IAAA,CAAK,GAAG,CAAC,IAAJ,CAAS,EAAA,CAAG,CAAE,KAAF,EAAS,MAAT,CAAH,CAAT,CAAL;IAFF;IAGA,IAAA,CAAA;AACA,WAAO;EAbO,EApDhB;;;EAoEA,IAAC,CAAE,QAAF,CAAD,GAAgB,MAAA,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAChB,QAAA,KAAA,EAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,OAAA,EAAA,OAAA,EAAA,KAAA,EAAA,mBAAA,EAAA,KAAA,EAAA,MAAA,EAAA,MAAA;;IACE,mBAAA,GAAsB,CACpB,CAAC,CAAC,CAAD,EAAG,CAAH,EAAK,EAAL,EAAQ,CAAR,EAAU,CAAV,EAAY,IAAZ,CAAD,EAAmB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,EAAT,CAAnB,EAAgC,IAAhC,CADoB,EAEpB,CAAC,CAAC,CAAD,EAAG,CAAH,EAAK,EAAL,EAAQ,CAAR,EAAU,CAAV,EAAY,IAAZ,CAAD,EAAmB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,EAAT,CAAnB,EAAgC,IAAhC,CAFoB,EAGpB,CAAC,CAAC,CAAD,EAAG,CAAH,EAAK,EAAL,EAAQ,MAAR,EAAe,CAAf,EAAiB,CAAjB,EAAmB,IAAnB,CAAD,EAA0B,IAA1B,EAA+B,sCAA/B,CAHoB,EAIpB,CAAC,CAAC,GAAD,EAAK,CAAL,EAAO,GAAP,EAAW,KAAX,CAAD,EAAmB,IAAnB,EAAwB,sCAAxB,CAJoB;IAMtB,KAAA,GAAY,mBAAmB,CAAC;IAChC,MAAA,GAAY,EAAE,CAAC,eAAH,CAAA,EARd;;IAUE,KAAA,qDAAA;MAAI,CAAE,KAAF,EAAS,OAAT,EAAkB,OAAlB;MACF,KAAA,GAAW,eAAH,GAAmB,IAAI,MAAJ,CAAW,OAAX,CAAnB,GAA6C;AACrD;QACE,MAAA,GAAS,CAAA,MAAM,IAAA,CAAK,KAAL,CAAN,EADX;OAEA,cAAA;QAAM;QACJ,IAAG,eAAA,IAAW,CAAE,KAAK,CAAC,IAAN,CAAW,KAAK,CAAC,OAAjB,CAAF,CAAd;UACE,IAAA,CAAK,GAAG,CAAC,KAAJ,CAAU,EAAA,CAAG,CAAE,KAAF,EAAS,IAAT,EAAe,OAAf,CAAH,CAAV,CAAL;UACA,CAAC,CAAC,EAAF,CAAK,IAAL,EAFF;SAAA,MAAA;UAIE,IAAA,CAAK,GAAG,CAAC,GAAJ,CAAQ,EAAA,CAAG,CAAE,KAAF,EAAS,IAAT,EAAe,KAAK,CAAC,OAArB,CAAH,CAAR,CAAL,EAJF;;AAKA,iBANF;;MAOA,IAAA,CAAK,GAAG,CAAC,IAAJ,CAAS,EAAA,CAAG,CAAE,KAAF,EAAS,MAAT,EAAiB,IAAjB,CAAH,CAAT,CAAL;IAXF;IAYA,IAAA,CAAA;AACA,WAAO;EAxBO,EApEhB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAyIA,IAAO,qBAAP;;;IAGE,IAAC,CAAA,KAAD,CAAA,EAHF;;AAzIA",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPESTREAMS/TESTS/SORT'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n{ is_empty\n  copy\n  assign\n  jr }                    = CND\n#...........................................................................................................\ntest                      = require 'guy-test'\n#...........................................................................................................\nPS                        = require '../..'\n{ $, $async, }            = PS.export()\n\n#-----------------------------------------------------------------------------------------------------------\n@_prune = ->\n  for name, value of @\n    continue if name.startsWith '_'\n    delete @[ name ] unless name in include\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_main = ->\n  test @, 'timeout': 30000\n\n\n#-----------------------------------------------------------------------------------------------------------\nsort = ( values ) ->\n  ### TAINT should handle errors (?) ###\n  return new Promise ( resolve, reject ) =>\n    pipeline  = []\n    pipeline.push PS.new_value_source values\n    pipeline.push PS.$sort()\n    # pipeline.push PS.$show()\n    pipeline.push PS.$collect()\n    pipeline.push PS.$watch ( result ) -> resolve result\n    pipeline.push PS.$drain()\n    PS.pull pipeline...\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"sort 1\" ] = ( T, done ) ->\n  # debug jr ( key for key of PS ).sort(); xxx\n  probes_and_matchers = [\n    [ [ 4, 9, 10, 3, 2 ], [ 2, 3, 4, 9, 10 ] ]\n    [ [ 'a', 'z', 'foo' ], [ 'a', 'foo', 'z' ] ]\n    ]\n  count     = probes_and_matchers.length\n  source    = PS.new_push_source()\n  #.........................................................................................................\n  for [ probe, matcher, ] in probes_and_matchers\n    result = await sort probe\n    echo CND.gold jr [ probe, result, ]\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"sort 2\" ] = ( T, done ) ->\n  # debug jr ( key for key of PS ).sort(); xxx\n  probes_and_matchers = [\n    [[4,9,10,3,2,null],[2,3,4,9,10],null]\n    [[4,9,10,3,2,null],[2,3,4,9,10],null]\n    [[4,9,10,\"frob\",3,2,null],null,\"unable to compare a text to a number\"]\n    [[\"a\",1,\"z\",\"foo\"],null,\"unable to compare a number to a text\"]\n    ]\n  count     = probes_and_matchers.length\n  source    = PS.new_push_source()\n  #.........................................................................................................\n  for [ probe, matcher, pattern, ] in probes_and_matchers\n    regex = if pattern? then ( new RegExp pattern ) else null\n    try\n      result = await sort probe\n    catch error\n      if regex? and ( regex.test error.message )\n        echo CND.green jr [ probe, null, pattern, ]\n        T.ok true\n      else\n        echo CND.red jr [ probe, null, error.message, ]\n      continue\n    echo CND.gold jr [ probe, result, null, ]\n  done()\n  return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"sort 2\" ] = ( T, done ) ->\n#   # debug jr ( key for key of PS ).sort(); xxx\n#   probes_and_matchers = [\n#     [[4,9,10,3,2]]\n#     [['a', 'z', 'foo',]]\n#     [['a', 'z', 'foo',33],null]\n#     ]\n#   count = probes_and_matchers.length\n#   for [ probe, matcher, ] in probes_and_matchers\n#     do ( probe, matcher ) ->\n#       pipeline = []\n#       pipeline.push PS.new_value_source probe\n#       pipeline.push PS.$sort()\n#       pipeline.push PS.$collect()\n#       pipeline.push PS.$show()\n#       #.....................................................................................................\n#       pipeline.push $ { last: null, }, ( result, send ) ->\n#         if result?\n#           echo CND.gold jr [ probe, result, ]\n#           count += -1\n#         else\n#           if count != 0\n#             T.fail \"expected count to be zero, is #{count}\"\n#           done()\n#         send result\n#       #.....................................................................................................\n#       pipeline.push PS.$drain()\n#       #.....................................................................................................\n#       try\n#         PS.pull pipeline...\n#       catch error\n#         count += -1\n#         if matcher is null\n#           echo CND.green jr [ probe, null, ]\n#           T.succeed \"error expected\"\n#         else\n#           echo CND.red jr [ probe, null, ]\n#           T.fail error.message\n#         done() if count <= 0\n#   return null\n\n############################################################################################################\nunless module.parent?\n  # include = []\n  # @_prune()\n  @_main()\n"
  ]
}