{
  "version": 3,
  "file": "circular-pipelines.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/circular-pipelines.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'GENERATOR-AS-SOURCE'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\n#...........................................................................................................\nPS                        = require '../..'\n{ $, $async, }            = PS.export()\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"circular pipeline 1\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [[true,3,4],[3,4,10,2,5,1,16,8,4,2,1],null]\n    [[false,3,4],[3,4,10,2,5,1,16,8,4,2,1],null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      #.....................................................................................................\n      [ use_defer, values..., ] = probe\n      refillable                = [ values..., ]\n      mainsource                = PS.new_refillable_source refillable, { repeat: 2, show: true, }\n      collector                 = []\n      mainline                  = []\n      mainline.push mainsource\n      mainline.push PS.$defer() if use_defer\n      mainline.push $ ( d, send ) ->\n        if d > 1\n          if d %% 2 is 0 then refillable.push d / 2\n          else                refillable.push d * 3 + 1\n        send d\n      mainline.push PS.$collect { collector, }\n      mainline.push PS.$drain ->\n        help collector\n        resolve collector\n      PS.pull mainline...\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"circular pipeline 2\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [[true,3,4],[3,4,10,2,5,1,],null]\n    [[false,3,4],[3,4,10,2,5,1,],null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      #.....................................................................................................\n      [ use_defer, values..., ] = probe\n      buffer                    = [ values..., ]\n      mainsource                = PS.new_refillable_source buffer, { repeat: 1, }\n      collector                 = []\n      mainline                  = []\n      mainline.push mainsource\n      mainline.push PS.$defer() if use_defer\n      mainline.push $ ( d, send ) ->\n        return send.end() if d is 16\n        if d > 1\n          if d %% 2 is 0 then buffer.push d / 2\n          else                buffer.push d * 3 + 1\n        send d\n      mainline.push PS.$collect { collector, }\n      mainline.push PS.$drain ->\n        help collector\n        resolve collector\n      PS.pull mainline...\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"circular pipeline 3\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [[true,3,4],[3,4,10,2,5,1,],null]\n    [[false,3,4],[3,4,10,2,5,1,],null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      #.....................................................................................................\n      [ use_defer, values..., ] = probe\n      buffer                    = [ values..., ]\n      mainsource                = PS.new_refillable_source buffer, { repeat: 1, }\n      collector                 = []\n      mainline                  = []\n      mainline.push mainsource\n      mainline.push PS.$defer() if use_defer\n      mainline.push PS.$continue_if ( d ) -> d isnt 16\n      mainline.push $ ( d, send ) ->\n        if d > 1\n          if d %% 2 is 0 then buffer.push d / 2\n          else                buffer.push d * 3 + 1\n        send d\n      mainline.push PS.$collect { collector, }\n      mainline.push PS.$drain ->\n        help collector\n        resolve collector\n      PS.pull mainline...\n  #.........................................................................................................\n  done()\n  return null\n\n\n\n############################################################################################################\nunless module.parent?\n  test @\n  # test @[ \"circular pipeline 1\" ]\n  # test @[ \"circular pipeline 2\" ]\n  # test @[ \"generator as source 2\" ]\n\n\n"
  ]
}