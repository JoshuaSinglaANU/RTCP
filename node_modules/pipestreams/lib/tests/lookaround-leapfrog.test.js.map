{
  "version": 3,
  "file": "lookaround-leapfrog.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/lookaround-leapfrog.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPESTREAMS/TESTS/WYE'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nOS                        = require 'os'\ntest                      = require 'guy-test'\n#...........................................................................................................\nPS                        = require '../..'\n{ $, $async, }            = PS.export()\n#...........................................................................................................\n{ jr\n  is_empty }              = CND\ndefer                     = setImmediate\n{ inspect, }              = require 'util'\nxrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"1 leapfrog lookaround with groups\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [ [ [ 1 .. 12 ], ( ( d ) -> ( d % 3 ) isnt 0 ), ], [1,2,4,5,[null,3,6],7,8,[3,6,9],10,11,[6,9,12],[9,12,null]],                           null, ]\n    [ [ [ 1 .. 12 ], ( ( d ) -> ( d % 3 ) is   0 ), ], [[null,1,2],3,[1,2,4],[2,4,5],6,[4,5,7],[5,7,8],9,[7,8,10],[8,10,11],12,[10,11,null]], null, ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    #.......................................................................................................\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ values\n        tester ]  = probe\n      collector   = []\n      pipeline    = []\n      pipeline.push PS.new_value_source values\n      pipeline.push PS.leapfrog tester, PS.lookaround $ ( d3, send ) ->\n        [ prv, d, nxt, ]  = d3\n        send d3\n      pipeline.push PS.$collect { collector, }\n      pipeline.push PS.$drain -> resolve collector\n      PS.pull pipeline...\n      #.....................................................................................................\n      return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"1 leapfrog lookaround with groups 2\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [ [ [ 1 .. 12 ], ( ( d ) -> ( d % 3 ) isnt 0 ), ], [1,2,4,5,[null,3,6],7,8,[3,6,9],10,11,[6,9,12],[9,12,null]],                           null, ]\n    [ [ [ 1 .. 12 ], ( ( d ) -> ( d % 3 ) is   0 ), ], [[null,1,2],3,[1,2,4],[2,4,5],6,[4,5,7],[5,7,8],9,[7,8,10],[8,10,11],12,[10,11,null]], null, ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    #.......................................................................................................\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ values\n        tester ]  = probe\n      collector   = []\n      pipeline    = []\n      pipeline.push PS.new_value_source values\n      # pipeline.push PS.$show { title: 'µ33421-1', }\n      # pipeline.push PS.leapfrog tester, PS.lookaround $ ( d3, send ) ->\n      pipeline.push PS.lookaround { leapfrog: tester, }, $ ( d3, send ) ->\n        # debug 'µ43443', jr d3\n        [ prv, d, nxt, ] = d3\n        send d3\n      # pipeline.push PS.$show { title: 'µ33421-2', }\n      pipeline.push PS.$collect { collector, }\n      pipeline.push PS.$drain -> resolve collector\n      PS.pull pipeline...\n      #.....................................................................................................\n      return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT ordering not preserved ###\n@[ \"_____________ 2 leapfrog lookaround ungrouped\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [ [ [ 1 .. 12 ], ( ( d ) -> ( d % 3 ) isnt 0 ), ], [ 1 .. 12 ], null, ]\n    [ [ [ 1 .. 12 ], ( ( d ) -> ( d % 3 ) is   0 ), ], [ 1 .. 12 ], null, ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    #.......................................................................................................\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ values\n        tester ]  = probe\n      collector   = []\n      pipeline    = []\n      pipeline.push PS.new_value_source values\n      pipeline.push PS.leapfrog tester, PS.lookaround $ ( d3, send ) ->\n        help 'µ44333', jr d3\n        [ prv, d, nxt, ]  = d3\n        send d\n      pipeline.push PS.$show()\n      pipeline.push PS.$collect { collector, }\n      pipeline.push PS.$drain -> resolve collector\n      PS.pull pipeline...\n      #.....................................................................................................\n      return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"3 lookaround\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [ [ [ 1 .. 12 ], ( ( d ) -> ( d % 3 ) isnt 0 ), ], [ 1 .. 12 ], null, ]\n    [ [ [ 1 .. 12 ], ( ( d ) -> ( d % 3 ) is   0 ), ], [ 1 .. 12 ], null, ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    #.......................................................................................................\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ values\n        tester ]  = probe\n      collector   = []\n      pipeline    = []\n      pipeline.push PS.new_value_source values\n      pipeline.push PS.lookaround $ ( d3, send ) ->\n        [ prv, d, nxt, ]  = d3\n        send d\n      pipeline.push PS.$collect { collector, }\n      pipeline.push PS.$drain -> resolve collector\n      PS.pull pipeline...\n      #.....................................................................................................\n      return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"4 leapfrog\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [ [ [ 1 .. 12 ], ( ( d ) -> ( d % 3 ) isnt 0 ), ], [1,2,300,4,5,600,7,8,900,10,11,1200],         null, ]\n    [ [ [ 1 .. 12 ], ( ( d ) -> ( d % 3 ) is   0 ), ], [100,200,3,400,500,6,700,800,9,1000,1100,12], null, ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    #.......................................................................................................\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ values\n        tester ]  = probe\n      collector   = []\n      pipeline    = []\n      pipeline.push PS.new_value_source values\n      pipeline.push PS.leapfrog tester, $ ( d, send ) -> send d * 100\n      pipeline.push PS.$collect { collector, }\n      pipeline.push PS.$drain -> resolve collector\n      PS.pull pipeline...\n      #.....................................................................................................\n      return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT ordering not preserved ###\n@[ \"_____________ 5 leapfrog window ungrouped\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [ [ [ 1 .. 12 ], ( ( d ) -> ( d % 3 ) isnt 0 ), ], [ 1 .. 12 ], null, ]\n    [ [ [ 1 .. 12 ], ( ( d ) -> ( d % 3 ) is   0 ), ], [ 1 .. 12 ], null, ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    #.......................................................................................................\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ values\n        tester ]  = probe\n      collector   = []\n      pipeline    = []\n      pipeline.push PS.new_value_source values\n      pipeline.push PS.leapfrog tester, PS.window $ ( d3, send ) ->\n        help 'µ44333', jr d3\n        [ prv, d, nxt, ]  = d3\n        send d\n      pipeline.push PS.$show()\n      pipeline.push PS.$collect { collector, }\n      pipeline.push PS.$drain -> resolve collector\n      PS.pull pipeline...\n      #.....................................................................................................\n      return null\n  #.........................................................................................................\n  done()\n  return null\n\n\n############################################################################################################\nunless module.parent?\n  # test @\n  # test @[ \"1 leapfrog lookaround with groups\" ]\n  test @[ \"1 leapfrog lookaround with groups 2\" ]\n  # test @[ \"2 leapfrog lookaround ungrouped\" ]\n  # test @[ \"3 lookaround\" ]\n  # test @[ \"4 leapfrog\" ]\n  # test @[ \"5 leapfrog window ungrouped\" ]\n"
  ]
}