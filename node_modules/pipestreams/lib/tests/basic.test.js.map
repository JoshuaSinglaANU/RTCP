{
  "version": 3,
  "file": "basic.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/basic.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPESTREAMS/TESTS/BASIC'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nOS                        = require 'os'\ntest                      = require 'guy-test'\n#...........................................................................................................\nPS                        = require '../..'\n{ $, $async, }            = PS.export()\n#...........................................................................................................\npull                      = require 'pull-stream'\n$take                     = require 'pull-stream/throughs/take'\n$values                   = require 'pull-stream/sources/values'\n$pull_drain               = require 'pull-stream/sinks/drain'\npull_through              = require 'pull-through'\n#...........................................................................................................\nread                      = ( path ) -> FS.readFileSync path, { encoding: 'utf-8', }\ndefer                     = setImmediate\n{ inspect, }              = require 'util'\nxrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\n\n#-----------------------------------------------------------------------------------------------------------\n@_prune = ->\n  for name, value of @\n    continue if name.startsWith '_'\n    delete @[ name ] unless name in include\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_main = ->\n  test @, 'timeout': 30000\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"test line assembler\" ] = ( T, done ) ->\n#   text = \"\"\"\n#   \"　2. 纯；专：专～。～心～意。\"\n#   !\"　3. 全；满：～生。～地水。\"\n#   \"　4. 相同：～样。颜色不～。\"\n#   \"　5. 另外!的：蟋蟀～名促织。!\"\n#   \"　6. 表示动作短暂，或是一次，或具试探性：算～算。试～试。\"!\n#   \"　7. 乃；竞：～至于此。\"\n#   \"\"\"\n#   # text = \"abc\\ndefg\\nhijk\"\n#   chunks    = text.split '!'\n#   text      = text.replace /!/g, ''\n#   collector = []\n#   assembler = PS._new_line_assembler { extra: true, splitter: '\\n', }, ( error, line ) ->\n#     throw error if error?\n#     if line?\n#       collector.push line\n#       info rpr line\n#     else\n#       # urge rpr text\n#       # help rpr collector.join '\\n'\n#       # debug collector\n#       if CND.equals text, collector.join '\\n'\n#         T.succeed \"texts are equal\"\n#       done()\n#   for chunk in chunks\n#     assembler chunk\n#   assembler null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"test throughput (1)\" ] = ( T, done ) ->\n#   # input   = @new_stream PATH.resolve __dirname, '../test-data/guoxuedashi-excerpts-short.txt'\n#   input   = PS.new_stream PATH.resolve __dirname, '../../test-data/Unicode-NamesList-tiny.txt'\n#   output  = FS.createWriteStream '/tmp/output.txt'\n#   lines   = []\n#   input\n#     .pipe PS.$split()\n#     # .pipe PS.$show()\n#     .pipe PS.$succeed()\n#     .pipe PS.$as_line()\n#     .pipe $ ( line, send ) ->\n#       lines.push line\n#       send line\n#     .pipe output\n#   ### TAINT use PipeStreams method ###\n#   input.on 'end', -> outpudone()\n#   output.on 'close', ->\n#     # if CND.equals lines.join '\\n'\n#     T.succeed \"assuming equality\"\n#     done()\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"test throughput (2)\" ] = ( T, done ) ->\n#   # input   = @new_stream PATH.resolve __dirname, '../test-data/guoxuedashi-excerpts-short.txt'\n#   input   = PS.new_stream PATH.resolve __dirname, '../../test-data/Unicode-NamesList-tiny.txt'\n#   output  = FS.createWriteStream '/tmp/output.txt'\n#   lines   = []\n#   p       = input\n#   p       = p.pipe PS.$split()\n#   # p       = p.pipe PS.$show()\n#   p       = p.pipe PS.$succeed()\n#   p       = p.pipe PS.$as_line()\n#   p       = p.pipe $ ( line, send ) ->\n#       lines.push line\n#       send line\n#   p       = p.pipe output\n#   ### TAINT use PipeStreams method ###\n#   input.on 'end', -> outpudone()\n#   output.on 'close', ->\n#     # if CND.equals lines.join '\\n'\n#     # debug '12001', lines\n#     T.succeed \"assuming equality\"\n#     done()\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"read with pipestreams\" ] = ( T, done ) ->\n#   matcher       = [\n#     '01 ; charset=UTF-8',\n#     '02 @@@\\tThe Unicode Standard 9.0.0',\n#     '03 @@@+\\tU90M160615.lst',\n#     '04 \\tUnicode 9.0.0 final names list.',\n#     '05 \\tThis file is semi-automatically derived from UnicodeData.txt and',\n#     '06 \\ta set of manually created annotations using a script to select',\n#     '07 \\tor suppress information from the data file. The rules used',\n#     '08 \\tfor this process are aimed at readability for the human reader,',\n#     '09 \\tat the expense of some details; therefore, this file should not',\n#     '10 \\tbe parsed for machine-readable information.',\n#     '11 @+\\t\\t© 2016 Unicode®, Inc.',\n#     '12 \\tFor terms of use, see http://www.unicode.org/terms_of_use.html',\n#     '13 @@\\t0000\\tC0 Controls and Basic Latin (Basic Latin)\\t007F',\n#     '14 @@+'\n#     ]\n#   # input_path    = '../../test-data/Unicode-NamesList-tiny.txt'\n#   input_path    = '/home/flow/io/basic-stream-benchmarks/test-data/Unicode-NamesList-tiny.txt'\n#   # output_path   = '/dev/null'\n#   output_path   = '/tmp/output.txt'\n#   input         = PS.new_stream input_path\n#   output        = FS.createWriteStream output_path\n#   collector     = []\n#   S             = {}\n#   S.item_count  = 0\n#   S.byte_count  = 0\n#   p             = input\n#   p             = p.pipe $ ( data, send ) -> whisper '20078-1', rpr data; send data\n#   p             = p.pipe PS.$split()\n#   p             = p.pipe $ ( data, send ) -> help '20078-1', rpr data; send data\n#   #.........................................................................................................\n#   p             = p.pipe PS.$ ( line, send ) ->\n#     S.item_count += +1\n#     S.byte_count += line.length\n#     debug '22001-0', rpr line\n#     collector.push line\n#     send line\n#   #.........................................................................................................\n#   p             = p.pipe $ ( data, send ) -> urge '20078-2', rpr data; send data\n#   p             = p.pipe PS.$as_line()\n#   p             = p.pipe output\n#   #.........................................................................................................\n#   ### TAINT use PipeStreams method ###\n#   output.on 'close', ->\n#     # debug '88862', S\n#     # debug '88862', collector\n#     if CND.equals collector, matcher\n#       T.succeed \"collector equals matcher\"\n#     done()\n#   #.........................................................................................................\n#   ### TAINT should be done by PipeStreams ###\n#   input.on 'end', ->\n#     outpudone()\n#   #.........................................................................................................\n#   return null\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"remit without end detection\" ] = ( T, done ) ->\n#   pipeline = []\n#   pipeline.push $values Array.from 'abcdef'\n#   pipeline.push $ ( data, send ) ->\n#     send data\n#     send '*' + data + '*'\n#   pipeline.push PS.$show()\n#   pipeline.push $pull_drain()\n#   PS.pull pipeline...\n#   T.succeed \"ok\"\n#   done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"remit with end detection 1\" ] = ( T, done ) ->\n  ### Sending `PS._symbols.end` has undefined behavior; in this case, it does end the stream, which is\n  OK. ###\n  # debug xrpr PS._symbols\n  # debug xrpr PS._symbols.end; xxx\n  pull_through              = require '../../deps/pull-through-with-end-symbol'\n  pipeline = []\n  # pipeline.push $values Array.from 'abcdef'\n  pipeline.push PS.new_value_source Array.from 'abcdef'\n  pipeline.push PS.$map ( d ) -> return d\n  pipeline.push $ ( d, send ) -> send if d is 'c' then PS._symbols.end else d\n  pipeline.push PS.$pass()\n  pipeline.push pull_through ( ( d ) -> @queue d )\n  pipeline.push $ { last: null, }, ( data, send ) ->\n    if data?\n      send data\n      send '*' + data + '*'\n    else\n      send 'ok'\n  pipeline.push $pull_drain null, ->\n    T.succeed \"ok\"\n    done()\n  PS.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"remit with end detection 2\" ] = ( T, done ) ->\n  ### One of the proper ways to end (a.k.a. abort) a stream is to call `send.end()`. ###\n  pull_through              = require '../../deps/pull-through-with-end-symbol'\n  pipeline = []\n  pipeline.push PS.new_value_source Array.from 'abcdef'\n  pipeline.push PS.$map ( d ) -> return d\n  pipeline.push $ ( d, send ) -> if d is 'c' then send.end() else send d\n  pipeline.push PS.$pass()\n  pipeline.push pull_through ( ( d ) -> @queue d )\n  pipeline.push $ { last: null, }, ( data, send ) ->\n    if data?\n      send data\n      send '*' + data + '*'\n    else\n      send 'ok'\n  pipeline.push $pull_drain null, ->\n    T.succeed \"ok\"\n    done()\n  PS.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"watch with end detection 1\" ] = ( T, done ) ->\n  [ probe, matcher, error, ] = [\"abcdef\",[\"(\",\"*a*\",\"|\",\"*b*\",\"|\",\"*c*\",\"|\",\"*d*\",\"|\",\"*e*\",\"|\",\"*f*\",\")\"],null]\n  await T.perform probe, matcher, error, -> new Promise ( resolve, reject ) ->\n    collector = []\n    pipeline  = []\n    pipeline.push PS.new_value_source Array.from probe\n    pipeline.push $ ( d, send ) -> send \"*#{d}*\"\n    pipeline.push PS.$watch { first: '(', between: '|', last: ')', }, ( d ) ->\n      debug '44874', xrpr d\n      collector.push d\n    # pipeline.push PS.$collect { collector, }\n    pipeline.push PS.$drain ->\n      help 'ok'\n      debug '44874', xrpr collector\n      resolve collector\n    PS.pull pipeline...\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"watch with end detection 2\" ] = ( T, done ) ->\n  [ probe, matcher, error, ] = [\"abcdef\",[\"*a*\",\"*b*\",\"*c*\",\"*d*\",\"*e*\",\"*f*\"],null]\n  await T.perform probe, matcher, error, -> new Promise ( resolve, reject ) ->\n    collector = []\n    pipeline  = []\n    pipeline.push PS.new_value_source Array.from probe\n    pipeline.push $ ( d, send ) -> send \"*#{d}*\"\n    pipeline.push PS.$watch { first: '(', between: '|', last: ')', }, ( d ) ->\n      debug '44874', xrpr d\n    pipeline.push PS.$collect { collector, }\n    pipeline.push PS.$drain ->\n      help 'ok'\n      debug '44874', xrpr collector\n      resolve collector\n    PS.pull pipeline...\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"wrap FS object for sink\" ] = ( T, done ) ->\n  output_path   = '/tmp/pipestreams-test-output.txt'\n  output_stream = FS.createWriteStream output_path\n  sink          = PS.write_to_nodejs_stream output_stream #, ( error ) -> debug '37783', error\n  pipeline      = []\n  pipeline.push $values Array.from 'abcdef'\n  pipeline.push PS.$show()\n  pipeline.push sink\n  pull pipeline...\n  output_stream.on 'finish', =>\n    T.ok CND.equals 'abcdef', read output_path\n    done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"function as pull-stream source\" ] = ( T, done ) ->\n  random = ( n ) =>\n    return ( end, callback ) =>\n      if end?\n        debug '40998', rpr callback\n        debug '40998', rpr end\n        return callback end\n      #only read n times, then stop.\n      n += -1\n      if n < 0\n        return callback true\n      callback null, Math.random()\n      return null\n  #.........................................................................................................\n  pipeline  = []\n  Ø         = ( x ) => pipeline.push x\n  Ø random 10\n  # Ø random 3\n  Ø PS.$collect()\n  Ø $ { last: null, }, ( data, send ) ->\n    if data?\n      T.ok data.length is 10\n      debug data\n      send data\n    else\n      T.succeed \"function works as pull-stream source\"\n      done()\n      send null\n  Ø PS.$show()\n  Ø PS.$drain()\n  #.........................................................................................................\n  PS.pull pipeline...\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"$surround\" ] = ( T, done ) ->\n  [ probe, matcher, error, ] = [null,\"first[(1),(2),(3),(4),(5)]last\",null]\n  await T.perform probe, matcher, error, ->\n    return new Promise ( resolve, reject ) ->\n      R         = null\n      drainer   = -> help 'ok'; resolve R\n      pipeline  = []\n      pipeline.push PS.new_value_source [ 1 .. 5 ]\n      #.........................................................................................................\n      pipeline.push PS.$surround { first: '[', last: ']', before: '(', between: ',', after: ')' }\n      pipeline.push PS.$surround { first: 'first', last: 'last', }\n      # pipeline.push PS.$surround { first: 'first', last: 'last', before: 'before', between: 'between', after: 'after' }\n      # pipeline.push PS.$surround { first: '[', last: ']', }\n      #.........................................................................................................\n      pipeline.push PS.$collect()\n      pipeline.push $ ( d, send ) -> send ( x.toString() for x in d ).join ''\n      pipeline.push PS.$watch ( d ) -> R = d\n      pipeline.push PS.$drain drainer\n      PS.pull pipeline...\n      return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"$surround async\" ] = ( T, done ) ->\n  [ probe, matcher, error, ] = [null,\"[first|1|2|3|4|5|last]\",null]\n  await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n    R         = null\n    drainer   = -> help 'ok'; resolve R\n    pipeline  = []\n    pipeline.push PS.new_value_source [ 1 .. 5 ]\n    #.........................................................................................................\n    pipeline.push PS.$surround { first: 'first', last: 'last', }\n    pipeline.push $async { first: '[', last: ']', between: '|', }, ( d, send, done ) =>\n      defer ->\n        # debug '22922', jr d\n        send d\n        done()\n    #.........................................................................................................\n    pipeline.push PS.$collect()\n    pipeline.push $ ( d, send ) -> send ( x.toString() for x in d ).join ''\n    pipeline.push PS.$watch ( d ) -> R = d\n    pipeline.push PS.$drain drainer\n    PS.pull pipeline...\n    return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"end push source (1)\" ] = ( T, done ) ->\n  ### The proper way to end a push source is to call `source.end()`. ###\n  [ probe, matcher, error, ] = [[\"what\",\"a\",\"lot\",\"of\",\"little\",\"bottles\"],[\"what\",\"a\",\"lot\",\"of\",\"little\",\"bottles\"],null]\n  await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n    R         = []\n    drainer   = -> help 'ok'; resolve R\n    source    = PS.new_push_source()\n    pipeline  = []\n    pipeline.push source\n    pipeline.push PS.$watch ( d ) -> info xrpr d\n    pipeline.push PS.$collect { collector: R, }\n    pipeline.push PS.$watch ( d ) -> info xrpr d\n    pipeline.push PS.$drain drainer\n    pull pipeline...\n    for word in probe\n      source.send word\n    source.end()\n    return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"end push source (2)\" ] = ( T, done ) ->\n  ### The proper way to end a push source is to call `source.end()`. ###\n  [ probe, matcher, error, ] = [[\"what\",\"a\",\"lot\",\"of\",\"little\",\"bottles\",\"stop\"],[\"what\",\"a\",\"lot\",\"of\",\"little\",\"bottles\"],null]\n  await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n    R         = []\n    drainer   = -> help 'ok'; resolve R\n    source    = PS.new_push_source()\n    pipeline  = []\n    pipeline.push source\n    pipeline.push PS.$watch ( d ) -> info xrpr d\n    pipeline.push $ ( d, send ) -> if d is 'stop' then source.end() else send d\n    pipeline.push PS.$collect { collector: R, }\n    pipeline.push PS.$watch ( d ) -> info xrpr d\n    pipeline.push PS.$drain drainer\n    pull pipeline...\n    for word in probe\n      source.send word\n    return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"end push source (3)\" ] = ( T, done ) ->\n  ### The proper way to end a push source is to call `source.end()`; `send.end()` is largely equivalent. ###\n  [ probe, matcher, error, ] = [[\"what\",\"a\",\"lot\",\"of\",\"little\",\"bottles\",\"stop\"],[\"what\",\"a\",\"lot\",\"of\",\"little\",\"bottles\"],null]\n  await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n    R         = []\n    drainer   = -> help 'ok'; resolve R\n    source    = PS.new_push_source()\n    pipeline  = []\n    pipeline.push source\n    pipeline.push PS.$watch ( d ) -> info xrpr d\n    pipeline.push $ ( d, send ) -> if d is 'stop' then send.end() else send d\n    pipeline.push PS.$collect { collector: R, }\n    pipeline.push PS.$watch ( d ) -> info xrpr d\n    pipeline.push PS.$drain drainer\n    pull pipeline...\n    for word in probe\n      source.send word\n    return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"end push source (4)\" ] = ( T, done ) ->\n  ### A stream may be ended by using an `$end_if()` (alternatively, `$continue_if()`) transform. ###\n  [ probe, matcher, error, ] = [[\"what\",\"a\",\"lot\",\"of\",\"little\",\"bottles\",\"stop\"],[\"what\",\"a\",\"lot\",\"of\",\"little\",\"bottles\"],null]\n  await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n    R         = []\n    drainer   = -> help 'ok'; resolve R\n    source    = PS.new_push_source()\n    pipeline  = []\n    pipeline.push source\n    pipeline.push PS.$watch ( d ) -> info xrpr d\n    pipeline.push PS.$end_if ( d ) -> d is 'stop'\n    pipeline.push PS.$collect { collector: R, }\n    pipeline.push PS.$watch ( d ) -> info xrpr d\n    pipeline.push PS.$drain drainer\n    pull pipeline...\n    for word in probe\n      source.send word\n    return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"end random async source\" ] = ( T, done ) ->\n  [ probe, matcher, error, ] = [[\"what\",\"a\",\"lot\",\"of\",\"little\",\"bottles\"],[\"what\",\"a\",\"lot\",\"of\",\"little\",\"bottles\"],null]\n  await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n    R         = []\n    drainer   = -> help 'ok'; resolve R\n    source    = PS.new_random_async_value_source probe\n    pipeline  = []\n    pipeline.push source\n    pipeline.push PS.$watch ( d ) -> info xrpr d\n    pipeline.push PS.$collect { collector: R, }\n    pipeline.push PS.$watch ( d ) -> info xrpr d\n    pipeline.push PS.$drain drainer\n    pull pipeline...\n    return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"read file chunks\" ] = ( T, done ) ->\n  [ probe, matcher, error, ] = [ __filename, null, null, ]\n  await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n    R         = []\n    drainer   = -> help 'ok'; resolve null\n    source    = PS.read_chunks_from_file probe, 50\n    count     = 0\n    pipeline  = []\n    pipeline.push source\n    pipeline.push $ ( d, send ) -> send d.toString 'utf-8'\n    pipeline.push PS.$watch ->\n      count += +1\n      source.end() if count > 3\n    pipeline.push PS.$collect { collector: R, }\n    pipeline.push PS.$watch ( d ) -> info xrpr d\n    pipeline.push PS.$drain drainer\n    pull pipeline...\n    return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"demo watch pipeline on abort 2\" ] = ( T, done ) ->\n  # through = require 'pull-through'\n  probes_and_matchers = [\n    [[false,[1,2,3,null,5]],[1,1,1,2,2,2,3,3,3,null,null,null,5,5,5],null]\n    [[true,[1,2,3,null,5]],[1,1,1,2,2,2,3,3,3,null,null,null,5,5,5],null]\n    [[false,[1,2,3,\"stop\",25,30]],[1,1,1,2,2,2,3,3,3],null]\n    [[true,[1,2,3,\"stop\",25,30]],[1,1,1,2,2,2,3,3,3],null]\n    [[false,[1,2,3,null,\"stop\",25,30]],[1,1,1,2,2,2,3,3,3,null,null,null],null]\n    [[true,[1,2,3,null,\"stop\",25,30]],[1,1,1,2,2,2,3,3,3,null,null,null],null]\n    [[false,[1,2,3,undefined,\"stop\",25,30]],[1,1,1,2,2,2,3,3,3,undefined,undefined,undefined,],null]\n    [[true,[1,2,3,undefined,\"stop\",25,30]],[1,1,1,2,2,2,3,3,3,undefined,undefined,undefined,],null]\n    [[false,[\"stop\",25,30]],[],null]\n    [[true,[\"stop\",25,30]],[],null]\n    ]\n  #.........................................................................................................\n  aborting_map = ( use_defer, mapper ) ->\n    react = ( handler, data ) ->\n      if data is 'stop' then  handler true\n      else                    handler null, mapper data\n    # a sink function: accept a source...\n    return ( read ) ->\n      # ...but return another source!\n      return ( abort, handler ) ->\n        read abort, ( error, data ) ->\n          # if the stream has ended, pass that on.\n          return handler error if error\n          if use_defer then  defer -> react handler, data\n          else                        react handler, data\n          return null\n        return null\n      return null\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      #.....................................................................................................\n      [ use_defer\n        values ]  = probe\n      source      = PS.new_value_source values\n      collector   = []\n      pipeline    = []\n      pipeline.push source\n      pipeline.push aborting_map use_defer, ( d ) -> info '22398-1', xrpr d; return d\n      pipeline.push PS.$ ( d, send ) -> info '22398-2', xrpr d; collector.push d; send d\n      pipeline.push PS.$ ( d, send ) -> info '22398-3', xrpr d; collector.push d; send d\n      pipeline.push PS.$ ( d, send ) -> info '22398-4', xrpr d; collector.push d; send d\n      # pipeline.push PS.$map ( d ) -> info '22398-2', xrpr d; collector.push d; return d\n      # pipeline.push PS.$map ( d ) -> info '22398-3', xrpr d; collector.push d; return d\n      # pipeline.push PS.$map ( d ) -> info '22398-4', xrpr d; collector.push d; return d\n      pipeline.push PS.$drain ->\n        help '44998', xrpr collector\n        resolve collector\n      pull pipeline...\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"$mark_position\" ] = ( T, done ) ->\n  # through = require 'pull-through'\n  probes_and_matchers = [\n    [[\"a\"],[{\"is_first\":true,\"is_last\":true,\"d\":\"a\"}],null]\n    [[],[],null]\n    [[1,2,3],[{\"is_first\":true,\"is_last\":false,\"d\":1},{\"is_first\":false,\"is_last\":false,\"d\":2},{\"is_first\":false,\"is_last\":true,\"d\":3}],null]\n    [[\"a\",\"b\"],[{\"is_first\":true,\"is_last\":false,\"d\":\"a\"},{\"is_first\":false,\"is_last\":true,\"d\":\"b\"}],null]\n    ]\n  #.........................................................................................................\n  collector = []\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      #.....................................................................................................\n      source      = PS.new_value_source probe\n      collector   = []\n      pipeline    = []\n      pipeline.push source\n      pipeline.push PS.$mark_position()\n      pipeline.push PS.$collect { collector, }\n      pipeline.push PS.$drain -> resolve collector\n      pull pipeline...\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"leapfrog 1\" ] = ( T, done ) ->\n  # through = require 'pull-through'\n  probes_and_matchers = [\n    [[[ 1 .. 10], ( ( d ) -> d %% 2 isnt 0 ), ],[1,102,3,104,5,106,7,108,9,110],null]\n    ]\n  #.........................................................................................................\n  collector = []\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      [ values\n        jumper ]  = probe\n      #.....................................................................................................\n      source      = PS.new_value_source values\n      collector   = []\n      pipeline    = []\n      pipeline.push source\n      pipeline.push PS.$ { leapfrog: jumper, }, ( d, send ) -> send 100 + d\n      pipeline.push PS.$collect { collector, }\n      pipeline.push PS.$drain -> resolve collector\n      pull pipeline...\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"leapfrog 2\" ] = ( T, done ) ->\n  # through = require 'pull-through'\n  probes_and_matchers = [\n    [[[ 1 .. 10], ( ( d ) -> d %% 2 isnt 0 ), ],[1,102,3,104,5,106,7,108,9,110],null]\n    ]\n  #.........................................................................................................\n  collector = []\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      [ values\n        jumper ]  = probe\n      #.....................................................................................................\n      source      = PS.new_value_source values\n      collector   = []\n      pipeline    = []\n      pipeline.push source\n      pipeline.push PS.$ { leapfrog: jumper, }, ( d, send ) -> send 100 + d\n      pipeline.push PS.$collect { collector, }\n      pipeline.push PS.$drain -> resolve collector\n      pull pipeline...\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"$scramble\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [[[],0.5,42],[],null]\n    [[[1],0.5,42],[1],null]\n    [[[1,2],0.5,42],[1,2],null]\n    [[[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],0.5,42],[1,4,2,5,3,6,7,14,12,9,13,8,16,10,15,11,17,18,19,20,21,22,24,26,23,25,27,28,29,30,32,31,33,34,35,37,36,38,39,40],null]\n    [[[1,2,3,4,5,6,7,8,9,10],1,2],[9,2,7,5,8,4,10,1,3,6],null]\n    [[[1,2,3,4,5,6,7,8,9,10],0.1,2],[1,2,3,4,5,6,7,8,9,10],null]\n    [[[1,2,3,4,5,6,7,8,9,10],0,2],[1,2,3,4,5,6,7,8,9,10],null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    #.......................................................................................................\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ values\n        p\n        seed ]    = probe\n      cache       = {}\n      collector   = []\n      pipeline    = []\n      pipeline.push PS.new_value_source values\n      pipeline.push PS.$scramble p, { seed, }\n      pipeline.push PS.$collect { collector, }\n      pipeline.push PS.$drain -> resolve collector\n      PS.pull pipeline...\n      #.....................................................................................................\n      return null\n  #.........................................................................................................\n  done()\n  return null\n\n\n############################################################################################################\nunless module.parent?\n  # include = []\n  # @_prune()\n  # @_main()\n  # test @\n  # test @[ \"read file chunks\" ]\n  # test @[ \"$mark_position\" ]\n  # test @[ \"leapfrog 2\" ]\n  test @[ \"$scramble\" ]\n  # test @[ \"remit with end detection 1\" ]\n  # test @[ \"remit with end detection 2\" ]\n  # test @[ \"$surround async\" ]\n  # test @[ \"end push source (1)\" ]\n  # test @[ \"end push source (2)\" ]\n  # test @[ \"end push source (3)\" ]\n  # test @[ \"end push source (4)\" ]\n  # test @[ \"end random async source\" ]\n  # test @[ \"watch with end detection 1\" ]\n  # test @[ \"watch with end detection 2\" ]\n  # test @[ \"demo watch pipeline on abort 2\" ]\n\n\n\n\n"
  ]
}