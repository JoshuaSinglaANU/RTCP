{
  "version": 3,
  "file": "async.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/async.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPESTREAMS/TESTS/ASYNC-MAP'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\njr                        = JSON.stringify\n#...........................................................................................................\nPS                        = require '../..'\n{ $, $async, }            = PS.export()\n\n#-----------------------------------------------------------------------------------------------------------\nafter = ( dts, f ) -> setTimeout f, dts * 1000\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"async 1\" ] = ( T, done ) ->\n  ok                  = false\n  [ probe, matcher, ] = [\"abcdef\",\"1a-2a-1b-2b-1c-2c-1d-2d-1e-2e-1f-2f\"]\n  pipeline            = []\n  pipeline.push PS.new_value_source Array.from probe\n  pipeline.push $async ( d, send, done ) ->\n    send \"1#{d}\"\n    send \"2#{d}\"\n    done()\n  pipeline.push PS.$surround { between: '-', }\n  pipeline.push PS.$join()\n  #.........................................................................................................\n  pipeline.push PS.$watch ( result ) ->\n    echo CND.gold jr [ probe, result, ]\n    T.eq result, matcher\n    ok = true\n  #.........................................................................................................\n  pipeline.push PS.$drain ->\n    T.fail \"failed to pass test\" unless ok\n    done()\n  #.........................................................................................................\n  PS.pull pipeline...\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n$send_three = ->\n  return PS.$async ( d, send, done ) ->\n    count = 0\n    for nr in [ 1 .. 3 ]\n      do ( d, nr ) ->\n        after ( Math.random() / 5 ), ->\n          count += 1\n          send \"(#{d}:#{nr})\"\n          done() if count is 3\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"async 2\" ] = ( T, done ) ->\n  ok        = false\n  probe     = \"abcdef\"\n  matcher   = \"(a:1)(a:2)(a:3)(b:1)(b:2)(b:3)(c:1)(c:2)(c:3)(d:1)(d:2)(d:3)(e:1)(e:2)(e:3)(f:1)(f:2)(f:3)\"\n  pipeline  = []\n  pipeline.push PS.new_value_source Array.from probe\n  pipeline.push $send_three()\n  pipeline.push PS.$sort()\n  pipeline.push PS.$join()\n  #.........................................................................................................\n  pipeline.push PS.$watch ( result ) ->\n    T.eq result, matcher\n    ok = true\n  #.........................................................................................................\n  pipeline.push PS.$watch ( d ) -> urge d\n  pipeline.push PS.$drain ->\n    T.fail \"failed to pass test\" unless ok\n    done()\n  #.........................................................................................................\n  PS.pull pipeline...\n  return null\n\n\n############################################################################################################\nunless module.parent?\n  test @\n  # test @[ \"async 1\" ]\n  # test @[ \"async 2\" ]\n\n\n\n"
  ]
}