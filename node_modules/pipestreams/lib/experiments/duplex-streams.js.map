{
  "version": 3,
  "file": "duplex-streams.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/duplex-streams.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPESTREAMS/EXPERIMENTS/DUPLEX-STREAMS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPS                        = require '../..'\n{ $, $async, }            = PS.export()\n#...........................................................................................................\nafter                     = ( dts, f ) -> setTimeout  f, dts * 1000\nevery                     = ( dts, f ) -> setInterval f, dts * 1000\ndefer                     = setImmediate\n{ jr\n  is_empty }              = CND\ntest                      = require 'guy-test'\nassign                    = Object.assign\n{ inspect, }              = require 'util'\nxrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\n\n\n###\nDuplex streams are used to communicate with a remote service,\nand they are a pair of source and sink streams `{source, sink}`\n\nin node, you see duplex streams to connect replication or rpc protocols.\nclient.pipe(server).pipe(client)\nor\nserver.pipe(client).pipe(server)\nboth do the same thing.\n\nthe pull function we wrote before doesn't detect this,\nbut if you use the pull-stream module it will.\nThen we can pipe duplex pull-streams like this:\n\nvar pull = require('pull-stream')\npull(client, server, client)\n\nAlso, sometimes you'll need to interact with a regular node stream.\nthere are two modules for this.\n\nstream-to-pull-stream\nand\npull-stream-to-stream\n###\n\n\n#-----------------------------------------------------------------------------------------------------------\n@wye_1 = ->\n  new_pair    = require 'pull-pair'\n  #.........................................................................................................\n  $wye = ( bystream ) ->\n    pair        = new_pair()\n    pushable    = PS.new_push_source()\n    pipeline_1  = []\n    pipeline_2  = []\n    #.......................................................................................................\n    pipeline_1.push pair.source\n    pipeline_1.push PS.$surround before: '(', after: ')', between: '-'\n    # pipeline_1.push PS.$join()\n    pipeline_1.push PS.$show title: 'substream'\n    pipeline_1.push PS.$watch ( d ) -> pushable.send d\n    pipeline_1.push PS.$drain -> urge \"substream ended\"\n    #.......................................................................................................\n    pipeline_2.push bystream\n    pipeline_2.push $ { last: null, }, ( d, send ) -> urge \"bystream ended\" unless d?; send d\n    pipeline_2.push PS.$show title: 'bystream'\n    #.......................................................................................................\n    PS.pull pipeline_1...\n    confluence = PS.$merge pushable, PS.pull pipeline_2...\n    return { sink: pair.sink, source: confluence, }\n  #.........................................................................................................\n  bysource = PS.new_value_source [ 3 .. 7 ]\n  pipeline = []\n  pipeline.push PS.new_value_source \"just a few words\".split /\\s/\n  # pipeline.push PS.$watch ( d ) -> whisper d\n  pipeline.push $wye bysource\n  pipeline.push PS.$collect()\n  pipeline.push PS.$show title: 'mainstream'\n  pipeline.push PS.$drain -> help 'ok'\n  PS.pull pipeline...\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@wye_2 = ->\n  new_pair    = require 'pull-pair'\n  #.........................................................................................................\n  $wye = ( bystream ) ->\n    pair              = new_pair()\n    pushable          = PS.new_push_source()\n    subline           = []\n    byline            = []\n    end_sym           = Symbol 'end'\n    bystream_ended    = false\n    substream_ended   = false\n    #.......................................................................................................\n    subline.push pair.source\n    subline.push $ { last: end_sym, }, ( d, send ) ->\n      if d is end_sym\n        substream_ended = true\n        pushable.end() if bystream_ended\n      else\n        pushable.send d\n    subline.push PS.$drain()\n    #.......................................................................................................\n    byline.push bystream\n    byline.push $ { last: end_sym, }, ( d, send ) ->\n      if d is end_sym\n        bystream_ended = true\n        pushable.end() if substream_ended\n      else\n        send d\n    #.......................................................................................................\n    PS.pull subline...\n    confluence = PS.$merge pushable, PS.pull byline...\n    return { sink: pair.sink, source: confluence, }\n  #.........................................................................................................\n  demo = ->\n    return new Promise ( resolve ) ->\n      byline = []\n      byline.push PS.new_value_source [ 3 .. 7 ]\n      byline.push PS.$watch ( d ) -> whisper 'bystream', jr d\n      #.......................................................................................................\n      mainline = []\n      mainline.push PS.new_value_source \"just a few words\".split /\\s/\n      mainline.push PS.$watch ( d ) -> whisper 'mainstream', jr d\n      mainline.push $wye PS.pull byline...\n      mainline.push PS.$collect()\n      mainline.push PS.$show title: 'mainstream'\n      mainline.push PS.$drain -> help 'ok'; resolve()\n      PS.pull mainline...\n  await demo()\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\n@pull_pair_1 = ->\n  new_pair    = require 'pull-pair'\n  pair        = new_pair()\n  pipeline_1  = []\n  pipeline_2  = []\n  #.........................................................................................................\n  # read values into this sink...\n  pipeline_1.push PS.new_value_source [ 1, 2, 3, ]\n  pipeline_1.push PS.$watch ( d ) -> urge d\n  pipeline_1.push pair.sink\n  PS.pull pipeline_1...\n  #.........................................................................................................\n  # but that should become the source over here.\n  pipeline_2.push pair.source\n  pipeline_2.push PS.$collect()\n  pipeline_2.push PS.$show()\n  pipeline_2.push PS.$drain()\n  #.........................................................................................................\n  PS.pull pipeline_2...\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@pull_pair_2 = ->\n  new_pair    = require 'pull-pair'\n  #.........................................................................................................\n  f = ->\n    pair        = new_pair()\n    pushable    = PS.new_push_source()\n    pipeline_1  = []\n    #.......................................................................................................\n    pipeline_1.push pair.source\n    pipeline_1.push PS.$surround before: '(', after: ')', between: '-'\n    pipeline_1.push PS.$join()\n    pipeline_1.push PS.$show title: 'substream'\n    pipeline_1.push PS.$watch ( d ) -> pushable.send d\n    pipeline_1.push PS.$drain()\n    #.......................................................................................................\n    PS.pull pipeline_1...\n    return { sink: pair.sink, source: pushable, }\n  #.........................................................................................................\n  pipeline = []\n  pipeline.push PS.new_value_source \"just a few words\".split /\\s/\n  pipeline.push PS.$watch ( d ) -> whisper d\n  pipeline.push f()\n  pipeline.push PS.$show title: 'mainstream'\n  pipeline.push PS.$drain()\n  PS.pull pipeline...\n  return null\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"_duplex 1\" ] = ->\n  NET           = require 'net'\n  toPull        = require 'stream-to-pull-stream'\n  pull          = require 'pull-stream'\n  bylog         = PS.get_logger 'b', 'red'\n  mainlog       = PS.get_logger 'm', 'gold'\n  #.........................................................................................................\n  server_as_duplex_stream = ( nodejs_stream ) ->\n    ### convert into a duplex pull-stream ###\n    server_stream = toPull.duplex nodejs_stream\n    extra_stream  = PS.new_random_async_value_source \"xxx here comes the sun\".split /\\s+/\n    pipeline      = []\n    # pipeline.push server_stream\n    pipeline.push PS.new_merged_source server_stream, extra_stream\n    pipeline.push bylog PS.$split()\n    pipeline.push bylog pull.map ( x ) -> x.toString().toUpperCase() + '!!!'\n    # pipeline.push server_stream\n    pipeline.push bylog pull.map ( x ) -> \"*#{x}*\"\n    pipeline.push bylog PS.$as_line()\n    pipeline.push PS.$watch ( d ) -> debug '32387', xrpr d\n    pipeline.push server_stream\n    # pipeline.push PS.$watch ( d ) -> console.log d.toString()\n    # pipeline.push bylog PS.$drain()\n    PS.pull pipeline...\n    return null\n  #.........................................................................................................\n  server = NET.createServer server_as_duplex_stream\n  listener = ->\n    client_stream = toPull.duplex NET.connect 9999\n    pipeline      = []\n    pipeline.push PS.new_random_async_value_source [ 'quiet stream\\n', 'great thing\\n', ]\n    # pipeline.push PS.new_value_source [ 'quiet stream\\n', 'great thing\\n', ]\n    pipeline.push client_stream\n    pipeline.push mainlog PS.$split()\n    pipeline.push PS.$watch ( d ) -> debug '32388', xrpr d\n    pipeline.push mainlog PS.$drain ->\n      help 'ok'\n      server.close()\n    PS.pull pipeline...\n    return null\n  #.........................................................................................................\n  server.listen 9999, listener\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"_duplex 2\" ] = ->\n  NET           = require 'net'\n  toPull        = require 'stream-to-pull-stream'\n  pull          = require 'pull-stream'\n  bylog         = PS.get_logger 'b', 'red'\n  mainlog       = PS.get_logger 'm', 'gold'\n  #.........................................................................................................\n  server_as_duplex_stream = ( nodejs_stream ) ->\n    ### convert into a duplex pull-stream ###\n    extra_stream  = PS.new_random_async_value_source \"xxx here comes the sun\".split /\\s+/\n    server_stream = toPull.duplex nodejs_stream\n    pipeline      = []\n    pipeline.push PS.new_merged_source server_stream, extra_stream\n    pipeline.push bylog PS.$split()\n    pipeline.push bylog pull.map ( x ) -> x.toString().toUpperCase() + '!!!'\n    # pipeline.push server_stream\n    pipeline.push bylog pull.map ( x ) -> \"*#{x}*\"\n    pipeline.push bylog PS.$as_line()\n    pipeline.push PS.$watch ( d ) -> debug '32387', xrpr d\n    pipeline.push server_stream\n    # pipeline.push PS.$watch ( d ) -> console.log d.toString()\n    # pipeline.push bylog PS.$drain()\n    PS.pull pipeline...\n    return null\n  #.........................................................................................................\n  server = NET.createServer server_as_duplex_stream\n  listener = ->\n    client_stream = toPull.duplex NET.connect 9999\n    pipeline      = []\n    pipeline.push PS.new_random_async_value_source 'quiet stream this is one great thing'.split /\\s+/\n    # pipeline.push PS.new_value_source [ 'quiet stream\\n', 'great thing\\n', ]\n    pipeline.push client_stream\n    pipeline.push mainlog PS.$split()\n    pipeline.push PS.$watch ( d ) -> debug '32388', xrpr d\n    pipeline.push mainlog PS.$drain ->\n      help 'ok'\n      server.close()\n    PS.pull pipeline...\n    return null\n  #.........................................................................................................\n  server.listen 9999, listener\n\n#-----------------------------------------------------------------------------------------------------------\n@duplex_stream_3 = ->\n  new_duplex_pair     = require 'pull-pair/duplex'\n  [ client, server, ] = new_duplex_pair()\n  clientline          = []\n  serverline          = []\n  refillable          = []\n  extra_stream        = PS.new_refillable_source refillable, { repeat: 10, show: true, }\n  # extra_stream        = PS.new_push_source()\n  #.........................................................................................................\n  # pipe the second duplex stream back to itself.\n  serverline.push PS.new_merged_source server, extra_stream\n  # serverline.push client\n  serverline.push PS.$defer()\n  serverline.push PS.$watch ( d ) -> urge d\n  serverline.push $ ( d, send ) -> send d * 10\n  serverline.push server\n  PS.pull serverline...\n  #.........................................................................................................\n  clientline.push PS.new_value_source [ 1, 2, 3, ]\n  # clientline.push PS.$defer()\n  clientline.push client\n  # clientline.push PS.$watch ( d ) -> extra_stream.send d if d < 30\n  clientline.push PS.$watch ( d ) -> refillable.push d if d < 30\n  clientline.push PS.$collect()\n  clientline.push PS.$show()\n  # clientline.push client\n  clientline.push PS.$drain()\n  PS.pull clientline...\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"wye with duplex pair\" ] = ( T, done ) ->\n  new_duplex_pair     = require 'pull-pair/duplex'\n  probes_and_matchers = [\n    [[false,false,false,[11,12,13],[21,22,23,24,25]],[22,42,24,44,26,46,48,50],null]\n    [[false,false,true,[11,12,13],[21,22,23,24,25]],[22,42,24,44,26,46,48,50],null]\n    [[false,true,false,[11,12,13],[21,22,23,24,25]],[22,42,24,44,26,46,48,50],null]\n    [[false,true,true,[11,12,13],[21,22,23,24,25]],[22,42,24,44,26,46,48,50],null]\n    [[true,false,false,[11,12,13],[21,22,23,24,25]],[42,44,46,48,50,22,24,26],null]\n    [[true,false,true,[11,12,13],[21,22,23,24,25]],[42,44,46,48,50,22,24,26],null]\n    [[true,true,false,[11,12,13],[21,22,23,24,25]],[42,44,46,48,50,22,24,26],null]\n    [[true,true,true,[11,12,13],[21,22,23,24,25]],[42,44,46,48,50,22,24,26],null]\n    ]\n  #.........................................................................................................\n  $wye = ( stream, use_defer ) ->\n    $log                = PS.get_logger 'b', 'red'\n    [ client, server, ] = new_duplex_pair()\n    serverline          = []\n    serverline.push PS.new_merged_source server, stream\n    serverline.push PS.$defer() if use_defer\n    # serverline.push PS.$watch ( d ) -> urge d\n    serverline.push $ ( d, send ) -> send d * 2\n    serverline.push server\n    PS.pull serverline...\n    return client\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      $log                = PS.get_logger 'm', 'gold'\n      [ use_defer_1\n        use_defer_2\n        use_defer_3\n        a\n        b ]               = probe\n      source_a            = PS.new_value_source a\n      source_b            = PS.new_value_source b\n      collector           = []\n      clientline          = []\n      clientline.push source_a\n      clientline.push PS.$defer() if use_defer_1\n      clientline.push $wye source_b, use_defer_3\n      clientline.push PS.$defer() if use_defer_2\n      clientline.push PS.$collect { collector, }\n      # clientline.push PS.$show()\n      clientline.push PS.$drain -> resolve collector\n      PS.pull clientline...\n  #.........................................................................................................\n  done()\n  return null\n\n\n############################################################################################################\nunless module.parent?\n  do =>\n    # await @duplex_stream_3()\n    # await @wye_1()\n    # await @wye_2()\n    # await @pull_pair_1()\n    # await @pull_pair_2()\n    # await @[ \"_duplex 1\" ]()\n    # await @[ \"_duplex 2\" ]()\n    # await @wye_with_duplex_pair()\n    test @[ \"wye with duplex pair\" ]\n\n"
  ]
}