{
  "version": 3,
  "file": "benchmark.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/benchmark.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n###\nTesting Parameters\n\n* number of no-op pass-through transforms\n* highWaterMark for input stream\n* whether input stream emits buffers or strings (if it emits strings, whether `$utf8` transform should be kept)\n* implementation model for transforms\n* implementation model for pass-throughs\n\nEasy to show that `$split` doesn't work correctly on buffers (set highWaterMark to, say, 3 and have\ninput stream emit buffers).\n\n###\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'BASIC-STREAM-BENCHMARKS-2/COPY-LINES-WITH-PULL-STREAM'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nnew_numeral               = require 'numeral'\nformat_float              = ( x ) -> ( new_numeral x ).format '0,0.000'\nformat_integer            = ( x ) -> ( new_numeral x ).format '0,0'\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\n#...........................................................................................................\n$split                    = require 'pull-split'\n$stringify                = require 'pull-stringify'\n$utf8                     = require 'pull-utf8-decoder'\nnew_file_source           = require 'pull-file'\npull                      = require 'pull-stream'\n### NOTE these two are different: ###\n# $pass_through             = require 'pull-stream/throughs/through'\nthrough                   = require 'pull-through'\nasync_map                 = require 'pull-stream/throughs/async-map'\n$drain                    = require 'pull-stream/sinks/drain'\nSTPS                      = require 'stream-to-pull-stream'\n#...........................................................................................................\nS                         = {}\nS.pass_through_count      = 0\n# S.pass_through_count      = 1\n# S.pass_through_count      = 100\n# S.implementation          = 'pull-stream'\nS.implementation          = 'pipestreams-map'\n# S.implementation          = 'pipestreams-remit'\n#...........................................................................................................\ntest                      = require 'guy-test'\n#...........................................................................................................\nPS                        = require '../..'\n{ $, $async, }            = PS.export()\n#...........................................................................................................\n### Avoid to try to require `v8-profiler` when running this module with `devtool`: ###\nS.running_in_devtools     = console.profile?\nV8PROFILER                = null\nunless S.running_in_devtools\n  try\n    V8PROFILER = require 'v8-profiler'\n  catch error\n    throw error unless error[ 'code' ] is 'MODULE_NOT_FOUND'\n    warn \"unable to `require v8-profiler`\"\n\nPRFLR           = {}\nPRFLR.timers    = {}\nPRFLR.sums      = {}\nPRFLR.dt_total  = null\nPRFLR.counts    = {}\nif global.performance? then PRFLR.now = global.performance.now.bind global.performance\nelse                        PRFLR.now = require 'performance-now'\nPRFLR.start = ( title ) ->\n  ( @timers[ title ] ?= [] ).push -@now()\n  return null\nPRFLR.stop  = ( title ) ->\n  @timers[ title ].push @now() + @timers[ title ].pop()\n  return null\nPRFLR.wrap  = ( title, method ) ->\n  throw new Error \"expected a text, got a #{type}\"      unless ( type = CND.type_of title  ) is 'text'\n  throw new Error \"expected a function, got a #{type}\"  unless ( type = CND.type_of method ) is 'function'\n  parameters = ( \"a#{idx}\" for idx in [ 1 .. method.length ] by +1 ).join ', '\n  title_txt = JSON.stringify title\n  source = \"\"\"\n    var R;\n    R = function ( #{parameters} ) {\n      PRFLR.start( #{title_txt} );\n      R = method.apply( null, arguments );\n      PRFLR.stop( #{title_txt} );\n      return R;\n      }\n    \"\"\"\n  R = eval source\n  return R\nPRFLR._average = ->\n  ### only call after calibration, before actual usage ###\n  @aggregate()\n  @dt = @sums[ 'dt' ] / 10\n  delete @sums[ 'dt' ]\n  delete @counts[ 'dt' ]\nPRFLR.aggregate = ->\n  if @timers[ '*' ]?\n    @stop '*' if @timers[ '*' ] < 0\n    @dt_total = @timers[ '*' ]\n    delete @timers[ '*' ]\n    delete @counts[ '*' ]\n  for title, timers of @timers\n    dts               = @timers[ title ]\n    @counts[ title ]  = dts.length\n    @sums[ title ]    = ( @sums[ title ] ? 0 ) + dts.reduce ( ( a, b ) -> a + b ), 0\n    delete @timers[ title ]\n  return null\nPRFLR.report = ->\n  @aggregate()\n  lines   = []\n  dt_sum  = 0\n  for title, dt of @sums\n    count   = ' ' + @counts[ title ]\n    leader  = '...'\n    leader += '.' until title.length + leader.length + count.length > 50\n    dt_sum += dt\n    dt_txt  = format_float dt\n    dt_txt  = ' ' + dt_txt until dt_txt.length > 10\n    line    = [ title, leader, count, dt_txt, ].join ' '\n    lines.push [ dt, line, ]\n  lines.sort ( a, b ) ->\n    return +1 if a[ 0 ] > b[ 0 ]\n    return -1 if a[ 0 ] < b[ 0 ]\n    return  0\n  dt_reference = @dt_total ? dt_sum\n  whisper \"epsilon: #{@dt}\"\n  percentage_txt = ( ( dt_sum / dt_reference * 100 ).toFixed 0 ) + '%'\n  whisper \"dt reference: #{format_float dt_reference / 1000}s (#{percentage_txt})\"\n  for [ dt, line, ] in lines\n    percentage_txt = ( ( dt / dt_reference * 100 ).toFixed 0 ) + '%'\n    percentage_txt = ' ' + percentage_txt until percentage_txt.length > 3\n    info line, percentage_txt\n\n#-----------------------------------------------------------------------------------------------------------\n### provide a minmum delta time: ###\nfor _ in [ 1 .. 10 ]\n  PRFLR.start 'dt'\n  PRFLR.stop  'dt'\nPRFLR._average()\n\n#-----------------------------------------------------------------------------------------------------------\nstart_profile = ( S ) ->\n  S.t0 = Date.now()\n  if running_in_devtools\n    console.profile S.job_name\n  else if V8PROFILER?\n    V8PROFILER.startProfiling S.job_name\n\n#-----------------------------------------------------------------------------------------------------------\nstop_profile = ( S, handler ) ->\n  if running_in_devtools\n    console.profileEnd S.job_name\n  else if V8PROFILER?\n    step ( resume ) ->\n      profile         = V8PROFILER.stopProfiling S.job_name\n      profile_data    = yield profile.export resume\n      S.profile_name  = \"profile-#{S.job_name}.json\"\n      S.profile_home  = PATH.resolve __dirname, '../results', S.fingerprint, 'profiles'\n      mkdirp.sync S.profile_home\n      S.profile_path  = PATH.resolve S.profile_home, S.profile_name\n      FS.writeFileSync S.profile_path, profile_data\n      handler()\n\n#-----------------------------------------------------------------------------------------------------------\nTAP.test \"performance regression\", ( T ) ->\n\n  #---------------------------------------------------------------------------------------------------------\n  input_settings  = { encoding: 'utf-8', }\n  input_path      = PATH.resolve __dirname, '../../test-data/ids.txt'\n  # input_path      = PATH.resolve __dirname, '../../test-data/ids-short.txt'\n  # input_path      = PATH.resolve __dirname, '../../test-data/Unicode-NamesList-tiny.txt'\n  output_path     = PATH.resolve __dirname, '../../test-data/ids-copy.txt'\n\n  #---------------------------------------------------------------------------------------------------------\n  input                     = PS.new_file_source input_path, input_settings\n  # output                    = PS.new_file_sink              output_path\n  # output                    = PS._new_file_sink_using_stps  output_path\n  # output                    = PS._new_file_sink_using_pwf   output_path\n  output                    = PS.new_file_sink output_path\n\n  #---------------------------------------------------------------------------------------------------------\n  pipeline                  = []\n  push                      = pipeline.push.bind pipeline\n  t0                        = null\n  t1                        = null\n  item_count                = 0\n\n\n  #---------------------------------------------------------------------------------------------------------\n  $on_start = ->\n    return PS.map_start ->\n      help 44402, \"start\"\n      PRFLR.start '*'\n      t0 = Date.now()\n      console.profile 'copy-lines' if S.running_in_devtools\n\n  #---------------------------------------------------------------------------------------------------------\n  $on_stop = ->\n    return PS.map_stop ->\n      PRFLR.stop '*'\n      PRFLR.report()\n      console.profileEnd 'copy-lines' if S.running_in_devtools\n      t1              = Date.now()\n      dts             = ( t1 - t0 ) / 1000\n      dts_txt         = format_float dts\n      item_count_txt  = format_integer item_count\n      ips             = item_count / dts\n      ips_txt         = format_float ips\n      help PATH.basename __filename\n      help \"pass-through count: #{S.pass_through_count}\"\n      help \"#{item_count_txt} items; dts: #{dts_txt}, ips: #{ips_txt}\"\n      T.pass \"looks good\"\n      T.end()\n\n  ```\n  function XXX_map (read, map) {\n    //return a readable function!\n    return function (end, cb) {\n      read(end, function (end, data) {\n        debug(20323,rpr(data))\n        cb(end, data != null ? map(data) : null)\n      })\n    }\n  }\n  ```\n\n\n  ```\n  function XXX_through (op, onEnd) {\n    var a = false\n\n    function once (abort) {\n      if(a || !onEnd) return\n      a = true\n      onEnd(abort === true ? null : abort)\n    }\n\n    return function (read) {\n      return function (end, cb) {\n        if(end) once(end)\n        return read(end, function (end, data) {\n          if(!end) op && op(data)\n          else once(end)\n          cb(end, data)\n        })\n      }\n    }\n  }\n  ```\n\n  XXX_through2 = ( on_data, on_stop ) ->\n    has_ended = false\n    collector = []\n\n    once = ( abort ) ->\n      return null if has_ended\n      return null if not on_stop?\n      has_ended = true\n      on_stop if abort is true then null else abort\n      return null\n\n    send = ( data ) -> collector.push data\n\n    return ( read ) ->\n      return ( end, handler ) ->\n        once end if end\n        read end, ( end, data ) ->\n          if end\n            once end\n          else\n            on_data data, send if on_data?\n          if collector.length > 0\n            handler end, d for d in collector\n            collector.length = 0\n          else\n            handler end, null\n          return\n\n\n  #---------------------------------------------------------------------------------------------------------\n  switch S.implementation\n    #.......................................................................................................\n    when 'pull-stream'\n      $as_line            = -> pull.map ( line    ) -> line + '\\n'\n      $as_text            = -> pull.map ( fields  ) -> JSON.stringify fields\n      $count              = -> pull.map ( line    ) -> item_count += +1; return line\n      # $count              = -> pull.map ( line    ) -> item_count += +1; whisper item_count if item_count % 1000 is 0; return line\n      $select_fields      = -> pull.map ( fields  ) -> [ _, glyph, formula, ] = fields; return [ glyph, formula, ]\n      $split_fields       = -> pull.map ( line    ) -> line.split '\\t'\n      $trim               = -> pull.map ( line    ) -> line.trim()\n      $pass               = -> pull.map ( line    ) -> line\n    #.......................................................................................................\n    when 'pipestreams-remit'\n      $as_line            = -> $ ( line,   send ) -> send line + '\\n'\n      $as_text            = -> $ ( fields, send ) -> send JSON.stringify fields\n      $count              = -> $ ( line,   send ) -> item_count += +1; send line\n      # $count              = -> $ ( line,   send ) -> item_count += +1; whisper item_count if item_count % 1000 is 0; send line\n      $select_fields      = -> $ ( fields, send ) -> [ _, glyph, formula, ] = fields; send [ glyph, formula, ]\n      $split_fields       = -> $ ( line,   send ) -> send line.split '\\t'\n      $trim               = -> $ ( line,   send ) -> send line.trim()\n      $pass               = -> $ ( line,   send ) -> send line\n    #.......................................................................................................\n    when 'pipestreams-map'\n      $as_line            = -> PS.map PRFLR.wrap '$as_line',        ( line    ) -> line + '\\n'\n      $as_text            = -> PS.map PRFLR.wrap '$as_text',        ( fields  ) -> JSON.stringify fields\n      $count              = -> PS.map PRFLR.wrap '$count',          ( line    ) -> item_count += +1; return line\n      $select_fields      = -> PS.map PRFLR.wrap '$select_fields',  ( fields  ) -> [ _, glyph, formula, ] = fields; return [ glyph, formula, ]\n      $split_fields       = -> PS.map PRFLR.wrap '$split_fields',   ( line    ) -> line.split '\\t'\n      $trim               = -> PS.map PRFLR.wrap '$trim',           ( line    ) -> line.trim()\n      $pass               = -> PS.map PRFLR.wrap '$pass',           ( line    ) -> line\n      $my_utf8            = -> PS.map PRFLR.wrap '$my_utf8',        ( buffer  ) -> debug buffer; buffer.toString 'utf-8'\n      $show               = -> PS.map PRFLR.wrap '$show',           ( data    ) -> info rpr data; return data\n\n  #.........................................................................................................\n  $filter_empty       = -> PS.$filter PRFLR.wrap '$filter_empty',       ( line   ) -> line.length > 0\n  $filter_comments    = -> PS.$filter PRFLR.wrap '$filter_comments',    ( line   ) -> not line.startsWith '#'\n  $filter_incomplete  = -> PS.$filter PRFLR.wrap '$filter_incomplete',  ( fields ) -> [ a, b, ] = fields; return a? or b?\n\n  #---------------------------------------------------------------------------------------------------------\n  push input\n  push $on_start()\n  # push $utf8()\n  push PRFLR.wrap '$split', $split()\n  # push $show()\n  push $count()\n  push $trim()\n  push $filter_empty()\n  push $filter_comments()\n  # push pull.filter   ( line    ) -> ( /魚/ ).test line\n  push $split_fields()\n  push $select_fields()\n  push $filter_incomplete()\n  # push XXX_through2 ( data, send ) ->\n  #   urge data\n  #   send data\n  #   send data\n  push $as_text()\n  push $as_line()\n  # push ( pull.map ( line ) -> line ) for idx in [ 1 .. S.pass_through_count ] by +1\n  ###\n  ###\n  push $pass() for idx in [ 1 .. S.pass_through_count ] by +1\n  push $on_stop()\n  # push $sink_example()\n  # push output\n  # push $drain ( ( data ) -> urge data ), ( ( P... )-> help P )\n  push PRFLR.wrap '$drain', $drain()\n  pull pipeline...\n\n"
  ]
}