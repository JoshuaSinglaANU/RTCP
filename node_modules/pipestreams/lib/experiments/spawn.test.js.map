{
  "version": 3,
  "file": "spawn.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/spawn.test.coffee"
  ],
  "names": [],
  "mappings": ";AAE4G;EAAA;AAAA,MAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA;;EAC5G,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAZgF;;;EAc5G,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR;;EAC5B,GAAA,GAA4B,OAAA,CAAQ,KAAR,EAjBgF;;;;EAoB5G,EAAA,GAA4B,OAAA,CAAQ,OAAR;;EAC5B,CAAA,CAAE,CAAF,EAAK,MAAL,CAAA,GAA4B,EAAE,CAAC,MAAH,CAAA,CAA5B,EArB4G;;;EAuB5G,EAAA,GAA4B,IAAI,CAAC,UAvB2E;;;;;EA4B5G,GAAG,CAAC,IAAJ,CAAS,SAAT,EAAoB,QAAA,CAAE,CAAF,CAAA;AACpB,QAAA,OAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,MAAA;;;;;IAIE,QAAA,GAAW,QAAA,CAAE,KAAF,CAAA;aACT,IAAA,CAAK,OAAL,EAAc,KAAK,CAAC,OAApB;IADS,EAJb;;;IAQE,OAAA,GAAoB;IACpB,MAAA,GAAoB,EAAE,CAAC,KAAH,CAAS,OAAT,EAAkB;MAAE,QAAF;MAAY,GAAA,EAAK;IAAjB,CAAlB;IACpB,OAAA,GAAoB,EAAE,CAAC,mBAAH,CAAuB,MAAvB,EAA+B,QAAA,CAAA,CAAA;aAAG,CAAC,CAAC,GAAF,CAAA;IAAH,CAA/B,EAVtB;;IAYE,QAAA,GAAW;IACX,QAAQ,CAAC,IAAT,CAAc,MAAd;IACA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,MAAH,CAAY,QAAA,CAAE,IAAF,CAAA;aAAY,OAAA,CAAQ,SAAR,EAAmB,GAAA,CAAI,IAAJ,CAAnB;IAAZ,CAAZ,CAAd;IACA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,OAAH,CAAY,QAAA,CAAE,IAAF,CAAA;aAAY,IAAI,CAAE,CAAF,CAAJ,KAAa;IAAzB,CAAZ,CAAd;IACA,QAAQ,CAAC,IAAT,CAAc,CAAA,CAAY,QAAA,CAAE,IAAF,EAAQ,IAAR,CAAA;aAAkB,IAAA,CAAK,IAAI,CAAE,CAAF,CAAT;IAAlB,CAAZ,CAAd,EAhBF;;;IAmBE,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,QAAH,CAAA,CAAd;IACA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,MAAH,CAAU,QAAA,CAAE,KAAF,CAAA;aAAa,IAAA,CAAK,SAAL,EAAgB,KAAhB;IAAb,CAAV,CAAd;IACA,QAAQ,CAAC,IAAT,CAAc,OAAO,CAAC,GAAR,CAAY,EAAE,CAAC,MAAH,CAAA,CAAZ,CAAd,EArBF;;IAuBE,EAAE,CAAC,IAAH,CAAQ,GAAA,QAAR;AACA,WAAO;EAzBW,CAApB,EA5B4G;;;EAwD5G,GAAG,CAAC,IAAJ,CAAS,SAAT,EAAoB,QAAA,CAAE,CAAF,CAAA;AACpB,QAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,iBAAA,EAAA,mBAAA,EAAA;IAAE,mBAAA,GAAsB;MACpB;QAAC,+BAAD;QAAiC,MAAjC;QAAwC;UAAC,MAAA,EAAO,CAAR;UAAU,QAAA,EAAS,IAAnB;UAAwB,SAAA,EAAU;QAAlC,CAAxC;QAAmF,MAAnF;QAA0F,iCAA1F;OADoB;MAEpB;QAAC,+BAAD;QAAiC,MAAjC;QAAwC;UAAC,MAAA,EAAO,CAAR;UAAU,QAAA,EAAS,IAAnB;UAAwB,SAAA,EAAU;QAAlC,CAAxC;QAAgF,MAAhF;QAAuF,iCAAvF;OAFoB;MAGpB;QAAC,qBAAD;QAAuB,MAAvB;QAA8B;UAAC,MAAA,EAAO,CAAR;UAAU,QAAA,EAAS,IAAnB;UAAwB,SAAA,EAAU;QAAlC,CAA9B;QAAsE,MAAtE;QAA6E,iCAA7E;OAHoB;MAIpB;QAAC,sBAAD;QAAwB,KAAxB;QAA8B;UAAC,MAAA,EAAO,GAAR;UAAY,QAAA,EAAS,IAArB;UAA0B,SAAA,EAAU;QAApC,CAA9B;QAAuF,EAAvF;QAA0F,iCAA1F;OAJoB;MAKpB;QAAC,UAAD;QAAY,IAAZ;QAAiB;UAAC,MAAA,EAAO,GAAR;UAAY,QAAA,EAAS,IAArB;UAA0B,SAAA,EAAU;QAApC,CAAjB;QAA8D,EAA9D;QAAiE,EAAjE;OALoB;MAMpB;QAAC,mFAAD;QAAqF,MAArF;QAA4F;UAAC,MAAA,EAAO,CAAR;UAAU,QAAA,EAAS,IAAnB;UAAwB,SAAA,EAAU;QAAlC,CAA5F;QAAoI,cAApI;QAAmJ,MAAnJ;OANoB;MAOpB;QAAC,wBAAD;QAA0B,KAA1B;QAAgC;UAAC,MAAA,EAAO,CAAR;UAAU,QAAA,EAAS,IAAnB;UAAwB,SAAA,EAAU;QAAlC,CAAhC;QAAwE,EAAxE;QAA2E,OAA3E;OAPoB;MAQpB;QAAC,gGAAD;QAAkG,MAAlG;QAAyG;UAAC,MAAA,EAAO,GAAR;UAAY,QAAA,EAAS,SAArB;UAA+B,SAAA,EAAU;QAAzC,CAAzG;QAA6J,MAA7J;QAAoK,MAApK;OARoB;MASpB;QAAC,YAAD;QAAc,IAAd;QAAmB;UAAC,MAAA,EAAO,GAAR;UAAY,QAAA,EAAS,QAArB;UAA8B,SAAA,EAAU;QAAxC,CAAnB;QAAqE,EAArE;QAAwE,EAAxE;OAToB;MAUpB;QAAC,WAAD;QAAa,KAAb;QAAmB;UAAC,MAAA,EAAO,GAAR;UAAY,QAAA,EAAS,IAArB;UAA0B,SAAA,EAAU;QAApC,CAAnB;QAA4E,EAA5E;QAA+E,uCAA/E;OAVoB;MAWpB;QAAC,UAAD;QAAY,IAAZ;QAAiB;UAAC,MAAA,EAAO,GAAR;UAAY,QAAA,EAAS,IAArB;UAA0B,SAAA,EAAU;QAApC,CAAjB;QAA8D,EAA9D;QAAiE,EAAjE;OAXoB;MAYpB;QAAC,SAAD;QAAW,KAAX;QAAiB;UAAC,MAAA,EAAO,GAAR;UAAY,QAAA,EAAS,IAArB;UAA0B,SAAA,EAAU;QAApC,CAAjB;QAA0E,EAA1E;QAA6E,qCAA7E;OAZoB;MAapB;QAAC,sBAAD;QAAwB,KAAxB;QAA8B;UAAC,MAAA,EAAO,CAAR;UAAU,QAAA,EAAS,IAAnB;UAAwB,SAAA,EAAU;QAAlC,CAA9B;QAAsE,qCAAtE;QAA4G,EAA5G;OAboB;MAcpB;QAAC,oCAAD;QAAsC,MAAtC;QAA6C;UAAC,MAAA,EAAO,CAAR;UAAU,QAAA,EAAS,IAAnB;UAAwB,SAAA,EAAU;QAAlC,CAA7C;QAAqF,UAArF;QAAgG,qCAAhG;OAdoB;MAepB;QAAC,yCAAD;QAA2C,MAA3C;QAAkD;UAAC,MAAA,EAAO,GAAR;UAAY,QAAA,EAAS,SAArB;UAA+B,SAAA,EAAU;QAAzC,CAAlD;QAAsG,UAAtG;QAAiH,qCAAjH;OAfoB;MAgBpB;QAAC,WAAD;QAAa,KAAb;QAAmB;UAAC,MAAA,EAAO,CAAR;UAAU,QAAA,EAAS,IAAnB;UAAwB,SAAA,EAAU;QAAlC,CAAnB;QAA2D,MAA3D;QAAkE,EAAlE;OAhBoB;MAiBpB;QAAC,CAAC,MAAD;QAAQ,MAAR,CAAD;QAAiB,KAAjB;QAAuB;UAAC,MAAA,EAAO,CAAR;UAAU,QAAA,EAAS,IAAnB;UAAwB,SAAA,EAAU;QAAlC,CAAvB;QAA+D,MAA/D;QAAsE,EAAtE;OAjBoB;MAkBpB;QAAC,SAAD;QAAW,KAAX;QAAiB;UAAC,MAAA,EAAO,GAAR;UAAY,QAAA,EAAS,IAArB;UAA0B,SAAA,EAAU;QAApC,CAAjB;QAA0E,EAA1E;QAA6E,qCAA7E;OAlBoB;MAmBpB;QAAC,CAAC,SAAD,CAAD;QAAa,KAAb;QAAmB;UAAC,MAAA,EAAO,GAAR;UAAY,QAAA,EAAS,IAArB;UAA0B,SAAA,EAAU;QAApC,CAAnB;QAA4E,EAA5E;QAA+E,qCAA/E;OAnBoB;MAoBpB;QAAC,CAAC,MAAD;QAAQ,GAAR,CAAD;QAAc,IAAd;QAAmB;UAAC,MAAA,EAAO,CAAR;UAAU,QAAA,EAAS,IAAnB;UAAwB,SAAA,EAAU;QAAlC,CAAnB;QAA8D,EAA9D;QAAiE,EAAjE;OApBoB;MAAxB;;IAuBE,KAAA,GAAQ;IACR,IAAA,GAAQ,QAAA,CAAA,CAAA;MACN,KAAK,CAAC,KAAN,CAAA;MACA,IAAkB,KAAK,CAAC,MAAN,KAAgB,CAAlC;AAAA,eAAO,CAAC,CAAC,GAAF,CAAA,EAAP;;aACA,KAAK,CAAE,CAAF,CAAL,CAAA;IAHM,EAxBV;;;IA8BE,KAAA,qDAAA;;MACK,CAAA,QAAA,CAAE,iBAAF,CAAA;AACP,YAAA,OAAA,EAAA,WAAA,EAAA,YAAA,EAAA,WAAA,EAAA;QAAM,CAAE,OAAF,EAAW,aAAX,EAA0B,YAA1B,EAAwC,WAAxC,EAAqD,WAArD,CAAA,GAAsE;eACtE,KAAK,CAAC,IAAN,CAAW,QAAA,CAAA,CAAA;AACjB,cAAA,UAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA,QAAA,EAAA,KAAA,EAAA,MAAA;;UACQ,KAAA,GAAc;UACd,GAAA,GAAc;UACd,GAAA,GAAc;UACd,IAAA,GAAc;UACd,UAAA,GAAc,MALtB;;UAOQ,OAAA,GAAU,EAAE,CAAC,mBAAH,CAAuB,MAAvB,EAA+B,QAAA,CAAA,CAAA;YACvC,KAAA,GAAU,KAAK,CAAC,IAAN,CAAW,EAAX;YACV,GAAA,GAAU,GAAG,CAAC,IAAJ,CAAS,IAAT;YACV,GAAA,GAAU,GAAG,CAAC,IAAJ,CAAS,IAAT;YACV,CAAC,CAAC,EAAF,CAAK,UAAL;YACA,CAAC,CAAC,KAAF,CAAQ,KAAR,EAAgB,aAAhB,EAAgC,uBAAhC;YACA,CAAC,CAAC,EAAF,CAAO,GAAG,CAAC,MAAJ,CAAY,IAAZ,EAAkB,YAAlB,CAAP,EAAyC,sBAAzC;YACA,CAAC,CAAC,KAAF,CAAQ,GAAR,EAAgB,WAAhB,EAAgC,qBAAhC;YACA,CAAC,CAAC,KAAF,CAAQ,GAAR,EAAgB,WAAhB,EAAgC,qBAAhC,EAPV;;mBASU,IAAA,CAAA;UAVuC,CAA/B,EAPlB;;UAmBQ,MAAA,GAAY,EAAE,CAAC,KAAH,CAAS,OAAT;UACZ,QAAA,GAAY;UACZ,QAAQ,CAAC,IAAT,CAAc,MAAd;UACA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,MAAH,CAAU,QAAA,CAAE,CAAE,GAAF,EAAO,KAAP,CAAF,CAAA;AACtB,oBAAO,GAAP;AAAA,mBACO,SADP;uBACgC,KAAK,CAAC,IAAN,CAAW,GAAX;AADhC,mBAEO,QAFP;AAAA,mBAEiB,QAFjB;uBAEgC,KAAK,CAAC,IAAN,CAAW,GAAX;AAFhC,mBAGO,MAHP;uBAGgC,KAAK,CAAC,IAAN,CAAW,GAAX;AAHhC;uBAIgC,KAAK,CAAC,IAAN,CAAW,GAAX;AAJhC;UADsB,CAAV,CAAd;UAMA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,MAAH,CAAU,QAAA,CAAE,CAAE,GAAF,EAAO,KAAP,CAAF,CAAA;YAAuB,IAAoB,GAAA,KAAO,SAAP,IAAqB,KAAA,KAAS,OAAlD;qBAAA,UAAA,GAAa,KAAb;;UAAvB,CAAV,CAAd;UACA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,MAAH,CAAU,QAAA,CAAE,CAAE,GAAF,EAAO,KAAP,CAAF,CAAA;AACtB,oBAAO,GAAP;AAAA,mBACO,QADP;uBACsB,GAAG,CAAC,IAAJ,CAAS,KAAT;AADtB,mBAEO,QAFP;uBAEsB,GAAG,CAAC,IAAJ,CAAS,KAAT;AAFtB,mBAGO,MAHP;uBAGsB,IAAA,GAAO;AAH7B;UADsB,CAAV,CAAd,EA7BR;;UAmCQ,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,QAAH,CAAA,CAAd;UACA,QAAQ,CAAC,IAAT,CAAc,OAAO,CAAC,GAAR,CAAY,EAAE,CAAC,MAAH,CAAA,CAAZ,CAAd;iBACA,EAAE,CAAC,IAAH,CAAQ,GAAA,QAAR;QAtCS,CAAX;MAFC,CAAA,EAAE;IADP,CA9BF;;IAyEE,KAAK,CAAE,CAAF,CAAL,CAAA,EAzEF;;AA2EE,WAAO;EA5EW,CAApB,EAxD4G;;;EAuI5G,GAAG,CAAC,IAAJ,CAAS,SAAT,EAAoB,QAAA,CAAE,CAAF,CAAA;AACpB,QAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,iBAAA,EAAA,mBAAA,EAAA;IAAE,mBAAA,GAAsB;MACpB;QAAC,yCAAD;QAA2C,KAA3C;QAAiD;UAAC,MAAA,EAAO,GAAR;UAAY,QAAA,EAAS,SAArB;UAA+B,SAAA,EAAU,SAAzC;UAAmD,OAAA,EAAQ;QAA3D,CAAjD;QAAmJ,UAAnJ;QAA8J,EAA9J;OADoB;MAEpB;QAAC,gCAAD;QAAkC,KAAlC;QAAwC;UAAC,MAAA,EAAO,GAAR;UAAY,QAAA,EAAS,SAArB;UAA+B,SAAA,EAAU,SAAzC;UAAmD,OAAA,EAAQ;QAA3D,CAAxC;QAAyG,UAAzG;QAAoH,EAApH;OAFoB;MAGpB;QAAC,2BAAD;QAA6B,KAA7B;QAAmC;UAAC,MAAA,EAAO,CAAR;UAAU,QAAA,EAAS,IAAnB;UAAwB,SAAA,EAAU,OAAlC;UAA0C,OAAA,EAAQ;QAAlD,CAAnC;QAA2F,UAA3F;QAAsG,EAAtG;OAHoB;MAIpB;QAAC,2BAAD;QAA6B,KAA7B;QAAmC;UAAC,MAAA,EAAO,CAAR;UAAU,QAAA,EAAS,IAAnB;UAAwB,SAAA,EAAU,IAAlC;UAAuC,OAAA,EAAQ;QAA/C,CAAnC;QAAwF,UAAxF;QAAmG,EAAnG;OAJoB;MAKpB;QAAC,sBAAD;QAAwB,IAAxB;QAA6B;UAAC,MAAA,EAAO,CAAR;UAAU,QAAA,EAAS,IAAnB;UAAwB,SAAA,EAAU,IAAlC;UAAuC,OAAA,EAAQ;QAA/C,CAA7B;QAAwF,EAAxF;QAA2F,EAA3F;OALoB;MAAxB;;IAQE,KAAA,GAAQ;IACR,IAAA,GAAQ,QAAA,CAAA,CAAA;MACN,KAAK,CAAC,KAAN,CAAA;MACA,IAAkB,KAAK,CAAC,MAAN,KAAgB,CAAlC;AAAA,eAAO,CAAC,CAAC,GAAF,CAAA,EAAP;;aACA,KAAK,CAAE,CAAF,CAAL,CAAA;IAHM,EATV;;;IAeE,KAAA,qDAAA;;MACK,CAAA,QAAA,CAAE,iBAAF,CAAA;AACP,YAAA,OAAA,EAAA,WAAA,EAAA,YAAA,EAAA,WAAA,EAAA;QAAM,CAAE,OAAF,EAAW,aAAX,EAA0B,YAA1B,EAAwC,WAAxC,EAAqD,WAArD,CAAA,GAAsE;eACtE,KAAK,CAAC,IAAN,CAAW,QAAA,CAAA,CAAA;AACjB,cAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA,QAAA,EAAA,KAAA,EAAA;UAAQ,KAAA,GAAc;UACd,GAAA,GAAc;UACd,GAAA,GAAc;UACd,IAAA,GAAc,OAHtB;;UAKQ,OAAA,GAAY,EAAE,CAAC,mBAAH,CAAuB,MAAvB,EAA+B,QAAA,CAAA,CAAA;YACzC,KAAA,GAAQ,KAAK,CAAC,IAAN,CAAW,EAAX;YACR,GAAA,GAAQ,GAAG,CAAC,IAAJ,CAAS,IAAT;YACR,GAAA,GAAQ,GAAG,CAAC,IAAJ,CAAS,IAAT;YACR,CAAC,CAAC,KAAF,CAAQ,KAAR,EAAgB,aAAhB,EAAwC,uBAAxC;YACA,CAAC,CAAC,EAAF,CAAO,GAAG,CAAC,MAAJ,CAAW,IAAX,EAAiB,YAAjB,CAAP,EAAwC,sBAAxC;YACA,CAAC,CAAC,KAAF,CAAQ,GAAR,EAAgB,WAAhB,EAAgC,qBAAhC;YACA,CAAC,CAAC,KAAF,CAAQ,GAAR,EAAgB,WAAhB,EAAgC,qBAAhC,EANV;;mBAQU,IAAA,CAAA;UATyC,CAA/B,EALpB;;UAgBQ,MAAA,GAAY,EAAE,CAAC,KAAH,CAAS,OAAT,EAAkB;YAAE,aAAA,EAAe;UAAjB,CAAlB;UACZ,QAAA,GAAY;UACZ,QAAQ,CAAC,IAAT,CAAc,MAAd;UACA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,MAAH,CAAU,QAAA,CAAE,CAAE,GAAF,EAAO,KAAP,CAAF,CAAA;AACtB,oBAAO,GAAP;AAAA,mBACO,SADP;uBACgC,KAAK,CAAC,IAAN,CAAW,GAAX;AADhC,mBAEO,QAFP;AAAA,mBAEiB,QAFjB;uBAEgC,KAAK,CAAC,IAAN,CAAW,GAAX;AAFhC,mBAGO,MAHP;uBAGgC,KAAK,CAAC,IAAN,CAAW,GAAX;AAHhC;uBAIgC,KAAK,CAAC,IAAN,CAAW,GAAX;AAJhC;UADsB,CAAV,CAAd;UAMA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,MAAH,CAAU,QAAA,CAAE,CAAE,GAAF,EAAO,KAAP,CAAF,CAAA;AACtB,oBAAO,GAAP;AAAA,mBACO,QADP;uBACsB,GAAG,CAAC,IAAJ,CAAS,KAAT;AADtB,mBAEO,QAFP;uBAEsB,GAAG,CAAC,IAAJ,CAAS,KAAT;AAFtB,mBAGO,MAHP;uBAGsB,IAAA,GAAO;AAH7B;UADsB,CAAV,CAAd,EAzBR;;;UAgCQ,QAAQ,CAAC,IAAT,CAAc,OAAO,CAAC,GAAR,CAAY,EAAE,CAAC,MAAH,CAAA,CAAZ,CAAd;iBACA,EAAE,CAAC,IAAH,CAAQ,GAAA,QAAR;QAlCS,CAAX;MAFC,CAAA,EAAE;IADP,CAfF;;IAsDE,KAAK,CAAE,CAAF,CAAL,CAAA,EAtDF;;AAwDE,WAAO;EAzDW,CAApB,EAvI4G;;;EAmM5G,GAAG,CAAC,IAAJ,CAAS,iBAAT,EAA4B,QAAA,CAAE,CAAF,CAAA;AAC5B,QAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,iBAAA,EAAA,mBAAA,EAAA;IAAE,mBAAA,GAAsB;MACpB;QAAC,yCAAD;QAA2C;UAAC,SAAA,EAAU,yCAAX;UAAqD,QAAA,EAAS,CAAC,UAAD,CAA9D;UAA2E,QAAA,EAAS,CAAC,qCAAD,CAApF;UAA4H,MAAA,EAAO,GAAnI;UAAuI,QAAA,EAAS,SAAhJ;UAA0J,SAAA,EAAU;QAApK,CAA3C;OADoB;MAEpB;QAAC,gCAAD;QAAkC;UAAC,SAAA,EAAU,gCAAX;UAA4C,QAAA,EAAS,CAAC,UAAD,CAArD;UAAkE,QAAA,EAAS,EAA3E;UAA8E,MAAA,EAAO,GAArF;UAAyF,QAAA,EAAS,SAAlG;UAA4G,SAAA,EAAU;QAAtH,CAAlC;OAFoB;MAGpB;QAAC,2BAAD;QAA6B;UAAC,SAAA,EAAU,2BAAX;UAAuC,QAAA,EAAS,CAAC,UAAD,CAAhD;UAA6D,QAAA,EAAS,EAAtE;UAAyE,MAAA,EAAO,CAAhF;UAAkF,QAAA,EAAS,IAA3F;UAAgG,SAAA,EAAU;QAA1G,CAA7B;OAHoB;MAIpB;QAAC,4BAAD;QAA8B;UAAC,SAAA,EAAU,4BAAX;UAAwC,QAAA,EAAS,CAAC,UAAD,CAAjD;UAA8D,QAAA,EAAS,CAAC,qCAAD,CAAvE;UAA+G,MAAA,EAAO,GAAtH;UAA0H,QAAA,EAAS,IAAnI;UAAwI,SAAA,EAAU;QAAlJ,CAA9B;OAJoB;MAKpB;QAAC,sBAAD;QAAwB;UAAC,SAAA,EAAU,sBAAX;UAAkC,QAAA,EAAS,EAA3C;UAA8C,QAAA,EAAS,CAAC,UAAD,CAAvD;UAAoE,MAAA,EAAO,CAA3E;UAA6E,QAAA,EAAS,IAAtF;UAA2F,SAAA,EAAU;QAArG,CAAxB;OALoB;MAAxB;;IAQE,KAAA,GAAQ;IACR,IAAA,GAAQ,QAAA,CAAA,CAAA;MACN,KAAK,CAAC,KAAN,CAAA;MACA,IAAkB,KAAK,CAAC,MAAN,KAAgB,CAAlC;AAAA,eAAO,CAAC,CAAC,GAAF,CAAA,EAAP;;aACA,KAAK,CAAE,CAAF,CAAL,CAAA;IAHM,EATV;;;IAeE,KAAA,qDAAA;;MACK,CAAA,QAAA,CAAE,iBAAF,CAAA;AACP,YAAA,OAAA,EAAA;QAAM,CAAE,KAAF,EAAS,OAAT,CAAA,GAAsB;eACtB,KAAK,CAAC,IAAN,CAAW,QAAA,CAAA,CAAA,EAAA;;iBAET,IAAA,CAAK,SAAA,CAAE,MAAF,CAAA;AACb,gBAAA,MAAA;;YACU,MAAA,GAAS,CAAA,MAAM,EAAE,CAAC,aAAH,CAAiB,KAAjB,EAAwB,MAAxB,CAAN;YACT,CAAC,CAAC,EAAF,CAAO,GAAG,CAAC,MAAJ,CAAW,MAAX,EAAmB,OAAnB,CAAP,EAAqC,oBAArC,EAFV;;mBAIU,IAAA,CAAA;UALG,CAAL;QAFS,CAAX;MAFC,CAAA,EAAE;IADP,CAfF;;IA2BE,KAAK,CAAE,CAAF,CAAL,CAAA,EA3BF;;AA6BE,WAAO;EA9BmB,CAA5B,EAnM4G;;;EAoO5G,GAAG,CAAC,IAAJ,CAAS,kCAAT,EAA6C,QAAA,CAAE,CAAF,CAAA;AAC7C,QAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,iBAAA,EAAA,mBAAA,EAAA;IAAE,mBAAA,GAAsB;MACpB;QAAC,yCAAD;QAA2C;UAAC,SAAA,EAAU,yCAAX;UAAqD,QAAA,EAAS,EAA9D;UAAiE,QAAA,EAAS,EAA1E;UAA6E,MAAA,EAAO,GAApF;UAAwF,QAAA,EAAS,SAAjG;UAA2G,SAAA,EAAU;QAArH,CAA3C;QAA2K,CAAC,CAAC,QAAD;QAAU,qCAAV,CAAD;QAAkD,CAAC,QAAD;QAAU,UAAV,CAAlD,CAA3K;OADoB;MAEpB;QAAC,gCAAD;QAAkC;UAAC,SAAA,EAAU,gCAAX;UAA4C,QAAA,EAAS,EAArD;UAAwD,QAAA,EAAS,EAAjE;UAAoE,MAAA,EAAO,GAA3E;UAA+E,QAAA,EAAS,SAAxF;UAAkG,SAAA,EAAU;QAA5G,CAAlC;QAAyJ,CAAC,CAAC,QAAD;QAAU,UAAV,CAAD,CAAzJ;OAFoB;MAGpB;QAAC,2BAAD;QAA6B;UAAC,SAAA,EAAU,2BAAX;UAAuC,QAAA,EAAS,EAAhD;UAAmD,QAAA,EAAS,EAA5D;UAA+D,MAAA,EAAO,CAAtE;UAAwE,QAAA,EAAS,IAAjF;UAAsF,SAAA,EAAU;QAAhG,CAA7B;QAAsI,CAAC,CAAC,QAAD;QAAU,UAAV,CAAD,CAAtI;OAHoB;MAIpB;QAAC,4BAAD;QAA8B;UAAC,SAAA,EAAU,4BAAX;UAAwC,QAAA,EAAS,EAAjD;UAAoD,QAAA,EAAS,EAA7D;UAAgE,MAAA,EAAO,GAAvE;UAA2E,QAAA,EAAS,IAApF;UAAyF,SAAA,EAAU;QAAnG,CAA9B;QAAsJ,CAAC,CAAC,QAAD;QAAU,qCAAV,CAAD;QAAkD,CAAC,QAAD;QAAU,UAAV,CAAlD,CAAtJ;OAJoB;MAKpB;QAAC,sBAAD;QAAwB;UAAC,SAAA,EAAU,sBAAX;UAAkC,QAAA,EAAS,EAA3C;UAA8C,QAAA,EAAS,EAAvD;UAA0D,MAAA,EAAO,CAAjE;UAAmE,QAAA,EAAS,IAA5E;UAAiF,SAAA,EAAU;QAA3F,CAAxB;QAAyH,CAAC,CAAC,QAAD;QAAU,UAAV,CAAD,CAAzH;OALoB;MAAxB;;IAQE,KAAA,GAAQ;IACR,IAAA,GAAQ,QAAA,CAAA,CAAA;MACN,IAAkB,KAAK,CAAC,MAAN,GAAe,CAAjC;AAAA,eAAO,CAAC,CAAC,GAAF,CAAA,EAAP;;aACA,KAAK,CAAC,KAAN,CAAA,CAAA,CAAA;IAFM,EATV;;IAaE,KAAA,qDAAA;;MACK,CAAA,QAAA,CAAE,iBAAF,CAAA;AACP,YAAA,cAAA,EAAA,KAAA,EAAA;QAAM,CAAE,KAAF,EAAS,aAAT,EAAwB,cAAxB,CAAA,GAA4C;eAC5C,KAAK,CAAC,IAAN,CAAW,QAAA,CAAA,CAAA,EAAA;;;iBAGT,IAAA,CAAK,SAAA,CAAE,MAAF,CAAA;AACb,gBAAA,MAAA,EAAA,OAAA,EAAA;YAAU,MAAA,GAAS;YACT,OAAA,GAAU,QAAA,CAAE,KAAF,CAAA;qBAAa,MAAM,CAAC,IAAP,CAAY,KAAZ;YAAb;YACV,KAAA,GAAU,CAAA,MAAM,EAAE,CAAC,aAAH,CAAiB,KAAjB,EAAwB,CAAE,OAAF,CAAxB,EAAsC,MAAtC,CAAN;YACV,MAAM,CAAC,IAAP,CAAA;YACA,CAAC,CAAC,EAAF,CAAO,GAAG,CAAC,MAAJ,CAAW,KAAX,EAAmB,aAAnB,CAAP,EAA6C,yBAA7C;YACA,CAAC,CAAC,EAAF,CAAO,GAAG,CAAC,MAAJ,CAAW,MAAX,EAAmB,cAAnB,CAAP,EAA6C,2BAA7C,EALV;;mBAOU,IAAA,CAAA;UARG,CAAL;QAHS,CAAX;MAFC,CAAA,EAAE;IADP,CAbF;;IA6BE,IAAA,CAAA,EA7BF;;AA+BE,WAAO;EAhCoC,CAA7C;AApO4G",
  "sourcesContent": [
    "\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPESTREAMS/TESTS/SPAWN'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nOS                        = require 'os'\nTAP                       = require 'tap'\n# TAP                       = require 'tape'\n#...........................................................................................................\nPS                        = require '../..'\n{ $, $async, }            = PS.export()\n#...........................................................................................................\njr                        = JSON.stringify\n# { step, }                 = require 'coffeenode-suspend'\n\n\n#-----------------------------------------------------------------------------------------------------------\nTAP.test \"spawn 1\", ( T ) ->\n# do ->\n  # new_pushable              = require 'pull-pushable'\n  # source            = new_pushable()\n  #.........................................................................................................\n  on_error = ( error ) ->\n    warn '20191', error.message\n      # throw error\n  #.........................................................................................................\n  command           = 'ls -AlF'\n  source            = PS.spawn command, { on_error, cwd: '/tmp', }\n  on_stop           = PS.new_event_collector 'stop', -> T.end()\n  #.........................................................................................................\n  pipeline = []\n  pipeline.push source\n  pipeline.push PS.$watch   ( data ) -> whisper '10901-1', rpr data\n  pipeline.push PS.$filter  ( data ) -> data[ 0 ] is 'stdout'\n  pipeline.push $           ( data, send ) -> send data[ 1 ]\n  # pipeline.push PS.$split()\n  # pipeline.push PS.$show title: '==='\n  pipeline.push PS.$collect()\n  pipeline.push PS.$watch ( lines ) -> help '10901-2', lines\n  pipeline.push on_stop.add PS.$drain()\n  #.........................................................................................................\n  PS.pull pipeline...\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nTAP.test \"spawn 2\", ( T ) ->\n  probes_and_matchers = [\n    [\"xxx ; echo \\\"helo\\\" && exit 1\",\"CDDX\",{\"code\":1,\"signal\":null,\"comment\":\"error\"},\"helo\",\"/bin/sh: xxx: command not found\"]\n    [\"xxx ; echo \\\"helo\\\" && exit 0\",\"CDDX\",{\"code\":0,\"signal\":null,\"comment\":\"ok\"},\"helo\",\"/bin/sh: xxx: command not found\"]\n    [\"xxx ; echo \\\"helo\\\"\",\"CDDX\",{\"code\":0,\"signal\":null,\"comment\":\"ok\"},\"helo\",\"/bin/sh: xxx: command not found\"]\n    [\"xxx && echo \\\"helo\\\"\",\"CDX\",{\"code\":127,\"signal\":null,\"comment\":\"command not found\"},\"\",\"/bin/sh: xxx: command not found\"]\n    [\"exit 111\",\"CX\",{\"code\":111,\"signal\":null,\"comment\":\"error\"},\"\",\"\"]\n    [\"ls package.json && echo_to_stderr() { cat <<< \\\"$@\\\" 1>&2; }; echo_to_stderr what\",\"CDDX\",{\"code\":0,\"signal\":null,\"comment\":\"ok\"},\"package.json\",\"what\"]\n    [\"( >&2 echo \\\"error\\\" )\",\"CDX\",{\"code\":0,\"signal\":null,\"comment\":\"ok\"},\"\",\"error\"]\n    [\"echo_to_stderr() { cat <<< \\\"$@\\\" 1>&2; }; echo_to_stderr what; echo else; sleep 1; kill -9 $$\",\"CDDX\",{\"code\":137,\"signal\":\"SIGKILL\",\"comment\":\"SIGKILL\"},\"else\",\"what\"]\n    [\"kill -2 $$\",\"CX\",{\"code\":130,\"signal\":\"SIGINT\",\"comment\":\"SIGINT\"},\"\",\"\"]\n    [\"/dev/null\",\"CDX\",{\"code\":126,\"signal\":null,\"comment\":\"permission denied\"},\"\",\"/bin/sh: /dev/null: Permission denied\"]\n    [\"exit 130\",\"CX\",{\"code\":130,\"signal\":null,\"comment\":\"error\"},\"\",\"\"]\n    [\"bonkers\",\"CDX\",{\"code\":127,\"signal\":null,\"comment\":\"command not found\"},\"\",\"/bin/sh: bonkers: command not found\"]\n    [\"bonkers 2>&1; exit 0\",\"CDX\",{\"code\":0,\"signal\":null,\"comment\":\"ok\"},\"/bin/sh: bonkers: command not found\",\"\"]\n    [\"bonkers; echo \\\"success!\\\"; exit 0\",\"CDDX\",{\"code\":0,\"signal\":null,\"comment\":\"ok\"},\"success!\",\"/bin/sh: bonkers: command not found\"]\n    [\"bonkers; echo \\\"success!\\\"; kill -27 $$\",\"CDDX\",{\"code\":155,\"signal\":\"SIGPROF\",\"comment\":\"SIGPROF\"},\"success!\",\"/bin/sh: bonkers: command not found\"]\n    [\"echo helo\",\"CDX\",{\"code\":0,\"signal\":null,\"comment\":\"ok\"},\"helo\",\"\"]\n    [[\"echo\",\"helo\"],\"CDX\",{\"code\":0,\"signal\":null,\"comment\":\"ok\"},\"helo\",\"\"]\n    [\"bonkers\",\"CDX\",{\"code\":127,\"signal\":null,\"comment\":\"command not found\"},\"\",\"/bin/sh: bonkers: command not found\"]\n    [[\"bonkers\"],\"CDX\",{\"code\":127,\"signal\":null,\"comment\":\"command not found\"},\"\",\"/bin/sh: bonkers: command not found\"]\n    [[\"exit\",\"2\"],\"CX\",{\"code\":2,\"signal\":null,\"comment\":\"error\"},\"\",\"\"]\n    ]\n  #.........................................................................................................\n  tasks = []\n  next  = ->\n    tasks.shift()\n    return T.end() if tasks.length is 0\n    tasks[ 0 ]()\n    # tasks[ 13 ]()\n  #.........................................................................................................\n  for probe_and_matcher in probes_and_matchers\n    do ( probe_and_matcher ) ->\n      [ command, shape_matcher, exit_matcher, out_matcher, err_matcher, ] = probe_and_matcher\n      tasks.push ->\n        # echo '-----------------------------------------------------------------'\n        shape       = []\n        out         = []\n        err         = []\n        exit        = undefined\n        command_ok  = no\n        #...................................................................................................\n        on_stop = PS.new_event_collector 'stop', ->\n          shape   = shape.join ''\n          out     = out.join '\\n'\n          err     = err.join '\\n'\n          T.ok command_ok\n          T.equal shape,  shape_matcher,  \"shape,  shape_matcher\"\n          T.ok ( CND.equals  exit, exit_matcher ), \"exit,   exit_matcher\"\n          T.equal out,    out_matcher,    \"out,    out_matcher\"\n          T.equal err,    err_matcher,    \"err,    err_matcher\"\n          # urge '20911', jr [ command, shape, exit, out, err, ]\n          next()\n        #...................................................................................................\n        source    = PS.spawn command\n        pipeline  = []\n        pipeline.push source\n        pipeline.push PS.$watch ( [ key, value, ] ) ->\n          switch key\n            when 'command'          then  shape.push 'C'\n            when 'stdout', 'stderr' then  shape.push 'D'\n            when 'exit'             then  shape.push 'X'\n            else                          shape.push '?'\n        pipeline.push PS.$watch ( [ key, value, ] ) -> command_ok = yes if key is 'command' and value is command\n        pipeline.push PS.$watch ( [ key, value, ] ) ->\n          switch key\n            when 'stdout' then  out.push value\n            when 'stderr' then  err.push value\n            when 'exit'   then  exit = value\n        # pipeline.push PS.$show()\n        pipeline.push PS.$collect()\n        pipeline.push on_stop.add PS.$drain()\n        PS.pull pipeline...\n  #.........................................................................................................\n  tasks[ 0 ]()\n  # tasks[ 13 ]()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nTAP.test \"spawn 3\", ( T ) ->\n  probes_and_matchers = [\n    [\"bonkers; echo \\\"success!\\\"; kill -27 $$\",\"CDX\",{\"code\":155,\"signal\":\"SIGPROF\",\"comment\":\"SIGPROF\",\"error\":\"/bin/sh: bonkers: command not found\"},\"success!\",\"\"]\n    [\"echo \\\"success!\\\"; kill -27 $$\",\"CDX\",{\"code\":155,\"signal\":\"SIGPROF\",\"comment\":\"SIGPROF\",\"error\":null},\"success!\",\"\"]\n    [\"echo \\\"success!\\\"; exit 1\",\"CDX\",{\"code\":1,\"signal\":null,\"comment\":\"error\",\"error\":null},\"success!\",\"\"]\n    [\"echo \\\"success!\\\"; exit 0\",\"CDX\",{\"code\":0,\"signal\":null,\"comment\":\"ok\",\"error\":null},\"success!\",\"\"]\n    [\"1>&2 echo 'problem!'\",\"CX\",{\"code\":0,\"signal\":null,\"comment\":\"ok\",\"error\":\"problem!\"},\"\",\"\"]\n    ]\n  #.........................................................................................................\n  tasks = []\n  next  = ->\n    tasks.shift()\n    return T.end() if tasks.length is 0\n    tasks[ 0 ]()\n    # tasks[ 13 ]()\n  #.........................................................................................................\n  for probe_and_matcher in probes_and_matchers\n    do ( probe_and_matcher ) ->\n      [ command, shape_matcher, exit_matcher, out_matcher, err_matcher, ] = probe_and_matcher\n      tasks.push ->\n        shape       = []\n        out         = []\n        err         = []\n        exit        = undefined\n        #...................................................................................................\n        on_stop   = PS.new_event_collector 'stop', ->\n          shape = shape.join ''\n          out   = out.join '\\n'\n          err   = err.join '\\n'\n          T.equal shape,  shape_matcher,          \"shape,  shape_matcher\"\n          T.ok ( CND.equals exit, exit_matcher ), \"exit,   exit_matcher\"\n          T.equal out,    out_matcher,    \"out,    out_matcher\"\n          T.equal err,    err_matcher,    \"err,    err_matcher\"\n          # debug jr [ command, shape, exit, out, err, ]\n          next()\n        #...................................................................................................\n        source    = PS.spawn command, { error_to_exit: yes, }\n        pipeline  = []\n        pipeline.push source\n        pipeline.push PS.$watch ( [ key, value, ] ) ->\n          switch key\n            when 'command'          then  shape.push 'C'\n            when 'stdout', 'stderr' then  shape.push 'D'\n            when 'exit'             then  shape.push 'X'\n            else                          shape.push '?'\n        pipeline.push PS.$watch ( [ key, value, ] ) ->\n          switch key\n            when 'stdout' then  out.push value\n            when 'stderr' then  err.push value\n            when 'exit'   then  exit = value\n        # pipeline.push PS.$collect()\n        # pipeline.push PS.$show()\n        pipeline.push on_stop.add PS.$drain()\n        PS.pull pipeline...\n  #.........................................................................................................\n  tasks[ 0 ]()\n  # tasks[ 13 ]()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nTAP.test \"spawn_collect 1\", ( T ) ->\n  probes_and_matchers = [\n    [\"bonkers; echo \\\"success!\\\"; kill -27 $$\",{\"command\":\"bonkers; echo \\\"success!\\\"; kill -27 $$\",\"stdout\":[\"success!\"],\"stderr\":[\"/bin/sh: bonkers: command not found\"],\"code\":155,\"signal\":\"SIGPROF\",\"comment\":\"SIGPROF\"}]\n    [\"echo \\\"success!\\\"; kill -27 $$\",{\"command\":\"echo \\\"success!\\\"; kill -27 $$\",\"stdout\":[\"success!\"],\"stderr\":[],\"code\":155,\"signal\":\"SIGPROF\",\"comment\":\"SIGPROF\"}]\n    [\"echo \\\"success!\\\"; exit 1\",{\"command\":\"echo \\\"success!\\\"; exit 1\",\"stdout\":[\"success!\"],\"stderr\":[],\"code\":1,\"signal\":null,\"comment\":\"error\"}]\n    [\"echo \\\"success!\\\"; bonkers\",{\"command\":\"echo \\\"success!\\\"; bonkers\",\"stdout\":[\"success!\"],\"stderr\":[\"/bin/sh: bonkers: command not found\"],\"code\":127,\"signal\":null,\"comment\":\"command not found\"}]\n    [\"1>&2 echo 'problem!'\",{\"command\":\"1>&2 echo 'problem!'\",\"stdout\":[],\"stderr\":[\"problem!\"],\"code\":0,\"signal\":null,\"comment\":\"ok\"}]\n    ]\n  #.........................................................................................................\n  tasks = []\n  next  = ->\n    tasks.shift()\n    return T.end() if tasks.length is 0\n    tasks[ 0 ]()\n    # tasks[ 13 ]()\n  #.........................................................................................................\n  for probe_and_matcher in probes_and_matchers\n    do ( probe_and_matcher ) ->\n      [ probe, matcher, ] = probe_and_matcher\n      tasks.push ->\n        #...................................................................................................\n        step ( resume ) ->\n          #.................................................................................................\n          result = yield PS.spawn_collect probe, resume\n          T.ok ( CND.equals result, matcher ), \"result and matcher\"\n          # urge jr [ probe, result, ]\n          next()\n  #.........................................................................................................\n  tasks[ 0 ]()\n  # tasks[ 13 ]()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nTAP.test \"spawn_collect with data callback\", ( T ) ->\n  probes_and_matchers = [\n    [\"bonkers; echo \\\"success!\\\"; kill -27 $$\",{\"command\":\"bonkers; echo \\\"success!\\\"; kill -27 $$\",\"stdout\":[],\"stderr\":[],\"code\":155,\"signal\":\"SIGPROF\",\"comment\":\"SIGPROF\"},[[\"stderr\",\"/bin/sh: bonkers: command not found\"],[\"stdout\",\"success!\"]]]\n    [\"echo \\\"success!\\\"; kill -27 $$\",{\"command\":\"echo \\\"success!\\\"; kill -27 $$\",\"stdout\":[],\"stderr\":[],\"code\":155,\"signal\":\"SIGPROF\",\"comment\":\"SIGPROF\"},[[\"stdout\",\"success!\"]]]\n    [\"echo \\\"success!\\\"; exit 1\",{\"command\":\"echo \\\"success!\\\"; exit 1\",\"stdout\":[],\"stderr\":[],\"code\":1,\"signal\":null,\"comment\":\"error\"},[[\"stdout\",\"success!\"]]]\n    [\"echo \\\"success!\\\"; bonkers\",{\"command\":\"echo \\\"success!\\\"; bonkers\",\"stdout\":[],\"stderr\":[],\"code\":127,\"signal\":null,\"comment\":\"command not found\"},[[\"stderr\",\"/bin/sh: bonkers: command not found\"],[\"stdout\",\"success!\"]]]\n    [\"1>&2 echo 'problem!'\",{\"command\":\"1>&2 echo 'problem!'\",\"stdout\":[],\"stderr\":[],\"code\":0,\"signal\":null,\"comment\":\"ok\"},[[\"stderr\",\"problem!\"]]]\n    ]\n  #.........................................................................................................\n  tasks = []\n  next  = ->\n    return T.end() if tasks.length < 1\n    tasks.shift()()\n  #.........................................................................................................\n  for probe_and_matcher in probes_and_matchers\n    do ( probe_and_matcher ) ->\n      [ probe, reply_matcher, events_matcher, ] = probe_and_matcher\n      tasks.push ->\n        #...................................................................................................\n        # echo '---------------------------------------------------------------------------'\n        step ( resume ) ->\n          events = []\n          on_data = ( event ) -> events.push event\n          reply   = yield PS.spawn_collect probe, { on_data, }, resume\n          events.sort()\n          T.ok ( CND.equals reply,  reply_matcher   ), \"reply and reply_matcher\"\n          T.ok ( CND.equals events, events_matcher  ), \"events and events_matcher\"\n          # urge jr [ probe, reply, events, ]\n          next()\n  #.........................................................................................................\n  next()\n  # tasks[ 0 ]()\n  return null\n\n\n\n"
  ]
}