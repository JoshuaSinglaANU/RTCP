{
  "version": 3,
  "file": "demo.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/demo.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPESTREAMS/DEMO'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\nPS                        = require '../..'\n{ $\n  $watch }                = PS.export()\nfirst                     = Symbol 'first'\nlast                      = Symbol 'last'\nfirst                     = Symbol 'first'\nlast                      = Symbol 'last'\nbetween                   = Symbol 'between'\nafter                     = Symbol 'after'\nbefore                    = Symbol 'before'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@$show_signals = -> $ { first, last, between, after, before, }, ( d, send ) =>\n  info d\n  send d\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_signals = -> new Promise ( resolve, reject ) =>\n  source    = PS.new_push_source()\n  pipeline  = []\n  pipeline.push source\n  pipeline.push @$show()\n  pipeline.push PS.$drain resolve\n  PS.pull pipeline...\n  for idx in [ 1 .. 5 ]\n    source.send idx\n  source.end()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$wrapsignals = ->\n  ### NOTE: this functionality has been implemented in PipeDreams ###\n  is_first  = true\n  prv_d     = null\n  return $ { last, }, ( d, send ) =>\n    if d is last\n      if prv_d?\n        prv_d.first = true if is_first\n        prv_d.last  = true\n        send prv_d\n    else\n      if prv_d?\n        send prv_d\n      prv_d       = { value: d, }\n      prv_d.first = true if is_first\n      is_first    = false\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_wrapsignals = -> new Promise ( resolve, reject ) =>\n  source    = PS.new_push_source()\n  pipeline  = []\n  pipeline.push source\n  pipeline.push PS.$wrapsignals()\n  pipeline.push PS.$show()\n  pipeline.push PS.$drain resolve\n  PS.pull pipeline...\n  n = 5\n  for idx in [ 1 .. n ]\n    source.send idx\n  source.end()\n  return null\n\n############################################################################################################\nunless module.parent?\n  L = @\n  do ->\n    # await L.demo_signals()\n    await L.demo_wrapsignals()\n    help 'ok'\n\n\n\n\n\n"
  ]
}