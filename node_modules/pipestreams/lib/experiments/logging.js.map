{
  "version": 3,
  "file": "logging.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/logging.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPESTREAMS/EXPERIMENTS/PULL-STREAM-EXAMPLES-PULL'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nafter                     = ( dts, f ) -> setTimeout  f, dts * 1000\nevery                     = ( dts, f ) -> setInterval f, dts * 1000\ndefer                     = setImmediate\n{ jr\n  is_empty }              = CND\n#...........................................................................................................\nPS                        = require '../..'\n{ $, $async, }            = PS.export()\ntest                      = require 'guy-test'\nassign                    = Object.assign\n{ inspect, }              = require 'util'\nxrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"demo through with null\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    # [[ 5, 15, 20, undefined, 25, 30, ], [ 10, 30, 40, undefined, 50, 60 ]]\n    [[1,2,3,null,4,5],[2,6,4,6,null,null,12,8,10],null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      is_odd    = ( d ) -> ( d %% 2 ) isnt 0\n      bylog     = PS.get_logger 'b', 'red'\n      mainlog   = PS.get_logger 'm', 'gold'\n      #.....................................................................................................\n      # source    = PS.new_value_source probe\n      source    = PS.new_random_async_value_source probe\n      collector = []\n      byline    = []\n      byline.push bylog PS.$pass()\n      byline.push PS.$filter ( d ) -> d %% 2 is 0\n      byline.push $ ( d, send ) -> send if d? then d * 3 else d\n      # byline.push PS.$watch ( d ) -> info xrpr d\n      byline.push bylog PS.$pass()\n      byline.push PS.$collect { collector, }\n      byline.push bylog PS.$pass()\n      byline.push PS.$drain()\n      bystream  = PS.pull byline...\n      mainline  = []\n      mainline.push source\n      # mainline.push log PS.$watch ( d ) -> info '--->', d\n      mainline.push mainlog PS.$tee bystream\n      mainline.push mainlog PS.$defer()\n      mainline.push mainlog $ ( d, send ) -> send if d? then d * 2 else d\n      # mainline.push mainlog PS.$tee is_odd, PS.pull byline...\n      mainline.push mainlog PS.$collect { collector, }\n      mainline.push mainlog PS.$drain ->\n        help collector\n        resolve collector\n      PS.pull mainline...\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"circular pipeline 1\" ] = ( T, done ) ->\n  # through = require 'pull-through'\n  probes_and_matchers = [\n    # [[ 5, 15, 20, undefined, 25, 30, ], [ 10, 30, 40, undefined, 50, 60 ]]\n    # [[1,2,3,4,5],[2,6,4,6,null,null,12,8,10],null]\n    [[3,4],[3,4,10,2,5,1,16,8,4,2,1],null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      #-----------------------------------------------------------------------------------------------------\n      bylog                   = PS.get_logger 'b', 'red'\n      mainlog                 = PS.get_logger 'm', 'gold'\n      #.....................................................................................................\n      use_defer               = true\n      buffer                  = [ probe..., ]\n      mainsource              = PS.new_refillable_source buffer, { repeat: 1, }\n      collector               = []\n      mainline                = []\n      mainline.push mainsource\n      mainline.push mainlog PS.$defer() if use_defer\n      mainline.push mainlog $ ( d, send ) ->\n        if d > 1\n          if d %% 2 is 0 then buffer.push d / 2\n          else                buffer.push d * 3 + 1\n        send d\n        # send PS.symbols.end if d is 1\n      mainline.push mainlog PS.$collect { collector, }\n      mainline.push mainlog PS.$drain ->\n        help collector\n        resolve collector\n      PS.pull mainline...\n      # mainsource.send 3\n      # mainsource.end()\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"circular pipeline 2\" ] = ( T, done ) ->\n  # through = require 'pull-through'\n  probes_and_matchers = [\n    [[true,3,4],[30,32,34,10,12,14,20,22,24,94,100,34,40,64,70],null]\n    [[false,3,4],[10,30,12,32,14,34,20,22,24,34,94,40,100,64,70],null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      upperlog                  = PS.get_logger 'U', 'gold'\n      lowerlog                  = PS.get_logger 'L', 'red'\n      #.....................................................................................................\n      [ use_defer, values..., ] = probe\n      collector                 = []\n      upperline                 = []\n      lowerline                 = []\n      refillable                = [ 20 .. 24 ]\n      #.....................................................................................................\n      source_1                  = PS.new_value_source [ 10 .. 14 ]\n      source_2                  = PS.new_refillable_source refillable, { repeat: 1, show: true, }\n      source_3                  = PS.new_value_source [ 30 .. 34 ]\n      #.....................................................................................................\n      upperline.push PS.new_merged_source source_1, source_2\n      upperline.push upperlog PS.$defer() if use_defer\n      upperline.push PS.$watch ( d ) -> echo 'U', xrpr d\n      upperstream = PS.pull upperline...\n      #.....................................................................................................\n      lowerline.push PS.new_merged_source upperstream, source_3\n      lowerline.push PS.$watch ( d ) -> echo 'L', xrpr d\n      lowerline.push lowerlog $ ( d, send ) ->\n        if d %% 2 is 0\n          send d\n        else\n          refillable.push d * 3 + 1\n      lowerline.push PS.$collect { collector, }\n      lowerline.push PS.$drain ->\n        help collector\n        resolve collector\n      PS.pull lowerline...\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"duplex\" ] = ( T, done ) ->\n  # through = require 'pull-through'\n  probes_and_matchers = [\n    [[1,2,3,4,5],[11,12,13,14,15],null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      bylog         = PS.get_logger 'b', 'red'\n      mainlog       = PS.get_logger 'm', 'gold'\n      mainsource    = PS.new_value_source probe\n      collector     = []\n      mainline      = []\n      # duplexsource = PS.new_push_source()\n      stream_a = PS.pull ( bylog $ ( d, send ) -> send d * 3 )\n      stream_b = PS.pull ( bylog $ ( d, send ) -> send d * 2 )\n      stream_c = { source: stream_a, sink: stream_b, }\n      #.....................................................................................................\n      mainline.push mainsource\n      mainline.push mainlog stream_c\n      # mainline.push mainlog stream_c\n      # # mainline.push mainlog PS.$defer()\n      # mainline.push mainlog PS.$pass()\n      # mainline.push mainlog $ ( d, send ) -> send d + 10\n      # # mainline.push mainlog $async ( d, send, done ) -> send d + 10; done()\n      mainline.push mainlog PS.$watch ( d ) -> collector.push d\n      mainline.push mainlog PS.$drain ->\n        help collector\n        resolve collector\n      PS.pull mainline...\n  #.........................................................................................................\n  done()\n  return null\n\n\n############################################################################################################\nunless module.parent?\n  null\n  # test @\n  # test @[ \"circular pipeline 1\" ], { timeout: 5000, }\n  test @[ \"circular pipeline 2\" ], { timeout: 5000, }\n  # test @[ \"duplex\" ]\n  # @[ \"_duplex 1\" ]()\n  # @[ \"_duplex 2\" ]()\n\n"
  ]
}