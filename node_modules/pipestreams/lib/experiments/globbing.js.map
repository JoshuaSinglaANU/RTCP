{
  "version": 3,
  "file": "globbing.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/globbing.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPESTREAMS/EXPERIMENTS/PULL-STREAM-EXAMPLES-PULL'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nafter                     = ( dts, f ) -> setTimeout  f, dts * 1000\nevery                     = ( dts, f ) -> setInterval f, dts * 1000\ndefer                     = setImmediate\n{ jr\n  is_empty }              = CND\n#...........................................................................................................\nPS                        = require '../..'\n{ $, $async, }            = PS.export()\ntest                      = require 'guy-test'\nassign                    = Object.assign\n{ inspect, }              = require 'util'\nxrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"demo watch pipeline on abort 2\" ] = ( T, done ) ->\n  # through = require 'pull-through'\n  probes_and_matchers = [\n    [[false,[1,2,3,null,5]],[1,1,1,2,2,2,3,3,3,null,null,null,5,5,5],null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      #.....................................................................................................\n      [ use_defer\n        values ]  = probe\n      source      = PS.new_value_source values\n      collector   = []\n      pipeline    = []\n      pipeline.push source\n      pipeline.push aborting_map use_defer, ( d ) -> info '22398-1', xrpr d; return d\n      pipeline.push PS.$ ( d, send ) -> info '22398-2', xrpr d; collector.push d; send d\n      pipeline.push PS.$ ( d, send ) -> info '22398-3', xrpr d; collector.push d; send d\n      pipeline.push PS.$ ( d, send ) -> info '22398-4', xrpr d; collector.push d; send d\n      # pipeline.push PS.$map ( d ) -> info '22398-2', xrpr d; collector.push d; return d\n      # pipeline.push PS.$map ( d ) -> info '22398-3', xrpr d; collector.push d; return d\n      # pipeline.push PS.$map ( d ) -> info '22398-4', xrpr d; collector.push d; return d\n      pipeline.push PS.$drain ->\n        help '44998', xrpr collector\n        resolve collector\n      pull pipeline...\n  #.........................................................................................................\n  done()\n  return null\n\n############################################################################################################\nunless module.parent?\n  # include = []\n  # @_prune()\n  # @_main()\n  test @\n  # test @[ \"remit with end detection 1\" ]\n  # test @[ \"remit with end detection 2\" ]\n  # test @[ \"$surround async\" ]\n  # test @[ \"end push source (1)\" ]\n  # test @[ \"end push source (2)\" ]\n  # test @[ \"end push source (3)\" ]\n  # test @[ \"end push source (4)\" ]\n  # test @[ \"end random async source\" ]\n  # test @[ \"watch with end detection 1\" ]\n  # test @[ \"watch with end detection 2\" ]\n  # test @[ \"demo watch pipeline on abort 2\" ]\n\n\n\n\n\n\n"
  ]
}