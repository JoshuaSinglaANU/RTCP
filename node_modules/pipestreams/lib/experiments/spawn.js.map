{
  "version": 3,
  "file": "spawn.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/spawn.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPESTREAMS/EXPERIMENTS/SPAWN'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n\n\n\n#===========================================================================================================\n# SPAWN\n#-----------------------------------------------------------------------------------------------------------\n@spawn_collect = ( P..., handler ) ->\n  #.........................................................................................................\n  $on_data = =>\n    command   = null\n    stderr    = []\n    stdout    = []\n    return @$watch ( event ) =>\n      [ key, value, ] = event\n      switch key\n        when 'command'  then  command = value\n        when 'stdout'   then  stdout.push value\n        when 'stderr'   then  stderr.push value\n        when 'exit'     then  return handler null, Object.assign { command, stdout, stderr, }, value\n        else throw new Error \"Âµ37718 internal error 2201991\"\n      return null\n  #.........................................................................................................\n  source    = @spawn P...\n  pipeline  = []\n  #.........................................................................................................\n  pipeline.push source\n  pipeline.push $on_data()\n  pipeline.push @$drain()\n  #.........................................................................................................\n  pull pipeline...\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@spawn = ( P... ) -> ( @_spawn P... )[ 1 ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_spawn = ( command, settings ) ->\n  #.........................................................................................................\n  switch arity = arguments.length\n    when 1, 2 then null\n    else throw new Error \"Âµ38483 expected 1 or 2 arguments, got #{arity}\"\n  #.........................................................................................................\n  # throw new Error \"Âµ39248 deprecated setting: error_to_exit\" if ( pluck settings, 'error_to_exit',  null )?\n  # stderr_target     = pluck settings, 'stderr', 'stderr'\n  settings          = Object.assign { shell: yes, }, settings\n  stdout_is_binary  = pluck settings, 'binary',         no\n  comments          = pluck settings, 'comments',       {}\n  on_data           = pluck settings, 'on_data',        null\n  error_to_exit     = pluck settings, 'error_to_exit',  no\n  command_source    = @new_value_source [ [ 'command', command, ] ]\n  #.........................................................................................................\n  switch command_type = CND.type_of command\n    when 'text'\n      cp = CP.spawn command, settings\n    when 'list'\n      unless command.length > 0\n        throw new Error \"Âµ40013 expected a list with at least one value, got #{rpr command}\"\n      cp = CP.spawn command[ 0 ], command[ 1 .. ], settings\n    else throw new Error \"Âµ40778 expected a text or a list for command, got #{command_type}\"\n  #.........................................................................................................\n  stdout            = STPS.source cp.stdout\n  stderr            = STPS.source cp.stderr\n  #.........................................................................................................\n  stdout_pipeline   = []\n  stderr_pipeline   = []\n  funnel            = []\n  event_pipeline    = []\n  event_buffer      = []\n  #.........................................................................................................\n  stdout_pipeline.push stdout\n  stdout_pipeline.push @$split() unless stdout_is_binary\n  # stdout_pipeline.push @async_map ( data, handler ) -> defer -> handler null, data\n  stdout_pipeline.push @map ( line ) -> [ 'stdout', line, ]\n  #.........................................................................................................\n  stderr_pipeline.push stderr\n  stderr_pipeline.push @$split()\n  # stderr_pipeline.push @$show title: '**44321**'\n  # stderr_pipeline.push @async_map ( data, handler ) -> defer -> handler null, data\n  stderr_pipeline.push @map ( line ) -> [ 'stderr', line, ]\n  #.........................................................................................................\n  ### Event handling: collect all events from child process ###\n  cp.on 'disconnect',                   => event_buffer.push [ 'disconnect',  null,          ]\n  ### TAINT exit and error events should use same method to do post-processing ###\n  cp.on 'error',      ( error )         => event_buffer.push [ 'error',       error ? null,  ]\n  cp.on 'exit',       ( code, signal )  =>\n    # debug '77100-1'\n    code      = ( 128 + ( @_spawn._signals_and_codes[ signal ] ? 0 ) ) if signal? and not code?\n    # debug '77100-2'\n    comment   = comments[ code ] ? @_spawn._codes_and_comments[ code ] ? signal\n    # debug '77100-3'\n    comment  ?= if code is 0 then 'ok' else comments[ 'error' ] ? 'error'\n    # debug '77100-4'\n    event_buffer.push [ 'exit',   { code, signal, comment, },  ]\n  #.......................................................................................................\n  ### The 'close' event should always come last, so we use that to trigger asynchronous sending of\n  all events collected in the signal buffer. See https://github.com/dominictarr/pull-cont ###\n  event_pipeline.push pull_cont ( handler ) =>\n    cp.on 'close', =>\n      handler null, @new_value_source event_buffer\n      return null\n  #.........................................................................................................\n  ### Since reading from a spawned process is inherently asynchronous, we cannot be sure all of the output\n  from stdout and stderr has been sent down the pipeline before events from the child process arrive.\n  Therefore, we have to buffer those events and send them on only when the confluence stream has indicated\n  exhaustion: ###\n  $ensure_event_order = =>\n    cp_buffer     = []\n    std_buffer    = []\n    command_sent  = no\n    return @$ 'null', ( event, send ) =>\n      if event?\n        [ category, ] = event\n        ### Events from stdout and stderr are buffered until the command event has been sent; after that,\n        they are sent immediately: ###\n        if category in [ 'stdout', 'stderr', ]\n          # debug '10921>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', command_sent, std_buffer\n          # send [ 'stderr', '!!!!!!!!!!!!!!!', ]\n          if command_sent\n            return if on_data? then on_data event else send event\n          return std_buffer.push event\n        ### The command event is sent right away; any buffered stdout, stderr events are flushed: ###\n        if category is 'command'\n          command_sent = yes\n          send event\n          while std_buffer.length > 0\n            if on_data? then on_data std_buffer.shift() else send std_buffer.shift()\n          return\n        ### Keep everything else (i.e. events from child process) for later: ###\n        cp_buffer.push event\n      else\n        ### Send all buffered CP events: ###\n        send cp_buffer.shift() while cp_buffer.length > 0\n        # if on_data? then on_data std_buffer.shift() else send std_buffer.shift()\n      return null\n  #.........................................................................................................\n  confluence = pull_many [\n    ( pull command_source     )\n    ( pull stdout_pipeline... )\n    ( pull stderr_pipeline... )\n    ( pull event_pipeline...  )\n    ]\n  #.........................................................................................................\n  funnel.push confluence\n  funnel.push $ensure_event_order()\n  # funnel.push @$show title: '**21129**'\n  #.........................................................................................................\n  if error_to_exit\n    funnel.push do =>\n      error = []\n      return @$ ( event, send ) =>\n        if event?\n          [ key, value, ] = event\n          switch key\n            when 'command', 'stdout'  then send event\n            when 'stderr'             then error.push value.trimRight()\n            when 'exit'\n              value.error = error.join '\\n'\n              value.error = null if value.error.length is 0\n              send event\n            else throw new Error \"Âµ41543 internal error 110918\"\n  #.........................................................................................................\n  source = pull funnel...\n  return [ cp, source, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_spawn._signals_and_codes = {\n  SIGHUP: 1, SIGINT: 2, SIGQUIT: 3, SIGILL: 4, SIGTRAP: 5, SIGABRT: 6, SIGIOT: 6, SIGBUS: 7, SIGFPE: 8,\n  SIGKILL: 9, SIGUSR1: 10, SIGSEGV: 11, SIGUSR2: 12, SIGPIPE: 13, SIGALRM: 14, SIGTERM: 15, SIGSTKFLT: 16,\n  SIGCHLD: 17, SIGCONT: 18, SIGSTOP: 19, SIGTSTP: 20, SIGTTIN: 21, SIGTTOU: 22, SIGURG: 23, SIGXCPU: 24,\n  SIGXFSZ: 25, SIGVTALRM: 26, SIGPROF: 27, SIGWINCH: 28, SIGIO: 29, SIGPOLL: 29, SIGPWR: 30, SIGSYS: 31, }\n\n#-----------------------------------------------------------------------------------------------------------\n@_spawn._codes_and_comments =\n  # 1:      'an error has occurred'\n  126:    'permission denied'\n  127:    'command not found'\n\n"
  ]
}