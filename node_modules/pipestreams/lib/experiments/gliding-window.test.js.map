{
  "version": 3,
  "file": "gliding-window.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/gliding-window.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'GLIDING-WINDOW'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\n#...........................................................................................................\nPS                        = require '../..'\n{ $, $async, }            = PS.export()\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"gliding window: basic functionality\" ] = ( T, done ) ->\n  #.........................................................................................................\n  pipeline      = []\n  Ø             = ( x ) => pipeline.push x\n  section_count = 0\n  probes        = ( i for i in [ 0 .. 9 ] )\n  width         = 3\n  expect_count  = Math.max 0, probes.length - width + 1\n  #.........................................................................................................\n  Ø ( require 'pull-stream/sources/values' ) probes\n  Ø PS.$gliding_window width, ( section ) ->\n    section_count += +1\n    urge section\n  Ø PS.$collect()\n  # Ø PS.$show()\n  Ø $ 'null', ( data, send ) ->\n    if data?\n      T.ok section_count is expect_count\n      send data\n    else\n      done()\n      # send null\n  Ø PS.$drain()\n  #.........................................................................................................\n  PS.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"gliding window: drop values\" ] = ( T, done ) ->\n  #.........................................................................................................\n  pipeline      = []\n  Ø             = ( x ) => pipeline.push x\n  probes        = ( i for i in [ 0 .. 9 ] )\n  width         = 3\n  #.........................................................................................................\n  Ø ( require 'pull-stream/sources/values' ) probes\n  Ø PS.$gliding_window width, ( section ) ->\n    [ d0, d1, d2, ] = section\n    section[ 0 .. 2 ] = [ d0, d2, ] if d1 % 2 is 0\n  Ø PS.$collect()\n  # Ø PS.$show()\n  Ø $ 'null', ( data, send ) ->\n    if data?\n      urge data\n      T.ok CND.equals data, [ 0, 1, 3, 5, 7, 9 ]\n      send data\n    else\n      done()\n      # send null\n  Ø PS.$drain()\n  #.........................................................................................................\n  PS.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"gliding window: insert values\" ] = ( T, done ) ->\n  #.........................................................................................................\n  pipeline      = []\n  Ø             = ( x ) => pipeline.push x\n  probes        = ( i for i in [ 0 .. 9 ] )\n  #.........................................................................................................\n  Ø ( require 'pull-stream/sources/values' ) probes\n  Ø PS.$gliding_window 1, ( section ) ->\n    [ d0, ] = section\n    section.push d0 * 2 if d0 % 2 is 1\n  Ø PS.$collect()\n  # Ø PS.$show()\n  Ø $ 'null', ( data, send ) ->\n    if data?\n      urge data\n      T.ok CND.equals data, [ 0, 1, 2, 2, 3, 6, 4, 5, 10, 6, 7, 14, 8, 9, 18 ]\n      send data\n    else\n      done()\n      # send null\n  Ø PS.$drain()\n  #.........................................................................................................\n  PS.pull pipeline...\n\n\n############################################################################################################\nunless module.parent?\n  test @\n\n\n\n"
  ]
}