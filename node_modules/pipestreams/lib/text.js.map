{
  "version": 3,
  "file": "text.js",
  "sourceRoot": "..",
  "sources": [
    "src/text.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\n$pull_split               = require 'pull-split'\n$pull_utf8_decoder        = require 'pull-utf8-decoder'\n\n#-----------------------------------------------------------------------------------------------------------\n@new_text_source = ( text ) -> $values [ text, ]\n\n# #-----------------------------------------------------------------------------------------------------------\n# @new_text_sink = -> throw new Error \"µ66539 not implemented\"\n\n#-----------------------------------------------------------------------------------------------------------\n@$split = ( settings ) ->\n  throw new Error \"µ66662 MEH\" if settings?\n  R         = []\n  matcher   = null\n  mapper    = null\n  reverse   = no\n  skip_last = yes\n  R.push $pull_utf8_decoder()\n  R.push $pull_split matcher, mapper, reverse, skip_last\n  R.push @$ ( line, send ) -> send line.replace /\\r+$/g, ''\n  return @pull R...\n\n#-----------------------------------------------------------------------------------------------------------\n@$join = ( joiner = null ) ->\n  collector = []\n  length    = 0\n  type      = null\n  is_first  = yes\n  return @$ { last: null, }, ( data, send ) ->\n    if data?\n      if is_first\n        is_first  = no\n        type      = CND.type_of data\n        switch type\n          when 'text'\n            joiner ?= ''\n          when 'buffer'\n            throw new Error \"µ66785 joiner not supported for buffers, got #{rpr joiner}\" if joiner?\n          else\n            throw new Error \"µ66908 expected a text or a buffer, got a #{type}\"\n      else\n        unless ( this_type = CND.type_of data ) is type\n          throw new Error \"µ67031 expected a #{type}, got a #{this_type}\"\n      length += data.length\n      collector.push data\n    else\n      return send '' if ( collector.length is 0 ) or ( length is 0 )\n      return send collector.join '' if type is 'text'\n      return send Buffer.concat collector, length\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$as_line = ->\n  return @$map ( line ) =>\n    \"µ67154 expected a text, got a #{type}\" unless ( type = CND.type_of line ) is 'text'\n    line + '\\n'\n\n#-----------------------------------------------------------------------------------------------------------\n@$trim = ->\n  return @$map ( line ) =>\n    \"µ67277 expected a text, got a #{type}\" unless ( type = CND.type_of line ) is 'text'\n    return line.trim()\n\n#-----------------------------------------------------------------------------------------------------------\n@$skip_empty = ->\n  return @$filter ( line ) =>\n    \"µ67400 expected a text, got a #{type}\" unless ( type = CND.type_of line ) is 'text'\n    return line.length > 0\n\n#-----------------------------------------------------------------------------------------------------------\n@$skip_blank = ->\n  return @$filter ( line ) =>\n    \"µ67523 expected a text, got a #{type}\" unless ( type = CND.type_of line ) is 'text'\n    return not ( line.match /^\\s*$/ )?\n\n#-----------------------------------------------------------------------------------------------------------\n@$as_text = ( settings ) ->\n  serialize = settings?[ 'serialize' ] ? JSON.stringify\n  return @$map ( data ) => serialize data\n\n#-----------------------------------------------------------------------------------------------------------\n@$desaturate = ->\n  ### remove ANSI escape sequences ###\n  pattern = /\\x1b\\[[0-9;]*[JKmsu]/g\n  return @$map ( line ) => line.replace pattern, ''\n\n\n\n"
  ]
}