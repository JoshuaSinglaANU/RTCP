{
  "version": 3,
  "file": "tsv.js",
  "sourceRoot": "..",
  "sources": [
    "src/tsv.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPESTREAMS/TSV'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nflatten                   = require 'lodash.flattendeep'\n\n#-----------------------------------------------------------------------------------------------------------\n@$name_fields = ( names... ) ->\n  names = flatten names\n  return @$ ( fields, send ) =>\n    throw new Error \"µ43613 expected a list, got a #{type}\" unless ( type = CND.type_of fields ) is 'list'\n    R = {}\n    for value, idx in fields\n      name      = names[ idx ] ?= \"field_#{idx}\"\n      R[ name ] = value\n    send R\n\n#-----------------------------------------------------------------------------------------------------------\n@$split_on_tabs = ( settings ) ->\n  return @$ ( line, send ) =>\n    \"µ27918 expected a text, got a #{type}\" unless ( type = CND.type_of line ) is 'text'\n    send line.split /\\t/\n\n# #-----------------------------------------------------------------------------------------------------------\n# @$split_on_whitespace = ( field_count = null ) ->\n#   if ( field_count is 0 )\n#     throw new Error \"µ43714 field_count can not be zero\"\n#   #.........................................................................................................\n#   ### If user requested null or zero fields, we can just split the line: ###\n#   if ( not field_count? ) # or ( field_count is 0 )\n#     return @$ ( line, send ) => send line.split /\\s+/\n#   #.........................................................................................................\n#   ### If user requested one field, then the entire line is the field: ###\n#   if field_count is 1\n#     return @$ ( line, send ) => send [ line, ]\n#   #.........................................................................................................\n#   ### TAINT validate field_count is integer ###\n#   ### TAINT validate field_count is non-negative ###\n#   return @$ ( line, send ) =>\n#     \"µ28239 expected a text, got a #{type}\" unless ( type = CND.type_of line ) is 'text'\n#     fields  = []\n#     parts   = line.split /(\\s+)/\n#     pairs   = ( [ parts[ idx ], parts[ idx + 1 ] ? '' ] for idx in [ 0 ... parts.length ] by +2 )\n#     #.......................................................................................................\n#     ### Shift-push line contents from `pairs` into `fields` until exhausted or saturated: ###\n#     loop\n#       break if pairs.length <= 0\n#       break if fields.length >= field_count - 1\n#       fields.push pairs.shift()[ 0 ]\n#     #.......................................................................................................\n#     ### Concat remaining parts and add as one more field: ###\n#     if pairs.length > 0\n#       fields.push ( ( ( fld + spc ) for [ fld, spc, ] in pairs ).join '' ).trim()\n#     #.......................................................................................................\n#     ### Pad missing fields with `null`: ###\n#     ### TAINT allow to configure padding value ###\n#     fields.push null while fields.length < field_count\n#     #.......................................................................................................\n#     send fields\n\n#-----------------------------------------------------------------------------------------------------------\n@$split_on_whitespace = ( field_count = null ) ->\n  #.........................................................................................................\n  if ( field_count is 0 )\n    throw new Error \"µ43815 field_count can not be zero\"\n  #.........................................................................................................\n  ### If called with field_count `null`, we can just split the line: ###\n  if ( not field_count? )\n    return @$ ( line, send ) =>\n      R = ( ( if p is '' then null else p ) for p in line.split /\\s+/ )\n      R.pop() while R[ R.length - 1 ] is null\n      send R\n  #.........................................................................................................\n  ### If user requested one field, then the entire line is the field: ###\n  if field_count is 1\n    return @$ ( line, send ) => send [ line, ]\n  #.........................................................................................................\n  get_pattern = ( field_count ) =>\n    # return /^(*){1,}$/ if ( not field_count? ) or ( field_count is 0 )\n    R           = []\n    subpattern  = []\n    R.push '^'\n    subpattern.push '(\\\\S*)' for _ in [ 1 .. field_count - 1 ] by +1\n    R.push subpattern.join '\\\\s*'\n    R.push '\\\\s*(.*)'\n    R.push '$'\n    return new RegExp R.join ''\n  pattern = get_pattern field_count\n  #.........................................................................................................\n  return @$ ( line, send ) =>\n    \"µ27918 expected a text, got a #{type}\" unless ( type = CND.type_of line ) is 'text'\n    # debug 'µ78765-1', ( rpr pattern ), ( rpr line )\n    if ( '\\n' in line ) or not ( match = line.match pattern )?\n      throw new Error \"µ43916 illegal line: #{rpr line}\"\n    match = [ match..., ]\n    R     = []\n    # debug 'µ78765-2', ( rpr pattern ), ( rpr line ), ( rpr match )\n    for idx in [ 1 .. field_count ]\n      R.push if ( field = match[ idx ] ) is '' then null else field\n    send R\n\n#-----------------------------------------------------------------------------------------------------------\n@$trim_fields = -> @$watch ( fields  ) =>\n  throw new Error \"µ44017 expected a list, got a #{type}\" unless ( type = CND.type_of fields ) is 'list'\n  fields[ idx ] = field.trim() for field, idx in fields\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$split_tsv = ->\n  R = []\n  R.push @$split()\n  # R.push @$trim()\n  R.push @$skip_blank()\n  ### TAINT use named method; allow to configure comment marker ###\n  R.push @$filter ( line ) -> not line.startsWith '#'\n  R.push @$split_on_tabs()\n  R.push @$trim_fields()\n  return @pull R...\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT use `settings` for extensibility ###\n@$split_wsv = ( field_count = null ) ->\n  R = []\n  R.push @$split()\n  # R.push @$sample 1 / 20000\n  # R.push @$trim()\n  R.push @$skip_blank()\n  ### TAINT use named method; allow to configure comment marker ###\n  R.push @$filter ( line ) -> not line.startsWith '#'\n  R.push @$split_on_whitespace field_count\n  return @pull R...\n\n\n"
  ]
}