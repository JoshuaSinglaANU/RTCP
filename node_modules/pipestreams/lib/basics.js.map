{
  "version": 3,
  "file": "basics.js",
  "sourceRoot": "..",
  "sources": [
    "src/basics.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPESTREAMS/BASICS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\n# CP                        = require 'child_process'\n#...........................................................................................................\n$pass_through             = require 'pull-stream/throughs/through'\n$pull_drain               = require 'pull-stream/sinks/drain'\n$values                   = require 'pull-stream/sources/values'\n$paramap                  = require 'pull-paramap'\npull                      = require 'pull-stream'\npull_through              = require '../deps/pull-through-with-end-symbol'\npull_cont                 = require 'pull-cont'\nmap                       = require './_map_errors'\n#...........................................................................................................\nafter                     = ( dts, f ) -> setTimeout  f, dts * 1000\nevery                     = ( dts, f ) -> setInterval f, dts * 1000\ndefer                     = setImmediate\nreturn_id                 = ( x ) -> x\n{ is_empty\n  copy\n  assign\n  jr }                    = CND\n#...........................................................................................................\n@_symbols                 = require './_symbols'\n#...........................................................................................................\ntypes                     = require './_types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n\n\n#===========================================================================================================\n# ISA METHODS\n#-----------------------------------------------------------------------------------------------------------\n### thx to German Attanasio http://stackoverflow.com/a/28564000/256361 ###\n@_isa_njs_stream            = ( x ) -> x instanceof ( require 'stream' ).Stream\n@_isa_readable_njs_stream   = ( x ) -> ( @_isa_njs_stream x ) and x.readable\n@_isa_writable_njs_stream   = ( x ) -> ( @_isa_njs_stream x ) and x.writable\n@_isa_readonly_njs_stream   = ( x ) -> ( @_isa_njs_stream x ) and x.readable and not x.writable\n@_isa_writeonly_njs_stream  = ( x ) -> ( @_isa_njs_stream x ) and x.writable and not x.readable\n@_isa_duplex_njs_stream     = ( x ) -> ( @_isa_njs_stream x ) and x.readable and     x.writable\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@new_value_source = ( values ) -> $values values\n\n#-----------------------------------------------------------------------------------------------------------\n@new_push_source = ( P... ) ->\n  ### Return a `pull-streams` `pushable`. Methods `push` and `end` will be bound to the instance\n  so they can be freely passed around. ###\n  new_pushable  = require 'pull-pushable'\n  source        = new_pushable P...\n  R             = ( P... ) -> source P...\n  PS            = @\n  #.........................................................................................................\n  send = ( d ) ->\n    source.push d\n    return null\n  #.........................................................................................................\n  end = ( P... ) ->\n    source.end P...\n    return null\n  #.........................................................................................................\n  R.send  = send.bind R\n  R.end   = end.bind R\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@new_alternating_source = ( source_a, source_b ) ->\n  ### Given two sources `a` and `b`, return a new source that will emit events\n  from both streams in an interleaved fashion, such that the first data item\n  from `a` is followed from the first item from `b`, followed by the second from\n  `a`, the second from `b` and so on. Once one of the streams has ended, omit\n  the remaining items from the other one, if any, until that stream ends, too.\n  See also https://github.com/tounano/pull-robin. ###\n  merge     = require 'pull-merge'\n  toggle    = +1\n  return merge source_a, source_b, ( -> toggle = -toggle )\n\n#-----------------------------------------------------------------------------------------------------------\n@new_on_demand_source = ( stream ) ->\n  ### Given a stream, return a source `s` with a method `s.next()` such that the next data item from `s`\n  will only be sent as soon as that method is called. ###\n  triggersource   = @new_push_source()\n  pipeline        = []\n  next_sym        = Symbol 'next'\n  pipeline.push @new_alternating_source triggersource, stream\n  pipeline.push @$filter ( d ) -> d isnt next_sym\n  R               = @pull pipeline...\n  R.next          = -> triggersource.send next_sym\n  R.next()\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@new_random_async_value_source = ( dts, values ) ->\n  ### Given an optional delta time in seconds `dts` (which defaults to 0.1 seconds) and a list of values,\n  return a source that will asynchronously produce values at irregular intervals that randomly oscillate\n  around `dts`. ###\n  switch arity = arguments.length\n    when 1 then [ dts, values, ] = [ 0.1, dts, ]\n    when 2 then null\n    else throw new Error \"µ77749 expected 1 or 2 arguments, got #{arity}\"\n  #.........................................................................................................\n  R           = @new_push_source()\n  new_timeout = -> ( Math.random() + 0.001 ) * dts\n  #.........................................................................................................\n  idx         = 0\n  last_idx    = values.length - 1\n  #.........................................................................................................\n  unless ( CND.isa_number last_idx )\n    throw new Error \"µ89231 expected a list-like object, got a #{CND.type_of values}\"\n  #.........................................................................................................\n  tick = =>\n    if idx <= last_idx\n      R.send values[ idx ]\n      idx += +1\n      after new_timeout(), tick\n    else\n      R.end()\n    return null\n  #.........................................................................................................\n  after new_timeout(), tick\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@new_generator_source = ( generator ) ->\n  return ( end, handler ) ->\n    return handler end if end\n    R = generator.next()\n    defer ->\n      return handler true if R.done\n      handler null, R.value\n\n#-----------------------------------------------------------------------------------------------------------\n@new_refillable_source = ( values, settings ) ->\n  ### A refillable source expects a list of `values` (or a listlike object with a `shift()` method); when a\n  read occurs, it will empty `values` one element at a time, always shifting the leftmost element (with\n  index zero) from `values`. Transforms down the line may choose to `values.push()` new values into the\n  list, which will in time be sent down again. When a read occurs and `values` happens to be empty, a\n  special value (the `trailer`, by default a symbol) will be sent down the line (only to be filtered out\n  immediately) up to `repeat` times (by default one time) in a row to avoid depleting the pipeline. ###\n  discard_sym   = Symbol 'discard'\n  settings      = assign { repeat: 1, trailer: discard_sym, show: false, }, settings\n  trailer_count = 0\n  #.........................................................................................................\n  filter        = @$filter ( d ) => d isnt discard_sym\n  #.........................................................................................................\n  read          = ( abort, handler ) =>\n    return handler abort if abort\n    if values.length is 0\n      trailer_count  += +1\n      info '23983', \"refillable source depleted: #{trailer_count} / #{settings.repeat}\" if settings.show\n      if trailer_count < settings.repeat\n        value = settings.trailer\n      else\n        return handler true\n    else\n      trailer_count = 0\n      value         = values.shift()\n    ### Must defer callback so the the pipeline gets a chance to refill: ###\n    defer -> handler null, value\n    return null\n  #.........................................................................................................\n  R = @pull read, filter\n  # R.end = ->\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@$filter = ( method ) ->\n  throw new Error \"µ15533 expected a function, got a #{type}\" unless ( type = CND.type_of method ) is 'function'\n  switch arity = method.length\n    when 1 then null\n    else throw new Error \"µ16298 method arity #{arity} not implemented\"\n  #.........................................................................................................\n  return pull.filter method\n\n#-----------------------------------------------------------------------------------------------------------\n@$map = ( method ) ->\n  throw new Error \"µ17063 expected a function, got a #{type}\" unless ( type = CND.type_of method ) is 'function'\n  switch arity = method.length\n    when 1 then null\n    else throw new Error \"µ17828 method arity #{arity} not implemented\"\n  #.........................................................................................................\n  return map method\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_remit_settings = ( hint, method ) ->\n  defaults  =\n    first:    @_symbols.misfit\n    last:     @_symbols.misfit\n    between:  @_symbols.misfit\n    after:    @_symbols.misfit\n    before:   @_symbols.misfit\n  settings  = assign {}, defaults\n  switch arity = arguments.length\n    when 1\n      method    = hint\n      hint      = null\n    when 2\n      if CND.isa_text hint\n        throw new Error \"µ30902 Deprecated: use `{last:null}` instead of `'null'`\"\n      else\n        settings = assign settings, hint\n    else throw new Error \"µ19358 expected 1 or 2 arguments, got #{arity}\"\n  settings._surround = \\\n    ( settings.first    isnt @_symbols.misfit ) or \\\n    ( settings.last     isnt @_symbols.misfit ) or \\\n    ( settings.between  isnt @_symbols.misfit ) or \\\n    ( settings.after    isnt @_symbols.misfit ) or \\\n    ( settings.before   isnt @_symbols.misfit )\n  return { settings, method, }\n\n#-----------------------------------------------------------------------------------------------------------\n@$ = @remit = ( P... ) ->\n  ### NOTE we're transitioning from the experimental `hint` call convention to the more flexible and\n  standard `settings` (which are here placed first, not last, b/c one frequently wants to write out a\n  function body as last argument). For a limited time, `'null'` is accepted in place of a `settings` object;\n  after that, `{ last: null }` should be used. ###\n  #.........................................................................................................\n  { settings, method, } = @_get_remit_settings P...\n  switch client_arity = method.length\n    when 2 then null\n    else throw new Error \"µ20123 method arity #{client_arity} not implemented\"\n  #.........................................................................................................\n  throw new Error \"µ20888 expected a function, got a #{type}\" unless ( type = CND.type_of method ) is 'function'\n  #.........................................................................................................\n  self          = null\n  #.........................................................................................................\n  if settings.leapfrog?\n    validate.function settings.leapfrog\n    do_leapfrog = true\n  else\n    do_leapfrog = false\n  #.........................................................................................................\n  data_first    = settings.first\n  data_before   = settings.before\n  data_between  = settings.between\n  data_after    = settings.after\n  data_last     = settings.last\n  send_first    = data_first    isnt @_symbols.misfit\n  send_before   = data_before   isnt @_symbols.misfit\n  send_between  = data_between  isnt @_symbols.misfit\n  send_after    = data_after    isnt @_symbols.misfit\n  send_last     = data_last     isnt @_symbols.misfit\n  on_end        = null\n  is_first      = true\n  PS            = @\n  #.........................................................................................................\n  send = ( d ) ->\n    throw new Error \"µ93892 called `send` method too late\" unless self?\n    self.queue d\n  #.........................................................................................................\n  send.end = ->\n    throw new Error \"µ09833 `send.end()` takes no arguments, got #{rpr [arguments...]}\" unless arguments.length is 0\n    self.queue PS._symbols.end\n  #.........................................................................................................\n  on_data = ( d ) ->\n    self = @\n    if is_first\n      is_first = false\n      method data_first, send if send_first\n    else\n      method data_between, send if send_between\n    method data_before, send  if send_before\n    #.......................................................................................................\n    # When leapfrogging is being called for, only call method if the jumper returns false:\n    if ( not do_leapfrog ) or ( not settings.leapfrog d ) then  method d, send\n    else                                                        send d\n    #.......................................................................................................\n    method data_after,  send  if send_after\n    self = null\n    return null\n  #.........................................................................................................\n  on_end = ->\n    if send_last\n      self = @\n      method data_last, send\n      self = null\n    # defer -> @queue PS._symbols.end\n    @queue PS._symbols.end\n    return null\n  #.........................................................................................................\n  return pull_through on_data, on_end\n\n#-----------------------------------------------------------------------------------------------------------\n@$async = ( P... ) ->\n  ### TAINT currently all results from client method are buffered until `done` gets called; see whether\n  it is possible to use `await` so that each result can be sent doen the pipeline w/out buffering ###\n  #.........................................................................................................\n  ### NOTE we're transitioning from the experimental `hint` call convention to the more flexible and\n  standard `settings` (which are here placed first, not last, b/c one frequently wants to write out a\n  function body as last argument). For a limited time, `'null'` is accepted in place of a `settings` object;\n  after that, `{ last: null }` (or using other value except `PS._symbols.misfit`) should be used. ###\n  #.........................................................................................................\n  { settings, method, } = @_get_remit_settings P...\n  throw new Error \"µ18187 expected a function, got a #{type}\" unless ( type = CND.type_of method ) is 'function'\n  throw new Error \"µ18203 expected one or two arguments, got #{arity}\" unless 1 <= ( arity = arguments.length ) <= 2\n  throw new Error \"µ18219 method arity #{arity} not implemented\" unless ( arity = method.length ) is 3\n  #.........................................................................................................\n  pipeline    = []\n  call_count  = 0\n  has_ended   = false\n  last_sym    = Symbol 'last'\n  #.........................................................................................................\n  pipeline.push @$surround settings if settings._surround\n  pipeline.push @$surround { last: last_sym, }\n  #.........................................................................................................\n  pipeline.push $paramap ( d, handler ) =>\n    collector   = []\n    #.......................................................................................................\n    send = ( d ) =>\n      return handler true if d is @_symbols.end\n      collector.unshift d\n      return null\n    #.......................................................................................................\n    done = =>\n      call_count += -1\n      handler null, collector\n      handler true if has_ended and call_count < 1\n      return null\n    #.......................................................................................................\n    if d is last_sym\n      has_ended = true\n      handler true if call_count < 1\n    else\n      call_count += +1\n      defer -> method d, send, done\n    return null\n  #.........................................................................................................\n  pipeline.push @$defer()\n  pipeline.push @$ ( d, send ) => send d.pop() while d.length > 0\n  #.........................................................................................................\n  return @pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n### Given a `settings` object, add values to the stream as `$ settings, ( d, send ) -> send d` would do,\ne.g. `$surround { first: 'first!', between: 'to appear in-between two values', }`. ###\n@$surround = ( settings ) -> @$ settings, ( d, send ) => send d\n\n\n#===========================================================================================================\n# MARK POSITION IN STREAM\n#-----------------------------------------------------------------------------------------------------------\n@$mark_position = ->\n  ### Turns values into objects `{ first, last, value, }` where `value` is the original value and `first`\n  and `last` are booleans that indicate position of value in the stream. ###\n  last      = @_symbols.last\n  is_first  = true\n  prv       = []\n  return @$ { last, }, ( d, send ) =>\n    if ( d is last ) and prv.length > 0\n      if prv.length > 0\n        send { is_first, is_last: true, d: prv.pop(), }\n      return null\n    if prv.length > 0\n      send { is_first, is_last: false, d: prv.pop(), }\n      is_first = false\n    prv.push d\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@mark_position = ( transform ) -> @pull @$mark_position(), transform\n\n\n#===========================================================================================================\n# WINDOWING\n#-----------------------------------------------------------------------------------------------------------\n@$window = ( settings ) ->\n  ### Moving window over data items in stream. Turns stream of values into stream of\n  lists each `width` elements long. ###\n  defaults                = { width: 3, fallback: null, }\n  settings                = assign {}, defaults, settings\n  validate.pipestreams_$window_settings settings\n  #.........................................................................................................\n  if settings.leapfrog?\n    throw new Error \"µ77871 setting 'leapfrog' only valid for PS.window(), not PS.$window()\"\n  #.........................................................................................................\n  if settings.width is 1\n    return @$ ( d, send ) => send [ d, ]\n  #.........................................................................................................\n  last                    = Symbol 'last'\n  had_value               = false\n  fallback                = settings.fallback\n  buffer                  = ( fallback for _ in [ 1 .. settings.width ] )\n  #.........................................................................................................\n  return @$ { last, }, ( d, send ) =>\n    if d is last\n      if had_value\n        for _ in [ 1 ... settings.width ]\n          buffer.shift()\n          buffer.push fallback\n          send buffer[ .. ]\n      return null\n    had_value = true\n    buffer.shift()\n    buffer.push d\n    send buffer[ .. ]\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$lookaround = ( settings ) ->\n  ### Turns stream of values into stream of lists of values, each `( 2 * delta ) + 1` elements long;\n  unlike `$window()`, will send exactly as many lists as there are values in the stream. Default\n  is `delta: 1`, i.e. you get to see lists `[ prv, d, nxt, ]` where `prv` is the previous value\n  (or the fallback which itself defaults to `null`), `d` is the current value, and `nxt` is the\n  upcoming value (or `fallback` in case the stream will end after this value). ###\n  defaults  = { delta: 1, fallback: null, }\n  settings  = assign {}, defaults, settings\n  validate.pipestreams_$lookaround_settings settings\n  #.........................................................................................................\n  if settings.leapfrog?\n    throw new Error \"µ77872 setting 'leapfrog' only valid for PS.lookaround(), not PS.$lookaround()\"\n  #.........................................................................................................\n  if settings.delta is 0\n    return @$ ( d, send ) => send [ d, ]\n  #.........................................................................................................\n  fallback  = settings.fallback\n  misfit    = Symbol 'misfit'\n  delta     = center = settings.delta\n  pipeline  = []\n  pipeline.push @$window { width: ( 2 * delta + 1 ), fallback: misfit, }\n  pipeline.push @$ ( d, send ) =>\n    # debug 'µ11121', rpr d\n    # debug 'µ11121', rpr ( ( if x is misfit then fallback else x ) for x in d )\n    return null if d[ center ] is misfit\n    send ( ( if x is misfit then fallback else x ) for x in d )\n    return null\n  return @pull pipeline...\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@window = ( settings, transform ) ->\n  switch arity = arguments.length\n    when 1\n      [ settings, transform, ] = [ null, settings, ]\n    when 2 then null\n    else throw new Error \"µ23111 expected 1 or 2 arguments, got #{arity}\"\n  #.........................................................................................................\n  if ( leapfrog = settings?.leapfrog )?\n    delete settings.leapfrog\n  #.........................................................................................................\n  pipeline = []\n  pipeline.push @$window settings\n  pipeline.push transform\n  R = @pull pipeline...\n  #.........................................................................................................\n  if leapfrog?\n    return @leapfrog leapfrog, R\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@lookaround = ( settings, transform ) ->\n  switch arity = arguments.length\n    when 1\n      [ settings, transform, ] = [ null, settings, ]\n    when 2 then null\n    else throw new Error \"µ23112 expected 1 or 2 arguments, got #{arity}\"\n  #.........................................................................................................\n  if ( leapfrog = settings?.leapfrog )?\n    delete settings.leapfrog\n  #.........................................................................................................\n  pipeline = []\n  pipeline.push @$lookaround settings\n  pipeline.push transform\n  R = @pull pipeline...\n  #.........................................................................................................\n  if leapfrog?\n    return @leapfrog leapfrog, R\n  #.........................................................................................................\n  return R\n\n\n#===========================================================================================================\n# ASYNC TRANSFORMS\n#-----------------------------------------------------------------------------------------------------------\n@$defer =         -> $paramap ( d, handler ) -> defer       -> handler null, d\n@$delay = ( dts ) -> $paramap ( d, handler ) -> after dts,  -> handler null, d\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$pass        =                         -> map ( data ) => data\n@$end_if      = ( filter )              -> @$ ( d, send ) -> if (     filter d ) then send.end() else send d\n@$continue_if = ( filter )              -> @$ ( d, send ) -> if ( not filter d ) then send.end() else send d\n@mark_as_sink = ( method, description ) -> method[ Symbol.for 'sink' ] = description; return method\n\n#-----------------------------------------------------------------------------------------------------------\n@$drain = ( on_end = null ) ->\n  if on_end?\n    R = $pull_drain null, ( error ) ->\n      throw error if error?\n      on_end()\n  else\n    R = $pull_drain()\n  return @mark_as_sink R, { type: '$drain', on_end, }\n\n#-----------------------------------------------------------------------------------------------------------\n@new_pausable = -> ( require 'pull-pause' )()\n\n#-----------------------------------------------------------------------------------------------------------\n@$watch = ( settings, method ) ->\n  #.........................................................................................................\n  switch arity = arguments.length\n    #.......................................................................................................\n    when 1\n      [ settings, method, ] = [ null, settings, ]\n      #.....................................................................................................\n      return @$ ( d, send ) =>\n        method d\n        send d\n        return null\n    #.......................................................................................................\n    when 2\n      return @$watch method unless settings?\n      ### If any `surround` feature is called for, wrap all surround values so that we can safely\n      distinguish between them and ordinary stream values; this is necessary to prevent them from leaking\n      into the regular stream outside the `$watch` transform: ###\n      take_second     = Symbol 'take-second'\n      settings        = assign {}, settings\n      settings[ key ] = [ take_second, value, ] for key, value of settings\n      #.....................................................................................................\n      return @$ settings, ( d, send ) =>\n        if ( CND.isa_list d ) and ( d[ 0 ] is take_second )\n          method d[ 1 ]\n        else\n          method d\n          send d\n        return null\n  #.........................................................................................................\n  throw new Error \"µ18244 expected one or two arguments, got #{arity}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@pull = ( methods... ) ->\n  return @$pass() if methods.length is 0\n  for method, idx in methods\n    continue if ( type = CND.type_of method ) is 'function'\n    continue if CND.isa_pod method ### allowing for `{ x.source, x.sink, }` duplex streams ###\n    throw new Error \"µ25478 expected a function, got a #{type} for argument # #{idx + 1}\"\n  return pull methods...\n\n#-----------------------------------------------------------------------------------------------------------\n@$collect = ( settings ) ->\n  collector = settings?.collector ? []\n  last_sym  = Symbol 'last'\n  return @$ { last: last_sym, }, ( d, send ) =>\n    if d is last_sym then send collector\n    else collector.push d\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$spread = ->\n  return @$ ( collection, send ) =>\n    send element for element in collection\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$show = ( settings ) ->\n  title     = settings?[ 'title'      ] ? '-->'\n  serialize = settings?[ 'serialize'  ] ? JSON.stringify\n  return @$watch ( data ) => info title, serialize data\n\n\n#===========================================================================================================\n# SAMPLING / THINNING OUT\n#-----------------------------------------------------------------------------------------------------------\n@$sample = ( p = 0.5, settings ) ->\n  validate.positive_proper_fraction p\n  #.........................................................................................................\n  return ( @$map    ( d ) => d      ) if p is 1\n  return ( @$filter ( d ) => false  ) if p is 0\n  #.........................................................................................................\n  headers   = settings?[ 'headers'     ] ? false\n  seed      = settings?[ 'seed'        ] ? null\n  is_first  = headers\n  rnd       = if seed? then CND.get_rnd seed else Math.random\n  #.........................................................................................................\n  return @$ ( d, send ) =>\n    if is_first\n      is_first = false\n      return send d\n    send d if rnd() < p\n\n#-----------------------------------------------------------------------------------------------------------\n@$scramble = ( p = 0.5, settings ) ->\n  validate.positive_proper_fraction p\n  #.........................................................................................................\n  return @$pass() if p is 0\n  #.........................................................................................................\n  headers   = settings?[ 'headers'     ] ? false\n  seed      = settings?[ 'seed'        ] ? null\n  is_first  = headers\n  rnd       = if seed? then CND.get_rnd seed else Math.random\n  last      = Symbol 'last'\n  cache     = []\n  send      = null\n  shuffle   = if seed? then ( CND.get_shuffle seed, seed ) else ( CND.shuffle.bind CND )\n  #.........................................................................................................\n  flush = ->\n    shuffle cache\n    send cache.pop() while cache.length > 0\n    cache.length = 0\n    return null\n  #.........................................................................................................\n  return @$ { last, }, ( d, send_ ) =>\n    send = send_\n    return flush() if d is last\n    #.......................................................................................................\n    if is_first\n      is_first = false\n      return send d\n    #.......................................................................................................\n    if rnd() >= p\n      cache.push d\n      return flush()\n    #.......................................................................................................\n    cache.push d\n    return null\n\n"
  ]
}