{
  "version": 3,
  "file": "logging.js",
  "sourceRoot": "..",
  "sources": [
    "src/logging.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPESTREAMS/LOGGING'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nafter                     = ( dts, f ) -> setTimeout  f, dts * 1000\nevery                     = ( dts, f ) -> setInterval f, dts * 1000\ndefer                     = setImmediate\n{ jr\n  is_empty }              = CND\n#...........................................................................................................\n# PS                        = require '../..'\n# { $, $async, }            = PS.export()\n{ inspect, }              = require 'util'\nxrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\n#...........................................................................................................\nSTACKTRACE                = require 'stack-trace' ### https://github.com/felixge/node-stack-trace ###\nget_source                = require 'get-source' ### https://github.com/xpl/get-source ###\n\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_source_ref = ( delta, prefix, color ) ->\n  trace           = STACKTRACE.get()[ delta + 1 ]\n  js_filename     = trace.getFileName()\n  js_line_nr      = trace.getLineNumber()\n  js_column_nr    = trace.getColumnNumber()\n  target          = ( get_source js_filename ).resolve { line: js_line_nr, column: js_column_nr, }\n  target_column   = target.column\n  target_line     = target.sourceLine[ target_column .. ]\n  target_line     = target_line.replace /^\\s*(.*?)\\s*$/g, '$1'\n  target_path     = target.sourceFile.path\n  display_path    = target_path.replace /\\.[^.]+$/, ''\n  display_path    = '...' + display_path[ display_path.length - 10 .. ]\n  target_line_nr  = target.line\n  ### TAINT use tabular as in old pipedreams ###\n  R               = \"#{CND.gold prefix} #{CND.grey display_path} #{CND.white target_line_nr} #{CND[ color ] target_line}\"\n  return R.padEnd 150, ' '\n\n#-----------------------------------------------------------------------------------------------------------\n@get_logger = ( letter, color ) ->\n  transform_nr = 0\n  return ( transform ) =>\n    transform_nr   += +1\n    prefix          = \"#{CND[ color ] CND.reverse '  '} #{CND[ color ] letter + transform_nr}\"\n    source_ref      = @_get_source_ref 1, prefix, color\n    pipeline        = []\n    leader          = '  '.repeat transform_nr\n    echo source_ref\n    if transform.source? and transform.sink?\n      throw new Error \"unable to use logging with duplex stream\"\n    switch transform.length\n      when 0\n        pipeline.push transform\n        pipeline.push @$watch ( d ) -> echo \"#{prefix}#{leader}#{xrpr d}\"\n      when 1\n        if transform_nr is 1\n          pipeline.push @$watch ( d ) -> echo '-'.repeat 108\n        pipeline.push @$watch ( d ) -> echo \"#{prefix}#{leader}#{CND[ color ] CND.reverse '  '} #{xrpr d}\"\n        pipeline.push transform\n        pipeline.push @$watch ( d ) -> echo \"#{prefix}#{leader}#{CND[ color ] CND.reverse '  '} #{xrpr d}\"\n    return @pull pipeline...\n\n\n\n\n############################################################################################################\nunless module.parent?\n  null\n  # test @\n  # test @[ \"circular pipeline 1\" ], { timeout: 5000, }\n  # test @[ \"circular pipeline 2\" ], { timeout: 5000, }\n  # test @[ \"duplex\" ]\n  # @[ \"_duplex 1\" ]()\n  # @[ \"_duplex 2\" ]()\n\n"
  ]
}