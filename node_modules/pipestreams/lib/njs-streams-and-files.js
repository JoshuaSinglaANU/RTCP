// Generated by CoffeeScript 2.5.1
(function() {
  'use strict';
  var CND, FS, TO_NODE_STREAM, TO_PULL_STREAM, badge, defer;

  //###########################################################################################################
  CND = require('cnd');

  badge = 'PIPESTREAMS/NJS-STREAMS-AND-FILES';

  FS = require('fs');

  TO_PULL_STREAM = require('stream-to-pull-stream');

  TO_NODE_STREAM = require('../deps/pull-stream-to-stream-patched');

  // TO_NODE_STREAM            = require 'pull-stream-to-stream'
  defer = setImmediate;

  //===========================================================================================================
  // READ FROM, WRITE TO FILES, NODEJS STREAMS
  //-----------------------------------------------------------------------------------------------------------
  this.read_from_file = function(path, options) {
    /* TAINT consider using https://pull-stream.github.io/#pull-file-reader instead */
    var arity, on_end;
    switch ((arity = arguments.length)) {
      case 1:
        null;
        break;
      case 2:
        if (CND.isa_function(options)) {
          [path, options, on_end] = [path, null, options];
        }
        break;
      default:
        throw new Error(`µ9983 expected 1 or 2 arguments, got ${arity}`);
    }
    //.........................................................................................................
    return this.read_from_nodejs_stream(FS.createReadStream(path, options));
  };

  //-----------------------------------------------------------------------------------------------------------
  this.read_chunks_from_file = function(path, byte_count) {
    var pfy, source;
    if (!((CND.isa_number(byte_count)) && (byte_count > 0) && (byte_count === parseInt(byte_count)))) {
      throw new Error(`expected positive integer number, got ${rpr(byte_count)}`);
    }
    pfy = (require('util')).promisify;
    source = this.new_push_source();
    //.........................................................................................................
    defer(async() => {
      var buffer, fd, read;
      fd = (await (pfy(FS.open))(path, 'r'));
      read = pfy(FS.read);
      while (true) {
        buffer = Buffer.alloc(byte_count);
        await read(fd, buffer, 0, byte_count, null);
        source.send(buffer);
      }
      return null;
    });
    //.........................................................................................................
    return source;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.write_to_file = function(path, options, on_end) {
    /* TAINT consider to abandon all sinks except `$drain()` and use throughs with writers instead */
    /* TAINT consider using https://pull-stream.github.io/#pull-write-file instead */
    /* TAINT code duplication */
    var R, arity, description;
    switch ((arity = arguments.length)) {
      case 1:
        null;
        break;
      case 2:
        if (CND.isa_function(options)) {
          [path, options, on_end] = [path, null, options];
        }
        break;
      case 3:
        break;
      default:
        throw new Error(`µ9983 expected 1 to 3 arguments, got ${arity}`);
    }
    //.........................................................................................................
    R = this.write_to_nodejs_stream(FS.createWriteStream(path, options), on_end);
    description = {
      type: 'write_to_file',
      path,
      options,
      on_end
    };
    return this.mark_as_sink(R, description);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.read_from_nodejs_stream = function(stream) {
    var arity;
    switch ((arity = arguments.length)) {
      case 1:
        null;
        break;
      default:
        throw new Error(`µ9983 expected 1 argument, got ${arity}`);
    }
    //.........................................................................................................
    return TO_PULL_STREAM.source(stream, function(error) {
      return finish(error);
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.write_to_nodejs_stream = function(stream, on_end) {
    /* TAINT consider to abandon all sinks except `$drain()` and use throughs with writers instead */
    /* TAINT code duplication */
    var R, arity, description, finish, has_finished, type;
    switch ((arity = arguments.length)) {
      case 1:
      case 2:
        null;
        break;
      default:
        throw new Error(`µ9983 expected 1 or 2 arguments, got ${arity}`);
    }
    //.........................................................................................................
    if ((on_end != null) && ((type = CND.type_of(on_end)) !== 'function')) {
      throw new Error(`µ9383 expected a function, got a ${type}`);
    }
    //.........................................................................................................
    has_finished = false;
    //.........................................................................................................
    finish = function(error) {
      /* In case there was an error, throw it: */
      if (error != null) {
        has_finished = true;
        if (error != null) {
          throw error;
        }
      }
      //.......................................................................................................
      if (!has_finished) {
        has_finished = true;
        if (on_end != null) {
          on_end();
        }
      }
      //.......................................................................................................
      return null;
    };
    //.........................................................................................................
    stream.on('close', function() {
      return finish();
    });
    //.........................................................................................................
    R = TO_PULL_STREAM.sink(stream, function(error) {
      return finish(error);
    });
    description = {
      type: 'write_to_nodejs_stream',
      stream,
      on_end
    };
    return this.mark_as_sink(R, description);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.node_stream_from_source = function(source) {
    return TO_NODE_STREAM.source(source);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.node_stream_from_sink = function(sink) {
    /* TAINT consider to abandon all sinks except `$drain()` and use throughs with writers instead */
    var R, description;
    R = TO_NODE_STREAM.sink(sink);
    description = {
      type: 'node_stream_from_sink',
      sink
    };
    return this.mark_as_sink(R, description);
  };

}).call(this);

//# sourceMappingURL=njs-streams-and-files.js.map
