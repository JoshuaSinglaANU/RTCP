{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/declaring.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\n{ assign\n  jr\n  rpr\n  xrpr\n  js_type_of }            = require './helpers'\nisa_copy                  = Symbol 'isa_copy'\nconstructor_of_generators = ( ( -> yield 42 )() ).constructor\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT make catalog of all 'deep JS' names that must never be used as types, b/c e.g a type 'bind'\nwould shadow native `f.bind()` ###\n@illegal_types = [\n  'bind'\n  'toString'\n  'valueOf'\n  ]\n\n#-----------------------------------------------------------------------------------------------------------\ncopy_if_original = ( x ) ->\n  return x if x[ isa_copy ]\n  R = assign {}, x\n  R[ isa_copy ] = true\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_satisfies_all_aspects = ( type, xP... ) ->\n  return true unless ( @_get_unsatisfied_aspect type, xP... )?\n  return false\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_unsatisfied_aspect = ( type, xP... ) ->\n  ### Check with `type_of()` if type not in spec: ###\n  unless ( spec = @specs[ type ] )?\n    return null if ( factual_type = @type_of xP... ) is type\n    return \"#{rpr type} is a known type\"\n  ### Check all constraints in spec: ###\n  for aspect, test of spec.tests\n    unless test.apply @, xP\n      return aspect\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@type_of = ( x ) ->\n  throw new Error \"^7746^ expected 1 argument, got #{arity}\" unless arguments.length is 1\n  return 'null'       if x is null\n  return 'undefined'  if x is undefined\n  return 'infinity'   if ( x is Infinity  ) or  ( x is -Infinity  )\n  return 'boolean'    if ( x is true      ) or  ( x is false      )\n  return 'nan'        if ( Number.isNaN     x )\n  return 'buffer'     if ( Buffer.isBuffer  x )\n  #.........................................................................................................\n  if ( tagname = x[ Symbol.toStringTag ] )?\n    return 'arrayiterator'  if tagname is 'Array Iterator'\n    return 'stringiterator' if tagname is 'String Iterator'\n    return 'mapiterator'    if tagname is 'Map Iterator'\n    return 'setiterator'    if tagname is 'Set Iterator'\n    return tagname.toLowerCase()\n  #.........................................................................................................\n  ### Domenic Denicola Device, see https://stackoverflow.com/a/30560581 ###\n  return 'nullobject' if ( c = x.constructor ) is undefined\n  return 'object'     if ( typeof c ) isnt 'function'\n  if ( R = c.name.toLowerCase() ) is ''\n    return 'generator' if x.constructor is constructor_of_generators\n    ### NOTE: throw error since this should never happen ###\n    return ( ( Object::toString.call x ).slice 8, -1 ).toLowerCase() ### Mark Miller Device ###\n  #.........................................................................................................\n  return 'wrapper'  if ( typeof x is 'object' ) and R in [ 'boolean', 'number', 'string', ]\n  return 'float'    if R is 'number'\n  return 'regex'    if R is 'regexp'\n  return 'text'     if R is 'string'\n  return 'list'     if R is 'array'\n  ### thx to https://stackoverflow.com/a/29094209 ###\n  ### TAINT may produce an arbitrarily long throwaway string ###\n  return 'class'    if R is 'function' and x.toString().startsWith 'class '\n  return R\n\n\n#-----------------------------------------------------------------------------------------------------------\n@types_of = ( xP... ) ->\n  R = []\n  for type, spec of @specs\n    ok = true\n    for aspect, test of spec.tests\n      unless test.apply @, xP\n        ok = false\n        break\n    R.push type if ok\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@declare = ( P... ### type, spec?, test? ### ) ->\n  switch arity = P.length\n    when 1 then return @_declare_1 P...\n    when 2 then return @_declare_2 P...\n    when 3 then return @_declare_3 P...\n  throw new Error \"µ6746 expected between 1 and 3 arguments, got #{arity}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@_declare_1 = ( spec ) ->\n  unless ( T = js_type_of spec ) is 'object'\n    throw new Error \"µ6869 expected an object for spec, got a #{T}\"\n  #.........................................................................................................\n  unless ( T = js_type_of spec.type ) is 'string'\n    throw new Error \"µ6992 expected a text for spec.type, got a #{T}\"\n  #.........................................................................................................\n  switch ( T = js_type_of spec.tests )\n    when 'function' then spec.tests = { main: spec.tests, }\n    when 'object'   then null\n    else throw new Error \"µ7115 expected an object for spec.tests, got a #{T}\"\n  #.........................................................................................................\n  return @_declare spec\n\n#-----------------------------------------------------------------------------------------------------------\n@_declare_2 = ( type, spec_or_test ) ->\n  switch T = js_type_of spec_or_test\n    #.......................................................................................................\n    when 'function'\n      return @_declare_1 { type, tests: { main: spec_or_test, }, }\n    #.......................................................................................................\n    when 'asyncfunction'\n      throw \"µ7238 asynchronous functions not yet supported\"\n  #.........................................................................................................\n  if T isnt 'object'\n    throw new Error \"µ7361 expected an object, got a #{T} for spec\"\n  #.........................................................................................................\n  if spec_or_test.type? and ( not spec_or_test.type is type )\n    throw new Error \"µ7484 type declarations #{rpr type} and #{rpr spec_or_test.type} do not match\"\n  #.........................................................................................................\n  spec      = copy_if_original spec_or_test\n  spec.type = type\n  return @_declare_1 spec\n\n#-----------------------------------------------------------------------------------------------------------\n@_declare_3 = ( type, spec, test ) ->\n  if ( T = js_type_of spec ) isnt 'object'\n    throw new Error \"µ7607 expected an object, got a #{T} for spec\"\n  #.........................................................................................................\n  unless ( T = js_type_of test ) is 'function'\n    throw new Error \"µ7730 expected a function for test, got a #{T}\"\n  #.........................................................................................................\n  if spec.tests?\n    throw new Error \"µ7853 spec cannot have tests when tests are passed as argument\"\n  #.........................................................................................................\n  spec       = copy_if_original spec\n  spec.tests = { main: test, }\n  return @_declare_2 type, spec\n\n#-----------------------------------------------------------------------------------------------------------\n@_declare = ( spec ) ->\n  spec      = copy_if_original spec\n  delete spec[ isa_copy ]\n  { type, } = spec\n  spec.type = type\n  #.........................................................................................................\n  if type in @illegal_types\n    throw new Error \"µ7976 #{rpr type} is not a legal type name\"\n  #.........................................................................................................\n  if ( @specs[ type ] )?\n    throw new Error \"µ8099 type #{rpr type} already declared\"\n  #.........................................................................................................\n  @specs[ type ]  = spec\n  @isa[ type ]    = ( P... ) => @isa type, P...\n  # @validate[ type ]    = ( P... ) => @validate type, P...\n  spec.size       = @_sizeof_method_from_spec type, spec\n  #.........................................................................................................\n  return null\n\n\n"
  ]
}