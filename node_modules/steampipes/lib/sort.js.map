{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/sort.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nbadge                     = 'STEAMPIPES/SORT'\ndebug                     = CND.get_logger 'debug',     badge\ntypes                     = require './types'\n\n# #-----------------------------------------------------------------------------------------------------------\n# @$sort = ( settings ) ->\n#   last      = Symbol 'last'\n#   settings  = { key: null, settings..., }\n#   collector = []\n#   return @$ { last, }, ( d, send ) =>\n#     if d is last\n#       if ( key = settings.key )?\n#         collector.sort ( a, b ) =>\n#           return -1 if a[ key ] < b[ key ]\n#           return +1 if a[ key ] > b[ key ]\n#           return  0\n#       else\n#         collector.sort()\n#       send d for d in collector\n#       collector.length = 0\n#       return null\n#     collector.push d\n#     return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$sort = ( settings ) ->\n  ### https://github.com/mziccard/node-timsort ###\n  TIMSORT   = require 'timsort'\n  direction = 'ascending'\n  sorter    = null\n  key       = null\n  strict    = true\n  switch arity = arguments.length\n    when 0 then null\n    when 1\n      direction = settings[ 'direction' ] ? 'ascending'\n      sorter    = settings[ 'sorter'    ] ? null\n      key       = settings[ 'key'       ] ? null\n      strict    = settings[ 'strict'    ] ? true\n    else throw new Error \"µ33893 expected 0 or 1 arguments, got #{arity}\"\n  #.........................................................................................................\n  unless direction in [ 'ascending', 'descending', ]\n    throw new Error \"µ34658 expected 'ascending' or 'descending' for direction, got #{rpr direction}\"\n  #.........................................................................................................\n  unless sorter?\n    #.......................................................................................................\n    type_of = ( x ) =>\n      ### NOTE for the purposes of magnitude comparison, `Infinity` can be treated as a number: ###\n      R = types.type_of x\n      return if R is 'infinity' then 'float' else R\n    #.......................................................................................................\n    validate_type = ( type_a, type_b, include_list = no ) =>\n      unless type_a is type_b\n        throw new Error \"µ35423 unable to compare a #{type_a} to a #{type_b}\"\n      if include_list\n        unless type_a in [ 'float', 'date', 'text', 'list', ]\n          throw new Error \"µ36188 unable to compare values of type #{type_a}\"\n      else\n        unless type_a in [ 'float', 'date', 'text', ]\n          throw new Error \"µ36953 unable to compare values of type #{type_a}\"\n      return null\n    #.......................................................................................................\n    if key?\n      sorter = ( a, b ) =>\n        a = a[ key ]\n        b = b[ key ]\n        if strict\n          validate_type ( type_of a ), ( type_of b ), no\n        return +1 if ( if direction is 'ascending' then a > b else a < b )\n        return -1 if ( if direction is 'ascending' then a < b else a > b )\n        return  0\n    #.......................................................................................................\n    else\n      sorter = ( a, b ) =>\n        if strict\n          validate_type ( type_a = type_of a ), ( type_b = type_of b ), yes\n        if type_a is 'list'\n          a = a[ 0 ]\n          b = b[ 0 ]\n          if strict\n            validate_type ( type_of a ), ( type_of b ), no\n        return +1 if ( if direction is 'ascending' then a > b else a < b )\n        return -1 if ( if direction is 'ascending' then a < b else a > b )\n        return  0\n  #.........................................................................................................\n  $sort = =>\n    collector = []\n    return @$ { last: null, }, ( data, send ) =>\n      if data?\n        collector.push data\n      else\n        TIMSORT.sort collector, sorter\n        send x for x in collector\n        collector.length = 0\n      return null\n  #.........................................................................................................\n  return $sort()\n"
  ]
}