{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/standard-transforms.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,GAAA,EAAA,MAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAb5B;;;EAeA,CAAA,CAAE,EAAF,CAAA,GAA4B,GAA5B;;EACA,MAAA,GAA4B,MAAM,CAAC,OAhBnC;;;EAkBA,CAAA,CAAE,GAAF,EACE,QADF,EAEE,OAFF,CAAA,GAE4B,OAAA,CAAQ,SAAR,CAF5B,EAlBA;;;EAwBA,IAAC,CAAA,IAAD,GAAU,QAAA,CAAE,MAAF,CAAA;WAAc,IAAC,CAAA,CAAD,CAAG,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;aAAe,IAAA,CAAK,MAAA,CAAO,CAAP,CAAL;IAAf,CAAH;EAAd;;EACV,IAAC,CAAA,KAAD,GAAU,QAAA,CAAA,CAAA;WAAG,IAAC,CAAA,CAAD,CAAG,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;aAAe,IAAA,CAAK,CAAL;IAAf,CAAH;EAAH,EAzBV;;;EA4BA,IAAC,CAAA,MAAD,GAAU,QAAA,CAAE,WAAW,IAAb,EAAmB,SAAS,IAA5B,CAAA;AACV,QAAA;AAAE,YAAO,CAAE,KAAA,GAAQ,SAAS,CAAC,MAApB,CAAP;AAAA,WACO,CADP;QACc;AAAP;AADP,WAEO,CAFP;QAEc;AAAP;AAFP,WAGO,CAHP;QAII,IAAG,GAAG,CAAC,QAAJ,CAAa,QAAb,CAAH;UACE,CAAE,QAAF,EAAY,MAAZ,CAAA,GAAwB,CAAE,IAAF,EAAQ,QAAR,EAD1B;;AADG;AAHP;QAMO,MAAM,IAAI,KAAJ,CAAU,CAAA,+BAAA,CAAA,CAAkC,KAAlC,CAAA,CAAV;AANb;;MAOA,WAAY,CAAA;;IACZ,IAA4B,cAA5B;MAAA,QAAQ,CAAC,MAAT,GAAkB,OAAlB;;AACA,WAAO,IAAC,CAAA,OAAD,CAAS,QAAT;EAVC,EA5BV;;;EAyCA,IAAC,CAAA,OAAD,GAAW,QAAA,CAAE,QAAF,CAAA;AACX,QAAA,CAAA,EAAA,KAAA,EAAA,gBAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA;IAAE,IAAA,qEAA6B;IAC7B,IAAG,kCAAH;MACE,QAAQ,CAAC,QAAT,CAAkB,MAAlB;AACA,cAAO,CAAE,KAAA,GAAQ,MAAM,CAAC,MAAjB,CAAP;AAAA,aACO,CADP;UACc;AAAP;AADP,aAEO,CAFP;UAGI,IAAa,IAAA,KAAQ,IAArB;YAAA,IAAA,GAAO,GAAP;;AADG;AAFP;UAIO,MAAM,IAAI,KAAJ,CAAU,CAAA,+BAAA,CAAA,CAAkC,KAAlC,CAAA,CAAV;AAJb,OAFF;;IAOA,QAAA,GAAoB,cAAA,IAAU,CAAE,IAAA,KAAU,IAAZ;IAC9B,gBAAA,GAAoB,gBAAA,IAAY,MAAM,CAAC,MAAP,KAAiB;IACjD,CAAA,GAAoB,SAAG,IAAC,CAAA,KAAK,CAAC,gBAAV,EAAsB,IAAtB,EAA4B,MAA5B,EAAoC,gBAApC,EAAsD,QAAtD;IACpB,IAA8B,cAA9B;MAAA,CAAC,CAAC,MAAF,GAAoB,OAApB;;AACA,WAAO;EAbE,EAzCX;;;EAyDA,IAAC,CAAA,KAAD,GAAS,QAAA,CAAE,QAAF,CAAA;AACT,QAAA,GAAA,EAAA;IAAE,KAAA,GAAQ,oEAAoB,cAApB,CAAA,GAAuC;AAC/C,WAAO,IAAC,CAAA,CAAD,CAAG,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;MACR,IAAA,CAAK,CAAE,GAAG,CAAC,IAAJ,CAAS,KAAT,CAAF,CAAA,GAAqB,CAAE,GAAG,CAAC,IAAJ,CAAS,GAAA,CAAI,CAAJ,CAAT,CAAF,CAA1B;aACA,IAAA,CAAK,CAAL;IAFQ,CAAH;EAFA,EAzDT;;;EAgEA,IAAC,CAAA,MAAD,GAAU,QAAA,CAAE,QAAF,EAAY,MAAZ,CAAA,EAAA;;;;AACV,QAAA,KAAA,EAAA,GAAA,EAAA,WAAA,EAAA;AAAE,YAAO,KAAA,GAAQ,SAAS,CAAC,MAAzB;AAAA,WACO,CADP;QAEI,MAAA,GAAS;AACT,eAAO,IAAC,CAAA,CAAD,CAAG,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;UAAe,MAAA,CAAO,CAAP;iBAAU,IAAA,CAAK,CAAL;QAAzB,CAAH,EAHX;;AAAA,WAKO,CALP;QAMI,IAA6B,gBAA7B;AAAA,iBAAO,IAAC,CAAA,MAAD,CAAQ,MAAR,EAAP;;QAIA,WAAA,GAAkB,MAAA,CAAO,aAAP;QAClB,QAAA,GAAkB,MAAA,CAAO,CAAA,CAAP,EAAW,QAAX;QAClB,KAAA,eAAA;;UAAA,QAAQ,CAAE,GAAF,CAAR,GAAkB,CAAE,WAAF,EAAe,KAAf;QAAlB,CANN;;AAQM,eAAO,IAAC,CAAA,CAAD,CAAG,QAAH,EAAa,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;UAClB,IAAG,CAAE,GAAG,CAAC,IAAJ,CAAS,CAAT,CAAF,CAAA,IAAmB,CAAE,CAAC,CAAE,CAAF,CAAD,KAAU,WAAZ,CAAtB;YACE,MAAA,CAAO,CAAC,CAAE,CAAF,CAAR,EADF;WAAA,MAAA;YAGE,MAAA,CAAO,CAAP;YACA,IAAA,CAAK,CAAL,EAJF;;AAKA,iBAAO;QANW,CAAb;AAdX,KAAF;;IAsBE,MAAM,IAAI,KAAJ,CAAU,CAAA,0CAAA,CAAA,CAA6C,KAA7C,CAAA,CAAV;EAvBE,EAhEV;;;EA0FA,IAAC,CAAA,OAAD,GAAW,QAAA,CAAE,MAAF,CAAA;AACX,QAAA;IAAE,IAAO,CAAE,IAAA,GAAO,OAAA,CAAQ,MAAR,CAAT,CAAA,KAA6B,UAApC;MACE,MAAM,IAAI,KAAJ,CAAU,CAAA,qDAAA,CAAA,CAAwD,IAAxD,CAAA,CAAV,EADR;;AAEA,WAAO,IAAC,CAAA,CAAD,CAAG,CAAE,IAAF,EAAQ,IAAR,CAAA,GAAA;MAAkB,IAAK,MAAA,CAAO,IAAP,CAAL;eAAwB,IAAA,CAAK,IAAL,EAAxB;;IAAlB,CAAH;EAHE,EA1FX;;;EAgGA,IAAC,CAAA,QAAD,GAAY,QAAA,CAAE,QAAF,CAAA;WAAgB,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;AAC5B,UAAA,GAAA,EAAA;MAAE,SAAA,6EAAuC,IAAI,CAAC;AAC5C,aAAO,IAAC,CAAA,IAAD,CAAM,CAAE,IAAF,CAAA,GAAA;eAAY,SAAA,CAAU,IAAV;MAAZ,CAAN;IAFmB;EAAhB,EAhGZ;;;EAqGA,IAAC,CAAA,QAAD,GAAY,QAAA,CAAE,QAAF,CAAA;AACZ,QAAA,SAAA,EAAA,IAAA,EAAA;IAAE,SAAA,0EAAkC;IAClC,IAAA,GAAY,MAAA,CAAO,MAAP;AACZ,WAAO,IAAC,CAAA,CAAD,CAAG,CAAE,IAAF,CAAH,EAAc,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;MACnB,IAAG,CAAA,KAAK,IAAR;AAAkB,eAAO,IAAA,CAAK,SAAL,EAAzB;;MACA,SAAS,CAAC,IAAV,CAAe,CAAf;AACA,aAAO;IAHY,CAAd;EAHG,EArGZ;;;EA8GA,IAAC,CAAA,cAAD,GAAkB,QAAA,CAAE,MAAF,EAAU,cAAc,IAAxB,CAAA;WAAkC,IAAC,CAAA,UAAD,CAAY,MAAZ,EAAoB,WAApB,EAAiC,IAAjC;EAAlC;;EAClB,IAAC,CAAA,cAAD,GAAkB,QAAA,CAAE,MAAF,EAAU,cAAc,IAAxB,CAAA;WAAkC,IAAC,CAAA,UAAD,CAAY,MAAZ,EAAoB,WAApB,EAAiC,KAAjC;EAAlC,EA/GlB;;;EAkHA,IAAC,CAAA,UAAD,GAAc,QAAA,CAAE,MAAF,EAAU,WAAV,EAAuB,IAAvB,CAAA;AACd,QAAA,SAAA,EAAA;;MAAE,cAAoB,QAAA,CAAE,CAAF,CAAA;eAAS;MAAT;;IACpB,QAAQ,CAAC,QAAT,CAAkB,MAAlB;IACA,QAAQ,CAAC,QAAT,CAAkB,WAAlB;IACA,SAAA,GAAoB;IACpB,IAAA,GAAoB,MAAA,CAAO,MAAP,EAJtB;;AAME,WAAO,IAAC,CAAA,CAAD,CAAG,CAAE,IAAF,CAAH,EAAc,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;MACnB,IAAG,CAAA,KAAK,IAAR;QACE,IAAG,iBAAH;UAAmB,IAAA,CAAK,WAAA,CAAY,SAAZ,CAAL;UAA4B,SAAA,GAAY,KAA3D;;AACA,eAAO,KAFT;;MAGA,IAAG,MAAA,CAAO,CAAP,CAAH;QACE,IAAG,IAAH;UACE,qBAAE,YAAA,YAAa,EAAf,CAAmB,CAAC,IAApB,CAAyB,CAAzB,EADF;;QAEA,IAAG,iBAAH;UAAmB,IAAA,CAAK,WAAA,CAAY,SAAZ,CAAL;UAA4B,SAAA,GAAY,KAA3D;;AACA,eAAO,KAJT;;MAKA,qBAAE,YAAA,YAAa,EAAf,CAAmB,CAAC,IAApB,CAAyB,CAAzB;AACA,aAAO;IAVY,CAAd;EAPK,EAlHd;;;;;EAwIA,IAAC,CAAA,SAAD,GAAa,QAAA,CAAE,QAAF,CAAA;WAAgB,IAAC,CAAA,CAAD,CAAG,QAAH,EAAa,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;aAAe,IAAA,CAAK,CAAL;IAAf,CAAb;EAAhB,EAxIb;;;EA2IA,IAAC,CAAA,QAAD,GAAY,QAAA,CAAE,MAAF,EAAU,SAAV,CAAA;WAAyB,IAAC,CAAA,CAAD,CAAG;MAAE,QAAA,EAAU;IAAZ,CAAH,EAA0B,SAA1B;EAAzB,EA3IZ;;;EA8IA,IAAC,CAAA,kBAAD,GAAsB,QAAA,CAAE,SAAF,CAAA,EAAA;;;;AACtB,QAAA,KAAA,EAAA,KAAA,EAAA;IAGE,IAAO,CAAE,KAAA,GAAQ,SAAS,CAAC,MAApB,CAAA,KAAgC,CAAvC;MACE,MAAM,IAAI,KAAJ,CAAU,CAAA,4CAAA,CAAA,CAA+C,KAA/C,CAAA,gBAAA,CAAV,EADR;;IAEA,IAAA,GAAQ;IACR,KAAA,GAAQ,MAAA,CAAO,OAAP;AACR,WAAO,IAAC,CAAA,CAAD,CAAG,CAAE,KAAF,CAAH,EAAe,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;AACxB,UAAA,EAAA,EAAA,CAAA,EAAA;MAAI,IAAqB,CAAA,KAAK,KAA1B;AAAA,eAAO,IAAA,CAAK,CAAL,EAAP;OAAJ;;MAEI,SAAA,CAAU,IAAI,CAAC,IAAI,CAAC,IAAV,CAAe,IAAf,CAAV;MACA,KAAA,sCAAA;;QAAA,IAAA,CAAK,EAAL;MAAA;AACA,aAAO;IALa,CAAf;EARa,EA9ItB;;;EA8JA,IAAC,CAAA,gBAAD,GAAoB,QAAA,CAAE,SAAF,CAAA,EAAA;;AACpB,QAAA;IACE,QAAA,GAAW;AACX,WAAO,IAAC,CAAA,CAAD,CAAG,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;MACR,KAAqB,QAArB;AAAA,eAAO,IAAA,CAAK,CAAL,EAAP;;MACA,QAAA,GAAW;MACX,SAAA,CAAU,CAAV,EAAa,IAAb;AACA,aAAO;IAJC,CAAH;EAHW,EA9JpB;;;EAwKA,IAAC,CAAA,gBAAD,GAAoB,QAAA,CAAE,SAAF,CAAA,EAAA;;;;AACpB,QAAA,KAAA,EAAA,IAAA,EAAA;IAGE,IAAO,CAAE,KAAA,GAAQ,SAAS,CAAC,MAApB,CAAA,KAAgC,CAAvC;MACE,MAAM,IAAI,KAAJ,CAAU,CAAA,4CAAA,CAAA,CAA+C,KAA/C,CAAA,gBAAA,CAAV,EADR;;IAEA,IAAA,GAAQ;IACR,IAAA,GAAQ,MAAA,CAAO,MAAP;AACR,WAAO,IAAC,CAAA,CAAD,CAAG,CAAE,IAAF,CAAH,EAAc,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;AACvB,UAAA,EAAA,EAAA,CAAA,EAAA;MAAI,IAAqB,CAAA,KAAK,IAA1B;AAAA,eAAO,IAAA,CAAK,CAAL,EAAP;OAAJ;;MAEI,SAAA,CAAU,IAAI,CAAC,IAAI,CAAC,IAAV,CAAe,IAAf,CAAV;MACA,KAAA,sCAAA;;QAAA,IAAA,CAAK,EAAL;MAAA;AACA,aAAO;IALY,CAAd;EARW,EAxKpB;;;EAwLA,IAAC,CAAA,wBAAD,GAA4B,QAAA,CAAE,SAAF,CAAA,EAAA;;;;AAC5B,QAAA,KAAA,EAAA,KAAA,EAAA,QAAA,EAAA;IAGE,IAAO,CAAE,KAAA,GAAQ,SAAS,CAAC,MAApB,CAAA,KAAgC,CAAvC;MACE,MAAM,IAAI,KAAJ,CAAU,CAAA,4CAAA,CAAA,CAA+C,KAA/C,CAAA,gBAAA,CAAV,EADR;;IAEA,IAAA,GAAY;IACZ,QAAA,GAAY;IACZ,KAAA,GAAY,MAAA,CAAO,OAAP;IACZ,QAAQ,CAAC,IAAT,CAAc,IAAC,CAAA,CAAD,CAAG,CAAE,KAAF,CAAH,EAAe,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;aAAe,IAAA,CAAK,CAAL;IAAf,CAAf,CAAd;IACA,QAAQ,CAAC,IAAT,CAAc,IAAC,CAAA,MAAD,CAAQ,KAAA,CAAE,CAAF,EAAK,IAAL,EAAW,IAAX,CAAA,GAAA;MACpB,IAAO,CAAA,KAAK,KAAZ;QACE,IAAA,CAAK,CAAL;AACA,eAAO,IAAA,CAAA,EAFT;OAAJ;;MAII,MAAM,SAAA,CAAY,IAAI,CAAC,IAAI,CAAC,IAAV,CAAe,IAAf,CAAZ,EAAmC,CAAA,CAAA,GAAA;AAC7C,YAAA,EAAA,EAAA,CAAA,EAAA;QAAM,KAAA,sCAAA;;UAAA,IAAA,CAAK,EAAL;QAAA;eACA,IAAA,CAAA;MAFuC,CAAnC;AAGN,aAAO;IARa,CAAR,CAAd;AASA,WAAO,IAAC,CAAA,IAAD,CAAM,GAAA,QAAN;EAnBmB,EAxL5B;;;EA8MA,IAAC,CAAA,sBAAD,GAA0B,QAAA,CAAE,SAAF,CAAA,EAAA;;;;AAC1B,QAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA;IAGE,IAAO,CAAE,KAAA,GAAQ,SAAS,CAAC,MAApB,CAAA,KAAgC,CAAvC;MACE,MAAM,IAAI,KAAJ,CAAU,CAAA,4CAAA,CAAA,CAA+C,KAA/C,CAAA,gBAAA,CAAV,EADR;;IAEA,IAAA,GAAY;IACZ,QAAA,GAAY;IACZ,IAAA,GAAY,MAAA,CAAO,MAAP;IACZ,QAAQ,CAAC,IAAT,CAAc,IAAC,CAAA,CAAD,CAAG,CAAE,IAAF,CAAH,EAAc,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;aAAe,IAAA,CAAK,CAAL;IAAf,CAAd,CAAd;IACA,QAAQ,CAAC,IAAT,CAAc,IAAC,CAAA,MAAD,CAAQ,KAAA,CAAE,CAAF,EAAK,IAAL,EAAW,IAAX,CAAA,GAAA;MACpB,IAAO,CAAA,KAAK,IAAZ;QACE,IAAA,CAAK,CAAL;AACA,eAAO,IAAA,CAAA,EAFT;OAAJ;;MAII,MAAM,SAAA,CAAY,IAAI,CAAC,IAAI,CAAC,IAAV,CAAe,IAAf,CAAZ,EAAmC,CAAA,CAAA,GAAA;AAC7C,YAAA,EAAA,EAAA,CAAA,EAAA;QAAM,KAAA,sCAAA;;UAAA,IAAA,CAAK,EAAL;QAAA;eACA,IAAA,CAAA;MAFuC,CAAnC;AAGN,aAAO;IARa,CAAR,CAAd;AASA,WAAO,IAAC,CAAA,IAAD,CAAM,GAAA,QAAN;EAnBiB,EA9M1B;;;EAoOA,IAAC,CAAA,IAAD,GAAQ,QAAA,CAAE,QAAF,CAAA;AACR,QAAA,IAAA,EAAA,QAAA,EAAA;IAAE,MAAA,GAAY,IAAC,CAAA,eAAD,CAAA;IACZ,IAAA,GAAY,MAAA,CAAO,MAAP;IACZ,QAAA,GAAY;IACZ,QAAQ,CAAC,IAAT,CAAc,MAAd;IACA,QAAQ,CAAC,IAAT,CAAc,QAAd;IACA,IAAC,CAAA,IAAD,CAAM,GAAA,QAAN;AACA,WAAO,IAAC,CAAA,CAAD,CAAG,CAAE,IAAF,CAAH,EAAc,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;MACnB,IAAuB,CAAA,KAAK,IAA5B;AAAA,eAAO,MAAM,CAAC,GAAP,CAAA,EAAP;;MACA,MAAM,CAAC,IAAP,CAAY,CAAZ;aACA,IAAA,CAAK,CAAL;IAHmB,CAAd;EAPD,EApOR;;;;;EAoPA,IAAC,CAAA,OAAD,GAAW,QAAA,CAAE,QAAF,EAAY,QAAZ,CAAA,EAAA;;;;;AACX,QAAA,KAAA,EAAA;IAIE,KAAA,GAAQ,OAAA,CAAQ,OAAR;IACR,QAAQ,CAAC,QAAT,CAAkB,QAAlB,EALF;;AAOE,YAAO,KAAA,GAAQ,QAAQ,CAAC,MAAxB;;AAAA,WAEO,CAFP;AAGI,eAAO,IAAC,CAAA,MAAD,CAAQ,CAAE,CAAF,CAAA,GAAA;UACb,IAAc,KAAK,CAAC,MAAN,CAAa,CAAb,EAAgB,QAAhB,CAAd;mBAAA,QAAA,CAAA,EAAA;;QADa,CAAR,EAHX;;AAAA,WAMO,CANP;AAOI,eAAO,IAAC,CAAA,MAAD,CAAQ,CAAE,CAAF,CAAA,GAAA;UACb,IAAc,KAAK,CAAC,MAAN,CAAa,CAAb,EAAgB,QAAhB,CAAd;mBAAA,QAAA,CAAS,CAAT,EAAA;;QADa,CAAR,EAPX;;AAAA,WAUO,CAVP;AAWI,eAAO,IAAC,CAAA,CAAD,CAAG,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;UACR,IAAG,KAAK,CAAC,MAAN,CAAa,CAAb,EAAgB,QAAhB,CAAH;YAAkC,QAAA,CAAS,CAAT,EAAY,IAAZ,EAAlC;WAAA,MAAA;YACkC,IAAA,CAAK,CAAL,EADlC;;AAEA,iBAAO;QAHC,CAAH;AAXX;;QAgBO,MAAM,IAAI,KAAJ,CAAU,CAAA,uDAAA,CAAA,CAA0D,KAA1D,CAAA,CAAV;AAhBb;AAiBA,WAAO;EAzBE;AApPX",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'STEAMPIPES/STANDARD-TRANSFORMS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n{ jr }                    = CND\nassign                    = Object.assign\n#...........................................................................................................\n{ isa\n  validate\n  type_of }               = require './types'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@$map   = ( method ) -> @$ ( d, send ) -> send method d\n@$pass  = -> @$ ( d, send ) -> send d\n\n#-----------------------------------------------------------------------------------------------------------\n@$drain = ( settings = null, on_end = null ) ->\n  switch ( arity = arguments.length )\n    when 0 then null\n    when 2 then null\n    when 1\n      if isa.function settings\n        [ settings, on_end, ] = [ null, settings, ]\n    else throw new Error \"expected 0 to 2 arguments, got #{arity}\"\n  settings ?= {}\n  settings.on_end = on_end if on_end?\n  return @_$drain settings\n\n#-----------------------------------------------------------------------------------------------------------\n@_$drain = ( settings ) ->\n  sink      = settings?.sink ? true\n  if ( on_end = settings.on_end )?\n    validate.function on_end\n    switch ( arity = on_end.length )\n      when 0 then null\n      when 1\n        sink = [] if sink is true\n      else throw new Error \"expected 0 to 1 arguments, got #{arity}\"\n  use_sink          = sink? and ( sink isnt true )\n  call_with_datoms  = on_end? and on_end.length is 1\n  R                 = { [@marks.validated], sink, on_end, call_with_datoms, use_sink, }\n  R.on_end          = on_end if on_end?\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@$show = ( settings ) ->\n  title = ( settings?.title ? 'steampipes ➔' ) + ' '\n  return @$ ( d, send ) =>\n    echo ( CND.grey title ) + ( CND.blue rpr d )\n    send d\n\n#-----------------------------------------------------------------------------------------------------------\n@$watch = ( settings, method ) ->\n  switch arity = arguments.length\n    when 1\n      method = settings\n      return @$ ( d, send ) => method d; send d\n    #.......................................................................................................\n    when 2\n      return @$watch method unless settings?\n      ### If any `surround` feature is called for, wrap all surround values so that we can safely\n      distinguish between them and ordinary stream values; this is necessary to prevent them from leaking\n      into the regular stream outside the `$watch` transform: ###\n      take_second     = Symbol 'take-second'\n      settings        = assign {}, settings\n      settings[ key ] = [ take_second, value, ] for key, value of settings\n      #.....................................................................................................\n      return @$ settings, ( d, send ) =>\n        if ( isa.list d ) and ( d[ 0 ] is take_second )\n          method d[ 1 ]\n        else\n          method d\n          send d\n        return null\n  #.........................................................................................................\n  throw new Error \"µ18244 expected one or two arguments, got #{arity}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@$filter = ( filter ) ->\n  unless ( type = type_of filter ) is 'function'\n    throw new Error \"^steampipes/$filter@5663^ expected a function, got a #{type}\"\n  return @$ ( data, send ) => if ( filter data ) then send data\n\n#-----------------------------------------------------------------------------------------------------------\n@$as_text = ( settings ) -> ( d, send ) =>\n  serialize = settings?[ 'serialize' ] ? JSON.stringify\n  return @$map ( data ) => serialize data\n\n#-----------------------------------------------------------------------------------------------------------\n@$collect = ( settings ) ->\n  collector = settings?.collector ? []\n  last      = Symbol 'last'\n  return @$ { last, }, ( d, send ) =>\n    if d is last then return send collector\n    collector.push d\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$chunkify_keep = ( filter, postprocess = null ) -> @_$chunkify filter, postprocess, true\n@$chunkify_toss = ( filter, postprocess = null ) -> @_$chunkify filter, postprocess, false\n\n#-----------------------------------------------------------------------------------------------------------\n@_$chunkify = ( filter, postprocess, keep ) ->\n  postprocess      ?= ( x ) -> x\n  validate.function filter\n  validate.function postprocess\n  collector         = null\n  last              = Symbol 'last'\n  #.........................................................................................................\n  return @$ { last, }, ( d, send ) ->\n    if d is last\n      if collector? then send postprocess collector; collector = null\n      return null\n    if filter d\n      if keep\n        ( collector ?= [] ).push d\n      if collector? then send postprocess collector; collector = null\n      return null\n    ( collector ?= [] ).push d\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n### Given a `settings` object, add values to the stream as `$ settings, ( d, send ) -> send d` would do,\ne.g. `$surround { first: 'first!', between: 'to appear in-between two values', }`. ###\n@$surround = ( settings ) -> @$ settings, ( d, send ) => send d\n\n#-----------------------------------------------------------------------------------------------------------\n@leapfrog = ( jumper, transform ) -> @$ { leapfrog: jumper, }, transform\n\n#-----------------------------------------------------------------------------------------------------------\n@$once_before_first = ( transform ) ->\n  ### Call transform once before any data item comes down the stream (if any). Transform must only accept\n  a single `send` argument and can send as many data items down the stream which will be prepended\n  to those items coming from upstream. ###\n  unless ( arity = transform.length ) is 1\n    throw new Error \"^steampipes/pullremit@7033^ transform arity #{arity} not implemented\"\n  sink  = []\n  first = Symbol 'first'\n  return @$ { first, }, ( d, send ) =>\n    return send d unless d is first\n    ### TAINT missing `send.end()` method ###\n    transform sink.push.bind sink\n    send d_ for d_ in sink\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$once_with_first = ( transform ) ->\n  ### Call transform once with the first data item (if any). ###\n  is_first = true\n  return @$ ( d, send ) =>\n    return send d unless is_first\n    is_first = false\n    transform d, send\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$once_after_last = ( transform ) ->\n  ### Call transform once after any data item comes down the stream (if any). Transform must only accept\n  a single `send` argument and can send as many data items down the stream which will be appended\n  to those items coming from upstream. ###\n  unless ( arity = transform.length ) is 1\n    throw new Error \"^steampipes/pullremit@7033^ transform arity #{arity} not implemented\"\n  sink  = []\n  last  = Symbol 'last'\n  return @$ { last, }, ( d, send ) =>\n    return send d unless d is last\n    ### TAINT missing `send.end()` method ###\n    transform sink.push.bind sink\n    send d_ for d_ in sink\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$once_async_before_first = ( transform ) ->\n  ### Call transform once before any data item comes down the stream (if any). Transform must only accept\n  a single `send` argument and can send as many data items down the stream which will be prepended\n  to those items coming from upstream. ###\n  unless ( arity = transform.length ) is 2\n    throw new Error \"^steampipes/pullremit@7033^ transform arity #{arity} not implemented\"\n  sink      = []\n  pipeline  = []\n  first     = Symbol 'first'\n  pipeline.push @$ { first, }, ( d, send ) => send d\n  pipeline.push @$async ( d, send, done ) =>\n    unless d is first\n      send d\n      return done()\n    ### TAINT missing `send.end()` method ###\n    await transform ( sink.push.bind sink ), =>\n      send d_ for d_ in sink\n      done()\n    return null\n  return @pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@$once_async_after_last = ( transform ) ->\n  ### Call transform once before any data item comes down the stream (if any). Transform must only accept\n  a single `send` argument and can send as many data items down the stream which will be prepended\n  to those items coming from upstream. ###\n  unless ( arity = transform.length ) is 2\n    throw new Error \"^steampipes/pullremit@7034^ transform arity #{arity} not implemented\"\n  sink      = []\n  pipeline  = []\n  last      = Symbol 'last'\n  pipeline.push @$ { last, }, ( d, send ) => send d\n  pipeline.push @$async ( d, send, done ) =>\n    unless d is last\n      send d\n      return done()\n    ### TAINT missing `send.end()` method ###\n    await transform ( sink.push.bind sink ), =>\n      send d_ for d_ in sink\n      done()\n    return null\n  return @pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@$tee = ( bystream ) ->\n  source    = @new_push_source()\n  last      = Symbol 'last'\n  pipeline  = []\n  pipeline.push source\n  pipeline.push bystream\n  @pull pipeline...\n  return @$ { last, }, ( d, send ) =>\n    return source.end() if d is last\n    source.send d\n    send d\n\n\n#===========================================================================================================\n# SELECT\n#-----------------------------------------------------------------------------------------------------------\n@$select = ( selector, callback ) ->\n  ### Call `callback` function when `DATOM.select d, selector` returns `true`. Callback can have zero or\n  one argument in which case it will be a passive `$watch()`er; if it has two arguments as in\n  `( d, send ) ->` then the callback is responsible for sending data on into the pipeline. In any event\n  all events that do *not* match `selector` will be sent on to downstream. ###\n  DATOM = require 'datom'\n  validate.function callback\n  #.........................................................................................................\n  switch arity = callback.length\n    #.......................................................................................................\n    when 0\n      return @$watch ( d ) =>\n        callback() if DATOM.select d, selector\n    #.......................................................................................................\n    when 1\n      return @$watch ( d ) =>\n        callback d if DATOM.select d, selector\n    #.......................................................................................................\n    when 2\n      return @$ ( d, send ) =>\n        if DATOM.select d, selector then  callback d, send\n        else                              send d\n        return null\n    #.......................................................................................................\n    else throw new Error \"expected callback with up to 2 arguments, got one with #{arity}\"\n  return null\n\n\n\n\n"
  ]
}