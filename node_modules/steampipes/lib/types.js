// Generated by CoffeeScript 2.5.1
(function() {
  'use strict';
  var CND, Intertype, alert, badge, debug, help, info, intertype, jr, rpr, urge, warn, whisper,
    indexOf = [].indexOf;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'PIPEDREAMS/TYPES';

  debug = CND.get_logger('debug', badge);

  alert = CND.get_logger('alert', badge);

  whisper = CND.get_logger('whisper', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  info = CND.get_logger('info', badge);

  jr = JSON.stringify;

  Intertype = (require('intertype')).Intertype;

  intertype = new Intertype(module.exports);

  //-----------------------------------------------------------------------------------------------------------
  this.declare('pd_nonempty_list_of_positive_integers', function(x) {
    if (!this.isa.nonempty_list(x)) {
      return false;
    }
    return x.every((xx) => {
      return this.isa.positive_integer(xx);
    });
  });

  //-----------------------------------------------------------------------------------------------------------
  this.declare('pd_datom_sigil', {
    tests: {
      "x is a chr": function(x) {
        return this.isa.chr(x);
      },
      "x has sigil": function(x) {
        return indexOf.call('^<>~[]', x) >= 0;
      }
    }
  });

  //-----------------------------------------------------------------------------------------------------------
  this.declare('pd_datom_key', {
    tests: {
      "x is a nonempty text": function(x) {
        return this.isa.nonempty_text(x);
      },
      "x has sigil": function(x) {
        return this.isa.pd_datom_sigil(x[0]);
      }
    }
  });

  //-----------------------------------------------------------------------------------------------------------
  this.declare('pd_datom', {
    tests: {
      "x is a object": function(x) {
        return this.isa.object(x);
      },
      "x has key 'key'": function(x) {
        return this.has_key(x, 'key');
      },
      "x.key is a pd_datom_key": function(x) {
        return this.isa.pd_datom_key(x.key);
      },
      "x.$stamped is an optional boolean": function(x) {
        return (x.$stamped == null) || (this.isa.boolean(x.$stamped));
      },
      "x.$dirty is an optional boolean": function(x) {
        return (x.$dirty == null) || (this.isa.boolean(x.$dirty));
      },
      "x.$fresh is an optional boolean": function(x) {
        return (x.$fresh == null) || (this.isa.boolean(x.$fresh));
      },
      //.......................................................................................................
      "x.$vnr is an optional nonempty list of positive integers": function(x) {
        return (x.$vnr == null) || this.isa.pd_nonempty_list_of_positive_integers(x.$vnr);
      }
    }
  });

  //-----------------------------------------------------------------------------------------------------------
  this.declare('steampipes_new_wye_settings', {
    tests: {
      "x is a object": function(x) {
        return this.isa.object(x);
      },
      "x.mode is a text": function(x) {
        return this.isa.text(x.mode);
      },
      "x.mode is known value": function(x) {
        var ref;
        return (ref = x.mode) === 'asis' || ref === 'interleave';
      }
    }
  });

  //-----------------------------------------------------------------------------------------------------------
  this.defaults = {
    steampipes_new_wye_settings: {
      mode: 'asis'
    }
  };

  // #-----------------------------------------------------------------------------------------------------------
// declare 'pipestreams_is_sink_or_through',
//   tests:
//     "x is a function":                        ( x ) -> @isa.function x
//     "x's arity is 1":                         ( x ) -> x.length is 1

  // #-----------------------------------------------------------------------------------------------------------
// declare 'pipestreams_is_sink',
//   tests:
//     "x is a pipestreams_is_sink_or_through":  ( x ) -> @isa.pipestreams_is_sink_or_through x
//     "x[ Symbol.for 'sink' ] is true":         ( x ) -> x[ Symbol.for 'sink' ] ? false

  // #-----------------------------------------------------------------------------------------------------------
// declare 'pipestreams_is_source',
//   tests:
//     "x is a function":                        ( x ) -> @isa.function x
//     "x's arity is 2":                         ( x ) -> x.length is 2

}).call(this);

//# sourceMappingURL=types.js.map
