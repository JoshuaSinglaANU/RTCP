{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "/home/flow/jzr/steampipes/src/tests/basic.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'STEAMPIPES/TESTS/BASIC'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nOS                        = require 'os'\ntest                      = require 'guy-test'\n#...........................................................................................................\nSP                        = require '../..'\n{ $\n  $async\n  $watch\n  $show  }                = SP.export()\n#...........................................................................................................\nread                      = ( path ) -> FS.readFileSync path, { encoding: 'utf-8', }\ndefer                     = setImmediate\n{ inspect, }              = require 'util'\nxrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\njr                        = JSON.stringify\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"test line assembler\" ] = ( T, done ) ->\n#   text = \"\"\"\n#   \"　2. 纯；专：专～。～心～意。\"\n#   !\"　3. 全；满：～生。～地水。\"\n#   \"　4. 相同：～样。颜色不～。\"\n#   \"　5. 另外!的：蟋蟀～名促织。!\"\n#   \"　6. 表示动作短暂，或是一次，或具试探性：算～算。试～试。\"!\n#   \"　7. 乃；竞：～至于此。\"\n#   \"\"\"\n#   # text = \"abc\\ndefg\\nhijk\"\n#   chunks    = text.split '!'\n#   text      = text.replace /!/g, ''\n#   collector = []\n#   assembler = SP._new_line_assembler { extra: true, splitter: '\\n', }, ( error, line ) ->\n#     throw error if error?\n#     if line?\n#       collector.push line\n#       info rpr line\n#     else\n#       # urge rpr text\n#       # help rpr collector.join '\\n'\n#       # debug collector\n#       if CND.equals text, collector.join '\\n'\n#         T.succeed \"texts are equal\"\n#       done()\n#   for chunk in chunks\n#     assembler chunk\n#   assembler null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"test throughput (1)\" ] = ( T, done ) ->\n#   # input   = @new_stream PATH.resolve __dirname, '../test-data/guoxuedashi-excerpts-short.txt'\n#   input   = SP.new_stream PATH.resolve __dirname, '../../test-data/Unicode-NamesList-tiny.txt'\n#   output  = FS.createWriteStream '/tmp/output.txt'\n#   lines   = []\n#   input\n#     .pipe SP.$split()\n#     # .pipe SP.$show()\n#     .pipe SP.$succeed()\n#     .pipe SP.$as_line()\n#     .pipe $ ( line, send ) ->\n#       lines.push line\n#       send line\n#     .pipe output\n#   ### TAINT use PipeStreams method ###\n#   input.on 'end', -> outpudone()\n#   output.on 'close', ->\n#     # if CND.equals lines.join '\\n'\n#     T.succeed \"assuming equality\"\n#     done()\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"test throughput (2)\" ] = ( T, done ) ->\n#   # input   = @new_stream PATH.resolve __dirname, '../test-data/guoxuedashi-excerpts-short.txt'\n#   input   = SP.new_stream PATH.resolve __dirname, '../../test-data/Unicode-NamesList-tiny.txt'\n#   output  = FS.createWriteStream '/tmp/output.txt'\n#   lines   = []\n#   p       = input\n#   p       = p.pipe SP.$split()\n#   # p       = p.pipe SP.$show()\n#   p       = p.pipe SP.$succeed()\n#   p       = p.pipe SP.$as_line()\n#   p       = p.pipe $ ( line, send ) ->\n#       lines.push line\n#       send line\n#   p       = p.pipe output\n#   ### TAINT use PipeStreams method ###\n#   input.on 'end', -> outpudone()\n#   output.on 'close', ->\n#     # if CND.equals lines.join '\\n'\n#     # debug '12001', lines\n#     T.succeed \"assuming equality\"\n#     done()\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"read with pipestreams\" ] = ( T, done ) ->\n#   matcher       = [\n#     '01 ; charset=UTF-8',\n#     '02 @@@\\tThe Unicode Standard 9.0.0',\n#     '03 @@@+\\tU90M160615.lst',\n#     '04 \\tUnicode 9.0.0 final names list.',\n#     '05 \\tThis file is semi-automatically derived from UnicodeData.txt and',\n#     '06 \\ta set of manually created annotations using a script to select',\n#     '07 \\tor suppress information from the data file. The rules used',\n#     '08 \\tfor this process are aimed at readability for the human reader,',\n#     '09 \\tat the expense of some details; therefore, this file should not',\n#     '10 \\tbe parsed for machine-readable information.',\n#     '11 @+\\t\\t© 2016 Unicode®, Inc.',\n#     '12 \\tFor terms of use, see http://www.unicode.org/terms_of_use.html',\n#     '13 @@\\t0000\\tC0 Controls and Basic Latin (Basic Latin)\\t007F',\n#     '14 @@+'\n#     ]\n#   # input_path    = '../../test-data/Unicode-NamesList-tiny.txt'\n#   input_path    = '/home/flow/io/basic-stream-benchmarks/test-data/Unicode-NamesList-tiny.txt'\n#   # output_path   = '/dev/null'\n#   output_path   = '/tmp/output.txt'\n#   input         = SP.new_stream input_path\n#   output        = FS.createWriteStream output_path\n#   collector     = []\n#   S             = {}\n#   S.item_count  = 0\n#   S.byte_count  = 0\n#   p             = input\n#   p             = p.pipe $ ( data, send ) -> whisper '20078-1', rpr data; send data\n#   p             = p.pipe SP.$split()\n#   p             = p.pipe $ ( data, send ) -> help '20078-1', rpr data; send data\n#   #.........................................................................................................\n#   p             = p.pipe SP.$ ( line, send ) ->\n#     S.item_count += +1\n#     S.byte_count += line.length\n#     debug '22001-0', rpr line\n#     collector.push line\n#     send line\n#   #.........................................................................................................\n#   p             = p.pipe $ ( data, send ) -> urge '20078-2', rpr data; send data\n#   p             = p.pipe SP.$as_line()\n#   p             = p.pipe output\n#   #.........................................................................................................\n#   ### TAINT use PipeStreams method ###\n#   output.on 'close', ->\n#     # debug '88862', S\n#     # debug '88862', collector\n#     if CND.equals collector, matcher\n#       T.succeed \"collector equals matcher\"\n#     done()\n#   #.........................................................................................................\n#   ### TAINT should be done by PipeStreams ###\n#   input.on 'end', ->\n#     outpudone()\n#   #.........................................................................................................\n#   return null\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"remit without end detection\" ] = ( T, done ) ->\n#   pipeline = []\n#   pipeline.push $values Array.from 'abcdef'\n#   pipeline.push $ ( data, send ) ->\n#     send data\n#     send '*' + data + '*'\n#   pipeline.push SP.$show()\n#   pipeline.push $pull_drain()\n#   SP.pull pipeline...\n#   T.succeed \"ok\"\n#   done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"remit 1\" ] = ( T, done ) ->\n  result    = []\n  pipeline  = []\n  pipeline.push [ 1, 2, 3, ]\n  # debug 'µ20922', t = $ ( d, send ) -> info 'µ1', d; send d + 10\n  # debug 'µ20922', ( k for k of t )\n  pipeline.push $ ( d, send ) -> info 'µ1', d; send d + 10\n  pipeline.push $ ( d, send ) -> info 'µ2', d; send d; send d + 10\n  pipeline.push $ ( d, send ) -> info 'µ3', d; result.push d; send d\n  pipeline.push SP.$drain ->\n    # debug 'µ11121', jr result\n    T.eq result, [ 11, 21, 12, 22, 13, 23 ]\n    done()\n  SP.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"drain with result\" ] = ( T, done ) ->\n  pipeline  = []\n  pipeline.push [ 1, 2, 3, ]\n  pipeline.push $ ( d, send ) -> info 'µ1', d; send d + 10\n  pipeline.push $ ( d, send ) -> info 'µ2', d; send d; send d + 10\n  pipeline.push SP.$drain ( result ) ->\n    # debug 'µ1112-1', duct\n    # debug 'µ1112-2', jr result\n    T.eq result, [ 11, 21, 12, 22, 13, 23 ]\n    done()\n  duct = SP.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"drain with sink 1\" ] = ( T, done ) ->\n  sink      = []\n  pipeline  = []\n  pipeline.push [ 1, 2, 3, ]\n  pipeline.push $ ( d, send ) -> info 'µ1', d; send d + 10\n  pipeline.push $ ( d, send ) -> info 'µ2', d; send d; send d + 10\n  pipeline.push SP.$drain { sink, }, ( result ) ->\n    # debug 'µ1112-1', duct\n    # debug 'µ1112-2', jr result\n    T.ok result is sink\n    T.eq result, [ 11, 21, 12, 22, 13, 23 ]\n    done()\n  duct = SP.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"drain with sink 2\" ] = ( T, done ) ->\n  sink      = []\n  pipeline  = []\n  pipeline.push [ 1, 2, 3, ]\n  pipeline.push $ ( d, send ) -> info 'µ1', d; send d + 10\n  pipeline.push $ ( d, send ) -> info 'µ2', d; send d; send d + 10\n  pipeline.push SP.$drain { sink, }, ->\n    T.eq sink, [ 11, 21, 12, 22, 13, 23 ]\n    done()\n  duct = SP.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"remit 2\" ] = ( T, done ) ->\n  result    = []\n  pipeline  = []\n  pipeline.push Array.from 'abcd'\n  pipeline.push SP.$map ( d ) -> d.toUpperCase()\n  pipeline.push SP.$pass()\n  pipeline.push $ ( d, send ) ->\n    send d\n    send \"(#{d})\"\n  pipeline.push SP.$show()\n  pipeline.push $watch ( d ) -> result.push d\n  pipeline.push SP.$drain ->\n    result = result.join ''\n    T.eq result, \"A(A)B(B)C(C)D(D)\"\n    done()\n  SP.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"remit with end detection 1\" ] = ( T, done ) ->\n  last      = Symbol 'last'\n  result    = []\n  pipeline  = []\n  pipeline.push Array.from 'abcd'\n  pipeline.push SP.$map ( d ) -> d.toUpperCase()\n  pipeline.push SP.$show { title: 'x1', }\n  pipeline.push $ { last, }, ( d, send ) ->\n    return send 'ok' if d is last\n    send d\n    send \"(#{d})\"\n  # pipeline.push SP.$show { title: 'x2', }\n  pipeline.push $watch ( d ) -> result.push d\n  pipeline.push SP.$drain ->\n    result = result.join ''\n    T.eq result, \"A(A)B(B)C(C)D(D)ok\"\n    done()\n  SP.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"remit with end detection 2\" ] = ( T, done ) ->\n  last      = Symbol 'last'\n  result    = []\n  pipeline  = []\n  pipeline.push Array.from 'abcdefg'\n  pipeline.push SP.$map ( d ) -> d.toUpperCase()\n  pipeline.push $ ( d, send ) -> if d is 'E' then send.end() else send d\n  pipeline.push SP.$show()\n  pipeline.push $ { last, }, ( d, send ) ->\n    return send 'ok' if d is last\n    send d\n    send \"(#{d})\"\n  pipeline.push $watch ( d ) -> result.push d\n  pipeline.push SP.$drain ->\n    result = result.join ''\n    T.eq result, \"A(A)B(B)C(C)D(D)ok\"\n    done()\n  SP.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"remit with surrounds\" ] = ( T, done ) ->\n  first     = '['\n  before    = '('\n  between   = '|'\n  after     = ')'\n  last      = ']'\n  result    = []\n  pipeline  = []\n  pipeline.push Array.from 'abcd'\n  pipeline.push SP.$show()\n  pipeline.push $ { first, before, between, after, last, }, ( d, send ) -> send d.toUpperCase()\n  pipeline.push $watch ( d ) -> result.push d\n  pipeline.push SP.$drain ->\n    result = result.join ''\n    T.eq result, '[(A)|(B)|(C)|(D)]'\n    done()\n  SP.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"watch with end detection 1\" ] = ( T, done ) ->\n  [ probe, matcher, error, ] = [\"abcd\",'[(A)|(B)|(C)|(D)]',null]\n  await T.perform probe, matcher, error, -> new Promise ( resolve, reject ) ->\n    first     = '['\n    before    = '('\n    between   = '|'\n    after     = ')'\n    last      = ']'\n    collector = []\n    pipeline  = []\n    pipeline.push Array.from probe\n    pipeline.push SP.$watch { first, before, between, after, last, }, ( d ) ->\n      # debug '44874', xrpr d\n      collector.push d.toUpperCase()\n    pipeline.push SP.$drain ->\n      collector = collector.join ''\n      resolve collector\n    SP.pull pipeline...\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"end push source (1)\" ] = ( T, done ) ->\n  # The proper way to end a push source is to call `source.end()`.\n  [ probe, matcher, error, ] = [[\"what\",\"a\",\"lot\",\"of\",\"little\",\"bottles\"],[\"what\",\"a\",\"lot\",\"of\",\"little\",\"bottles\"],null]\n  await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n    R         = []\n    source    = SP.new_push_source()\n    pipeline  = []\n    pipeline.push source\n    pipeline.push SP.$watch ( d ) -> info xrpr d\n    pipeline.push SP.$collect { collector: R, }\n    pipeline.push SP.$watch ( d ) -> info xrpr d\n    pipeline.push SP.$drain -> help 'ok'; resolve R\n    SP.pull pipeline...\n    for word in probe\n      source.send word\n    source.end()\n    return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"end push source (2)\" ] = ( T, done ) ->\n  [ probe, matcher, error, ] = [[\"what\",\"a\",\"lot\",\"of\",\"little\",\"bottles\"],[\"what\",\"a\",\"lot\",\"of\",\"little\",\"bottles\"],null]\n  await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n    R         = []\n    source    = SP.new_push_source()\n    #.......................................................................................................\n    for word in probe\n      source.send word\n    source.end()\n    #.......................................................................................................\n    pipeline  = []\n    pipeline.push source\n    pipeline.push SP.$watch ( d ) -> info xrpr d\n    pipeline.push SP.$collect { collector: R, }\n    pipeline.push SP.$watch ( d ) -> info xrpr d\n    pipeline.push SP.$drain -> help 'ok'; resolve R\n    SP.pull pipeline...\n    return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"duct_from_transforms\" ] = ( T, done ) ->\n  do =>\n    r = SP._new_duct []\n    T.eq r[ SP.marks.isa_duct ],                      SP.marks.isa_duct\n    T.eq r.is_empty,                                  true\n    T.eq r.is_single ? false,                         false\n    T.eq r.first,                                     undefined\n    T.eq r.last,                                      undefined\n    T.eq r.transforms,                                []\n    T.eq r.type,                                      undefined\n  #.........................................................................................................\n  do =>\n    r = SP._new_duct [ source = SP.new_push_source() ]\n    T.eq r[ SP.marks.isa_duct ],                      SP.marks.isa_duct\n    T.eq r.first,                                     r.last\n    T.eq r.is_empty ? false,                          false\n    T.eq r.is_single,                                 true\n    T.eq r.transforms.length,                         1\n    T.eq r.first.type,                                'source'\n    T.eq r.type,                                      'source'\n    T.eq r.first.isa_pusher ? false,                  true\n  #.........................................................................................................\n  do =>\n    r     = SP._new_duct [ sink = SP.$drain on_end = ( -> ) ]\n    drain = r.transforms[ r.transforms.length - 1 ]\n    T.eq r.first,                                     r.last\n    T.eq r.is_single,                                 true\n    T.eq r.first.type,                                'sink'\n    T.eq r.type,                                      'sink'\n    # T.eq r.last.on_end,                               on_end\n    # T.eq r.transforms[ 0 ][ SP.marks.steampipes ],    SP.marks.steampipes\n    # T.eq r.transforms[ 0 ].type,                      'sink'\n  #.........................................................................................................\n  do =>\n    r = SP._new_duct [ through = SP.$ ( ( d, send ) -> ) ]\n    T.eq r.first,                                     r.last\n    T.eq r.is_single,                                 true\n    T.eq r.first.type,                                'through'\n    T.eq r.type,                                      'through'\n    T.eq r.transforms[ 0 ],                           through\n  #.........................................................................................................\n  do =>\n    r = SP._new_duct [ ( SP.new_value_source [] ), ( SP.$ ( d, send ) -> ), ]\n    T.eq r.is_empty ? false,                          false\n    T.eq r.is_single ? false,                         false\n    T.eq r.first.type,                                'source'\n    T.eq r.type,                                      'source'\n  #.........................................................................................................\n  do =>\n    f = -> SP._new_duct [\n      ( SP.new_value_source []  )\n      ( SP.new_value_source []  )\n      ( SP.$ ( d, send ) ->     ) ]\n    T.throws /illegal duct configuration/, f\n  #.........................................................................................................\n  do =>\n    r = SP._new_duct [\n      ( SP.new_value_source []  )\n      ( SP.$ ( d, send ) ->     )\n      ( SP.$drain()             ) ]\n    T.eq r.type,                                      'circuit'\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"composability (through)\" ] = ( T, done ) ->\n  [ probe, matcher, error, ] = [[\"what\",\"a\",\"lot\",\"of\",\"little\",\"bottles\"],[\"what\",\"a\",\"lot\",\"of\",\"little\",\"bottles\"],null]\n  await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n    R           = []\n    source      = probe\n    #.......................................................................................................\n    pipeline_A  = []\n    pipeline_A.push SP.$watch ( d ) -> info xrpr d\n    pipeline_A.push SP.$collect { collector: R, }\n    length_of_A = pipeline_A.length\n    duct_A      = SP.pull pipeline_A...\n    T.eq duct_A.transforms.length,  length_of_A\n    T.eq duct_A.type,               'through'\n    #.......................................................................................................\n    pipeline_B  = []\n    pipeline_B.push source\n    pipeline_B.push duct_A\n    pipeline_B.push SP.$watch ( d ) -> info xrpr d\n    pipeline_B.push SP.$drain -> help 'ok'\n    length_of_B = pipeline_B.length - 1 + length_of_A\n    duct_B      = SP.pull pipeline_B...\n    T.eq duct_B.transforms.length,  length_of_B\n    T.eq duct_B.type,               'circuit'\n    resolve R\n    return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"composability (source)\" ] = ( T, done ) ->\n  [ probe, matcher, error, ] = [\"𦇻𦑛𦖵𦩮𦫦𧞈\",( Array.from '𦇻𦑛𦖵𦩮𦫦𧞈' ),null]\n  await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n    R           = []\n    source      = probe\n    #.......................................................................................................\n    pipeline_A  = []\n    pipeline_A.push source\n    pipeline_A.push SP.$watch ( d ) -> info xrpr d\n    pipeline_A.push SP.$collect { collector: R, }\n    length_of_A = pipeline_A.length\n    duct_A = SP.pull pipeline_A...\n    T.eq duct_A.transforms.length,  length_of_A\n    T.eq duct_A.type,               'source'\n    #.......................................................................................................\n    pipeline_B  = []\n    pipeline_B.push duct_A\n    pipeline_B.push SP.$watch ( d ) -> info xrpr d\n    pipeline_B.push SP.$drain -> help 'ok'\n    length_of_B = pipeline_B.length - 1 + length_of_A\n    duct_B      = SP.pull pipeline_B...\n    T.eq duct_B.transforms.length,  length_of_B\n    T.eq duct_B.type,               'circuit'\n    resolve R\n    return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"composability (sink)\" ] = ( T, done ) ->\n  [ probe, matcher, error, ] = [\"𦇻𦑛𦖵𦩮𦫦𧞈\",( Array.from '𦇻𦑛𦖵𦩮𦫦𧞈' ),null]\n  await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n    R           = []\n    source      = probe\n    #.......................................................................................................\n    pipeline_A  = []\n    pipeline_A.push SP.$watch ( d ) -> info xrpr d\n    pipeline_A.push SP.$collect { collector: R, }\n    pipeline_A.push SP.$drain -> help 'ok'\n    length_of_A = pipeline_A.length\n    duct_A      = SP.pull pipeline_A...\n    T.eq duct_A.transforms.length,  length_of_A\n    T.eq duct_A.type,               'sink'\n    #.......................................................................................................\n    pipeline_B  = []\n    pipeline_B.push source\n    pipeline_B.push SP.$watch ( d ) -> info xrpr d\n    pipeline_B.push duct_A\n    length_of_B = pipeline_B.length - 1 + length_of_A\n    duct_B      = SP.pull pipeline_B...\n    T.eq duct_B.transforms.length,  length_of_B\n    T.eq duct_B.type,               'circuit'\n    # debug 'µ11124', duct_B\n    resolve R\n    return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"$filter\" ] = ( T, done ) ->\n  [ probe, matcher, error, ] = [[0,1,2,3,4,5,6,7,8,9,],[1,3,5,7,9,],null]\n  await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n    R           = []\n    source      = probe\n    #.......................................................................................................\n    pipeline    = []\n    pipeline.push source\n    pipeline.push SP.$filter ( d ) -> ( d %% 2 ) is 1\n    # pipeline.push SP.$watch ( d ) -> info xrpr d\n    pipeline.push SP.$drain ( values ) ->\n      # urge values\n      resolve values\n    SP.pull pipeline...\n    return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"$chunkify_keep no postprocessing\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [ [], [], null ]\n    [ 'abcdefg', [ [ 'a', 'b', 'c', 'd', 'e', 'f', 'g' ] ], null ]\n    [ 'ab(cdefg)', [ [ 'a', 'b', '(' ], [ 'c', 'd', 'e', 'f', 'g', ')' ] ], null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    #.......................................................................................................\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      pipeline    = []\n      pipeline.push probe\n      pipeline.push SP.$chunkify_keep ( d ) -> d in [ '(', ')', ]\n      pipeline.push SP.$drain ( collector ) -> resolve collector\n      SP.pull pipeline...\n      #.....................................................................................................\n      return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"$chunkify_toss no postprocessing\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [ [], [], null ]\n    [ 'abcdefg', [ [ 'a', 'b', 'c', 'd', 'e', 'f', 'g' ] ], null ]\n    [ 'ab(cdefg)', [ [ 'a', 'b', ], [ 'c', 'd', 'e', 'f', 'g', ] ], null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    #.......................................................................................................\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      pipeline    = []\n      pipeline.push probe\n      pipeline.push SP.$chunkify_toss ( d ) -> d in [ '(', ')', ]\n      pipeline.push SP.$drain ( collector ) -> resolve collector\n      SP.pull pipeline...\n      #.....................................................................................................\n      return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"$chunkify_toss with postprocessing\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [ [], [], null ]\n    [ 'abcdefg', [ 'a|b|c|d|e|f|g' ], null ]\n    [ 'ab(cdefg)', [ 'a|b', 'c|d|e|f|g' ], null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    #.......................................................................................................\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      pipeline    = []\n      pipeline.push probe\n      pipeline.push SP.$chunkify_toss ( ( d ) -> d in [ '(', ')', ] ), ( chunk ) -> chunk.join '|'\n      pipeline.push SP.$drain ( collector ) -> resolve collector\n      SP.pull pipeline...\n      #.....................................................................................................\n      return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"$chunkify_keep with postprocessing\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [ [], [], null ]\n    [ 'abcdefg', [ 'a|b|c|d|e|f|g' ], null ]\n    [ 'ab(cdefg)', [ 'a|b|(', 'c|d|e|f|g|)' ], null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    #.......................................................................................................\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      pipeline    = []\n      pipeline.push probe\n      pipeline.push SP.$chunkify_keep ( ( d ) -> d in [ '(', ')', ] ), ( chunk ) -> chunk.join '|'\n      pipeline.push SP.$drain ( collector ) -> resolve collector\n      SP.pull pipeline...\n      #.....................................................................................................\n      return null\n  #.........................................................................................................\n  done()\n  return null\n\n###\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"end push source (3)\" ] = ( T, done ) ->\n  # The proper way to end a push source is to call `source.end()`; `send.end()` is largely equivalent.\n  [ probe, matcher, error, ] = [[\"what\",\"a\",\"lot\",\"of\",\"little\",\"bottles\",\"stop\"],[\"what\",\"a\",\"lot\",\"of\",\"little\",\"bottles\"],null]\n  await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n    R         = []\n    drainer   = -> help 'ok'; resolve R\n    source    = SP.new_push_source()\n    pipeline  = []\n    pipeline.push source\n    pipeline.push SP.$watch ( d ) -> info xrpr d\n    pipeline.push $ ( d, send ) -> if d is 'stop' then send.end() else send d\n    pipeline.push SP.$collect { collector: R, }\n    pipeline.push SP.$watch ( d ) -> info xrpr d\n    pipeline.push SP.$drain drainer\n    pull pipeline...\n    for word in probe\n      source.send word\n    return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"end push source (4)\" ] = ( T, done ) ->\n  # A stream may be ended by using an `$end_if()` (alternatively, `$continue_if()`) transform.\n  [ probe, matcher, error, ] = [[\"what\",\"a\",\"lot\",\"of\",\"little\",\"bottles\",\"stop\"],[\"what\",\"a\",\"lot\",\"of\",\"little\",\"bottles\"],null]\n  await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n    R         = []\n    drainer   = -> help 'ok'; resolve R\n    source    = SP.new_push_source()\n    pipeline  = []\n    pipeline.push source\n    pipeline.push SP.$watch ( d ) -> info xrpr d\n    pipeline.push SP.$end_if ( d ) -> d is 'stop'\n    pipeline.push SP.$collect { collector: R, }\n    pipeline.push SP.$watch ( d ) -> info xrpr d\n    pipeline.push SP.$drain drainer\n    pull pipeline...\n    for word in probe\n      source.send word\n    return null\n  #.........................................................................................................\n  done()\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"wrap FS object for sink\" ] = ( T, done ) ->\n  output_path   = '/tmp/pipestreams-test-output.txt'\n  output_stream = FS.createWriteStream output_path\n  sink          = SP.write_to_nodejs_stream output_stream #, ( error ) -> debug '37783', error\n  pipeline      = []\n  pipeline.push $values Array.from 'abcdef'\n  pipeline.push SP.$show()\n  pipeline.push sink\n  pull pipeline...\n  output_stream.on 'finish', =>\n    T.ok CND.equals 'abcdef', read output_path\n    done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"function as pull-stream source\" ] = ( T, done ) ->\n  random = ( n ) =>\n    return ( end, callback ) =>\n      if end?\n        debug '40998', rpr callback\n        debug '40998', rpr end\n        return callback end\n      #only read n times, then stop.\n      n += -1\n      if n < 0\n        return callback true\n      callback null, Math.random()\n      return null\n  #.........................................................................................................\n  pipeline  = []\n  Ø         = ( x ) => pipeline.push x\n  Ø random 10\n  # Ø random 3\n  Ø SP.$collect()\n  Ø $ { last: null, }, ( data, send ) ->\n    if data?\n      T.ok data.length is 10\n      debug data\n      send data\n    else\n      T.succeed \"function works as pull-stream source\"\n      done()\n      send null\n  Ø SP.$show()\n  Ø SP.$drain()\n  #.........................................................................................................\n  SP.pull pipeline...\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"$surround\" ] = ( T, done ) ->\n  [ probe, matcher, error, ] = [null,\"first[(1),(2),(3),(4),(5)]last\",null]\n  await T.perform probe, matcher, error, ->\n    return new Promise ( resolve, reject ) ->\n      R         = null\n      drainer   = -> help 'ok'; resolve R\n      pipeline  = []\n      pipeline.push SP.new_value_source [ 1 .. 5 ]\n      #.........................................................................................................\n      pipeline.push SP.$surround { first: '[', last: ']', before: '(', between: ',', after: ')' }\n      pipeline.push SP.$surround { first: 'first', last: 'last', }\n      # pipeline.push SP.$surround { first: 'first', last: 'last', before: 'before', between: 'between', after: 'after' }\n      # pipeline.push SP.$surround { first: '[', last: ']', }\n      #.........................................................................................................\n      pipeline.push SP.$collect()\n      pipeline.push $ ( d, send ) -> send ( x.toString() for x in d ).join ''\n      pipeline.push SP.$watch ( d ) -> R = d\n      pipeline.push SP.$drain drainer\n      SP.pull pipeline...\n      return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"$surround async\" ] = ( T, done ) ->\n  [ probe, matcher, error, ] = [null,\"[first|1|2|3|4|5|last]\",null]\n  await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n    R         = null\n    drainer   = -> help 'ok'; resolve R\n    pipeline  = []\n    pipeline.push SP.new_value_source [ 1 .. 5 ]\n    #.........................................................................................................\n    pipeline.push SP.$surround { first: 'first', last: 'last', }\n    pipeline.push $async { first: '[', last: ']', between: '|', }, ( d, send, done ) =>\n      defer ->\n        # debug '22922', jr d\n        send d\n        done()\n    #.........................................................................................................\n    pipeline.push SP.$collect()\n    pipeline.push $ ( d, send ) -> send ( x.toString() for x in d ).join ''\n    pipeline.push SP.$watch ( d ) -> R = d\n    pipeline.push SP.$drain drainer\n    SP.pull pipeline...\n    return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"end random async source\" ] = ( T, done ) ->\n  [ probe, matcher, error, ] = [[\"what\",\"a\",\"lot\",\"of\",\"little\",\"bottles\"],[\"what\",\"a\",\"lot\",\"of\",\"little\",\"bottles\"],null]\n  await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n    R         = []\n    drainer   = -> help 'ok'; resolve R\n    source    = SP.new_random_async_value_source probe\n    pipeline  = []\n    pipeline.push source\n    pipeline.push SP.$watch ( d ) -> info xrpr d\n    pipeline.push SP.$collect { collector: R, }\n    pipeline.push SP.$watch ( d ) -> info xrpr d\n    pipeline.push SP.$drain drainer\n    pull pipeline...\n    return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"read file chunks\" ] = ( T, done ) ->\n  [ probe, matcher, error, ] = [ __filename, null, null, ]\n  await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n    R         = []\n    drainer   = -> help 'ok'; resolve null\n    source    = SP.read_chunks_from_file probe, 50\n    count     = 0\n    pipeline  = []\n    pipeline.push source\n    pipeline.push $ ( d, send ) -> send d.toString 'utf-8'\n    pipeline.push SP.$watch ->\n      count += +1\n      source.end() if count > 3\n    pipeline.push SP.$collect { collector: R, }\n    pipeline.push SP.$watch ( d ) -> info xrpr d\n    pipeline.push SP.$drain drainer\n    pull pipeline...\n    return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"demo watch pipeline on abort 2\" ] = ( T, done ) ->\n  # through = require 'pull-through'\n  probes_and_matchers = [\n    [[false,[1,2,3,null,5]],[1,1,1,2,2,2,3,3,3,null,null,null,5,5,5],null]\n    [[true,[1,2,3,null,5]],[1,1,1,2,2,2,3,3,3,null,null,null,5,5,5],null]\n    [[false,[1,2,3,\"stop\",25,30]],[1,1,1,2,2,2,3,3,3],null]\n    [[true,[1,2,3,\"stop\",25,30]],[1,1,1,2,2,2,3,3,3],null]\n    [[false,[1,2,3,null,\"stop\",25,30]],[1,1,1,2,2,2,3,3,3,null,null,null],null]\n    [[true,[1,2,3,null,\"stop\",25,30]],[1,1,1,2,2,2,3,3,3,null,null,null],null]\n    [[false,[1,2,3,undefined,\"stop\",25,30]],[1,1,1,2,2,2,3,3,3,undefined,undefined,undefined,],null]\n    [[true,[1,2,3,undefined,\"stop\",25,30]],[1,1,1,2,2,2,3,3,3,undefined,undefined,undefined,],null]\n    [[false,[\"stop\",25,30]],[],null]\n    [[true,[\"stop\",25,30]],[],null]\n    ]\n  #.........................................................................................................\n  aborting_map = ( use_defer, mapper ) ->\n    react = ( handler, data ) ->\n      if data is 'stop' then  handler true\n      else                    handler null, mapper data\n    # a sink function: accept a source...\n    return ( read ) ->\n      # ...but return another source!\n      return ( abort, handler ) ->\n        read abort, ( error, data ) ->\n          # if the stream has ended, pass that on.\n          return handler error if error\n          if use_defer then  defer -> react handler, data\n          else                        react handler, data\n          return null\n        return null\n      return null\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      #.....................................................................................................\n      [ use_defer\n        values ]  = probe\n      source      = SP.new_value_source values\n      collector   = []\n      pipeline    = []\n      pipeline.push source\n      pipeline.push aborting_map use_defer, ( d ) -> info '22398-1', xrpr d; return d\n      pipeline.push SP.$ ( d, send ) -> info '22398-2', xrpr d; collector.push d; send d\n      pipeline.push SP.$ ( d, send ) -> info '22398-3', xrpr d; collector.push d; send d\n      pipeline.push SP.$ ( d, send ) -> info '22398-4', xrpr d; collector.push d; send d\n      # pipeline.push SP.$map ( d ) -> info '22398-2', xrpr d; collector.push d; return d\n      # pipeline.push SP.$map ( d ) -> info '22398-3', xrpr d; collector.push d; return d\n      # pipeline.push SP.$map ( d ) -> info '22398-4', xrpr d; collector.push d; return d\n      pipeline.push SP.$drain ->\n        help '44998', xrpr collector\n        resolve collector\n      pull pipeline...\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"$mark_position\" ] = ( T, done ) ->\n  # through = require 'pull-through'\n  probes_and_matchers = [\n    [[\"a\"],[{\"is_first\":true,\"is_last\":true,\"d\":\"a\"}],null]\n    [[],[],null]\n    [[1,2,3],[{\"is_first\":true,\"is_last\":false,\"d\":1},{\"is_first\":false,\"is_last\":false,\"d\":2},{\"is_first\":false,\"is_last\":true,\"d\":3}],null]\n    [[\"a\",\"b\"],[{\"is_first\":true,\"is_last\":false,\"d\":\"a\"},{\"is_first\":false,\"is_last\":true,\"d\":\"b\"}],null]\n    ]\n  #.........................................................................................................\n  collector = []\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      #.....................................................................................................\n      source      = SP.new_value_source probe\n      collector   = []\n      pipeline    = []\n      pipeline.push source\n      pipeline.push SP.$mark_position()\n      pipeline.push SP.$collect { collector, }\n      pipeline.push SP.$drain -> resolve collector\n      pull pipeline...\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"$scramble\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [[[],0.5,42],[],null]\n    [[[1],0.5,42],[1],null]\n    [[[1,2],0.5,42],[1,2],null]\n    [[[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],0.5,42],[1,4,2,5,3,6,7,14,12,9,13,8,16,10,15,11,17,18,19,20,21,22,24,26,23,25,27,28,29,30,32,31,33,34,35,37,36,38,39,40],null]\n    [[[1,2,3,4,5,6,7,8,9,10],1,2],[9,2,7,5,8,4,10,1,3,6],null]\n    [[[1,2,3,4,5,6,7,8,9,10],0.1,2],[1,2,3,4,5,6,7,8,9,10],null]\n    [[[1,2,3,4,5,6,7,8,9,10],0,2],[1,2,3,4,5,6,7,8,9,10],null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    #.......................................................................................................\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ values\n        p\n        seed ]    = probe\n      cache       = {}\n      collector   = []\n      pipeline    = []\n      pipeline.push SP.new_value_source values\n      pipeline.push SP.$scramble p, { seed, }\n      pipeline.push SP.$collect { collector, }\n      pipeline.push SP.$drain -> resolve collector\n      SP.pull pipeline...\n      #.....................................................................................................\n      return null\n  #.........................................................................................................\n  done()\n  return null\n###\n\n############################################################################################################\nunless module.parent?\n  # test @[ \"$chunkify 1\"                       ]\n  # test @[ \"$chunkify_keep no postprocessing\"  ]\n  # test @[ \"$chunkify_toss no postprocessing\"  ]\n  # test @[ \"$chunkify_toss with postprocessing\"  ]\n  test @[ \"$chunkify_keep with postprocessing\"  ]\n  # test @, 'timeout': 30000\n  # test @[ \"$filter\" ]\n  # test @[ \"end push source (2)\"             ]\n  # test @[ \"remit 1\"                         ]\n  # test @[ \"drain with result\"               ]\n  # test @[ \"remit 2\"                         ]\n  # test @[ \"remit with end detection 1\"      ]\n  # test @[ \"duct_from_transforms\"            ]\n  # test @[ \"composability (through)\"                 ]\n  # test @[ \"composability (source)\"                 ]\n  # test @[ \"composability (sink)\" ]\n  # test @[ \"remit with end detection 2\"      ]\n  # test @[ \"remit with surrounds\"            ]\n  # test @[ \"watch with end detection 1\"      ]\n  # test @[ \"watch with end detection 2\"      ]\n  # test @[ \"end push source (1)\"             ]\n  # test @[ \"end push source (3)\"             ]\n  # test @[ \"end push source (4)\"             ]\n  # test @[ \"wrap FS object for sink\"         ]\n  # test @[ \"function as pull-stream source\"  ]\n  # test @[ \"$surround\"                       ]\n  # test @[ \"$surround async\"                 ]\n  # test @[ \"end random async source\"         ]\n  # test @[ \"read file chunks\"                ]\n  # test @[ \"demo watch pipeline on abort 2\"  ]\n  # test @[ \"$mark_position\"                  ]\n  # test @[ \"leapfrog 1\"                      ]\n  # test @[ \"leapfrog 2\"                      ]\n  # test @[ \"$scramble\"                       ]\n"
  ]
}