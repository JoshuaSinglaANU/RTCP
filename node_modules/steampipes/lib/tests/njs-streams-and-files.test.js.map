{
  "version": 3,
  "file": "njs-streams-and-files.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/njs-streams-and-files.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'STEAMPIPES/TESTS/NJS-STREAMS-AND-FILES'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nOS                        = require 'os'\ntest                      = require 'guy-test'\n{ jr }                    = CND\n#...........................................................................................................\nSP                        = require '../..'\n{ $\n  $async\n  $watch\n  $show  }                = SP.export()\ndefer                     = setImmediate\ntypes                     = require '../types'\n{ isa\n  validate\n  type_of }               = types\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"write to file sync\" ] = ( T, done ) ->\n  ### TAINT use proper tmpfile ###\n  path      = '/tmp/steampipes-testfile.txt'\n  FS.unlinkSync path if FS.existsSync path\n  probe     = \"just a bunch of words really\".split /\\s+/\n  matcher   = null\n  error     = null\n  await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n    R           = []\n    source      = probe\n    #.......................................................................................................\n    pipeline    = []\n    pipeline.push source\n    pipeline.push $ ( d, send ) -> send d + '\\n'\n    pipeline.push $watch ( d ) -> info 'mainline', jr d\n    # pipeline.push SP.tee_write_to_file path\n    pipeline.push SP.tee_write_to_file_sync path\n    pipeline.push SP.$drain ( sink ) ->\n      matcher = sink.join ''\n      if FS.existsSync path then  result  = FS.readFileSync path, { encoding: 'utf-8', }\n      else                        result  = null\n      # urge 'Âµ77655', ( jr result ), ( jr matcher )\n      T.eq result, matcher\n      help 'ok'\n      resolve null\n    SP.pull pipeline...\n    return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"read_from_file\" ] = ( T, done ) ->\n  ### TAINT use proper tmpfile ###\n  path      = __filename\n  probe     = null\n  matcher   = null\n  error     = null\n  sink      = []\n  matcher   = FS.readFileSync path, { encoding: 'utf-8', }\n  #.......................................................................................................\n  pipeline = []\n  pipeline.push SP.read_from_file path, 10\n  pipeline.push $show { title: 'Âµ33321', }\n  pipeline.push SP.$drain ( sink ) ->\n    result  = ( Buffer.concat sink ).toString 'utf-8'\n    T.eq result, matcher\n    help 'ok'\n    done()\n  SP.pull pipeline...\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n_as_chunked_buffers = ( text, size ) ->\n  validate.text text\n  validate.positive_integer size\n  R       = []\n  buffer  = Buffer.from text\n  for idx in [ 0 ... buffer.length ] by size\n    R.push buffer.slice idx, idx + size\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"$split\" ] = ( T, done ) ->\n  ### TAINT use proper tmpfile ###\n  path      = __filename\n  probes_and_matchers = [\n    [[ \"\"\"A text that\\nextends over several lines\\nÃ¤Ã¶Ã¼ÃÃÃÃ\"\"\", '\\n'],null,null]\n    [[ \"\"\"A text that\\nextends over several lines\\nÃ¤Ã¶Ã¼ÃÃÃÃ\"\"\", 'Ã¤'],null,null]\n    [[ \"\"\"A text that\\nextends over several lines\\nÃ¤Ã¶Ã¼ÃÃÃÃ\"\"\", 'Ã¶'],null,null]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    [ text\n      splitter ]  = probe\n    matcher       = text.split splitter\n    await T.perform [ text, splitter, ], matcher, error, => return new Promise ( resolve, reject ) =>\n      values        = _as_chunked_buffers text, 3\n      pipeline      = []\n      pipeline.push values\n      pipeline.push SP.$split splitter\n      pipeline.push $watch ( d ) -> info jr d\n      # pipeline.push SP.tee_write_to_file path\n      pipeline.push SP.$drain ( result ) -> resolve result\n      SP.pull pipeline...\n      return null\n  #.........................................................................................................\n  done()\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"demo\" ] = ( T, done ) ->\n  probe       = ''\n  probe      += '[[\"ç½éãããµå ´\",\"ãããã­ãããµããã\",\"ç½éã´ã«ãå ´ [ãããã­ã´ã«ãããã] /Shirogane golf links (p)/\"],'\n  probe      += '[\"ç½éã ã\",\"ãããã­ã ã\",\"ç½éãã  [ãããã­ãã ] /Shirogane dam (p)/\"],'\n  probe      += '[\"ç½ééå¤«\",\"ãããã­ããã\",\"Shirakane Ikuo (h)\"],'\n  probe      += '[\"ç½éæ¸©æ³\",\"ãããã­ãããã\",\"Shiroganeonsen (p)\"],'\n  probe      += '[\"ç½éæ©\",\"ãããã­ã°ã\",\"Shiroganebashi (p)\"],'\n  probe      += '[\"ç½éå\",\"ãããã­ã°ã\",\"Shirakanebaru (p)\"],'\n  probe      += '[\"ç½éé«è¼ªé§\",\"ãããã­ãããªããã\",\"Shirokanetakanawa Station (st)\"],'\n  probe      += '[\"ç½éå±±\",\"ãããã­ãã¾\",\"Shirakaneyama (u)\"],'\n  probe      += '[\"ç½éå·\",\"ãããã­ãã\",\"Shiroganegawa (u)\"],'\n  probe      += '[\"å¥è¼\",\"ã¨ããã\",\"Tomosuke (u)\"],'\n  probe      += '[\"å¥å\",\"ã»ãã\",\"Houme (p)\"],'\n  probe      += '[\"å¥å\",\"ã»ããã\",\"Houmen (p)\"],'\n  probe      += '[\"å¥åçº\",\"ã»ãããã¾ã¡\",\"Houmenmachi (p)\"],'\n  probe      += '[\"å¥é\",\"ã¨ãã\",\"Tomoo (g)\"],'\n  probe      += '[\"å¥é¤\",\"ã»ããã\",\"Houyou (s)\"],'\n  probe      += '[\"å¥å»£\",\"ã¨ãã²ã\",\"Tomohiro (g)\"],'\n  probe      += '[\"å¥é\",\"ã»ããã\",\"Hougen (g)\"],'\n  probe      += '[\"å®\",\"ããã\",\"Takara (s,m,f)\"],'\n  probe      += '[\"å®\",\"ããããã\",\"Takarasaki (s)\"],'\n  probe      += '[\"å®\",\"ã¨ã¿\",\"Tomi (s)\"],'\n  probe      += '[\"å®\",\"ã²ãã\",\"Hijiri (f)\"],'\n  probe      += '[\"å®\",\"ã¿ã¡\",\"Michi (f)\"],'\n  probe      += '[\"å®ãä¸\",\"ãããããã\",\"Takaragaoka (p)\"],'\n  probe      += '[\"å®ãæ± \",\"ãããããã\",\"Takaragaike (p)\"],'\n  probe      += '[\"å®ã¨ãå­\",\"ãããã¨ãã\",\"Takara Tomoko (1921.9.23-2001.8.2) (h)\"],'\n  probe      += '[\"å®ã®èæ± \",\"ãããã®ãããã\",\"Takaranokusaike (p)\"]]'\n  matcher     = probe\n  error       = null\n  await T.perform probe, matcher, error, => return new Promise ( resolve, reject ) =>\n    source    = _as_chunked_buffers probe, 10\n    splitter  = '\"],[\"'\n    pipeline  = []\n    # pipeline.push SP.read_from_file path, 10\n    pipeline.push source\n    pipeline.push SP.$split splitter\n    pipeline.push $ ( d, send ) ->\n      ### TAINT need only be done on first, last datom ###\n      d = d.replace /^\\[+\"/, ''\n      d = d.replace /\"\\]+$/, ''\n      send d\n    pipeline.push $ ( d, send ) -> send JSON.parse '[\"' + d + '\"]'\n    # pipeline.push $watch ( d ) -> info jr d\n    pipeline.push SP.$drain ( sink ) ->\n      # debug rpr jr sink\n      resolve jr sink\n    SP.pull pipeline...\n  done()\n  return null\n\n\n############################################################################################################\nunless module.parent?\n  test @, 'timeout': 30000\n  # test @[ \"read_from_file\" ]\n  # test @[ \"$split\" ]\n\n\n\n\n"
  ]
}