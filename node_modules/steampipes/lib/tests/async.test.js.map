{
  "version": 3,
  "file": "async.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/async.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'STEAMPIPES/TESTS/ASYNC'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\njr                        = JSON.stringify\n#...........................................................................................................\nSP                        = require '../..'\n{ $\n  $async\n  $watch\n  $drain\n  $show }                 = SP.export()\ndefer                     = setImmediate\nsleep                     = ( dts ) -> new Promise ( done ) -> setTimeout done, dts * 1000\n\n\n#-----------------------------------------------------------------------------------------------------------\nafter = ( dts, f ) -> setTimeout f, dts * 1000\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"async 0\" ] = ( T, done ) ->\n  ok                  = false\n  [ probe, matcher, ] = [\"abcdef\",\"1a-2a-1b-2b-1c-2c-1d-2d-1e-2e-1f-2f\"]\n  for use_async in [ true, false, ]\n    await do => new Promise ( resolve ) =>\n      pipeline            = []\n      pipeline.push probe\n      # pipeline.push $watch ( d ) -> info 'µ1', jr d\n      if use_async\n        pipeline.push $async ( d, send, done ) ->\n          defer -> send \"1#{d}\"\n          after 0.1, -> send \"2#{d}\"; done()\n      else\n        pipeline.push $ ( d, send ) ->\n          send \"1#{d}\"\n          send \"2#{d}\"\n      # pipeline.push $watch ( d ) -> urge 'µ2', jr d\n      pipeline.push SP.$surround { between: '-', }\n      pipeline.push SP.$join()\n      #.........................................................................................................\n      pipeline.push SP.$watch ( result ) ->\n        echo CND.gold jr [ probe, result, ]\n        T.eq result, matcher\n        ok = true\n      #.........................................................................................................\n      pipeline.push SP.$drain ->\n        T.fail \"failed to pass test\" unless ok\n        resolve()\n      #.........................................................................................................\n      SP.pull pipeline...\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n$send_three = ->\n  return $async ( d, send, done ) ->\n    count = 0\n    for nr in [ 1 .. 3 ]\n      do ( d, nr ) ->\n        dt = Math.random() / 10\n        after dt, ->\n          count += 1\n          send \"(#{d}:#{nr})\"\n          done() if count is 3\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"async 2\" ] = ( T, done ) ->\n  ok        = false\n  probe     = \"fdcabe\"\n  matcher   = \"(a:1)(a:2)(a:3)(b:1)(b:2)(b:3)(c:1)(c:2)(c:3)(d:1)(d:2)(d:3)(e:1)(e:2)(e:3)(f:1)(f:2)(f:3)\"\n  pipeline  = []\n  pipeline.push Array.from probe\n  pipeline.push $send_three()\n  # pipeline.push $show { title: '2', }\n  pipeline.push SP.$sort()\n  pipeline.push SP.$join()\n  #.........................................................................................................\n  pipeline.push SP.$watch ( result ) ->\n    T.eq result, matcher\n    ok = true\n  #.........................................................................................................\n  pipeline.push SP.$watch ( d ) -> urge d\n  pipeline.push SP.$drain ->\n    T.fail \"failed to pass test\" unless ok\n    done()\n  #.........................................................................................................\n  # T.throws /contains asynchronous transform/, -> SP.pull pipeline...\n  SP.pull pipeline...\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"async 3\" ] = ( T, done ) ->\n  probe   = [ 2, 3, 5, 7, ]\n  matcher = [ 2, 4, 4, 3, 6, 9, 5, 10, 25, 7, 14, 49, ]\n  #.........................................................................................................\n  $multiply = ->\n    exec = ( require 'util' ).promisify ( require 'child_process' ).exec\n    FSP = ( require 'fs' ).promises\n    return $async ( d, send, done ) =>\n      debug '^787^', d\n      defer =>\n        send d\n        await sleep 0.1\n        text = await FSP.readFile __filename, { encoding: 'utf-8', }\n        debug '^030^', jr text[ 100 .. 200 ]\n        send d * 2\n        await sleep 0.1\n        debug '^3344^', jr await exec 'ls'\n        send d ** 2\n        await sleep 0.1\n        done()\n  #.........................................................................................................\n  do =>\n    pipeline = []\n    pipeline.push probe\n    pipeline.push $watch ( d ) => help CND.grey   'before', jr d\n    pipeline.push $multiply()\n    pipeline.push $watch ( d ) => help CND.white  'after ', jr d\n    pipeline.push $drain ( result ) ->\n      debug jr result\n      T.eq result, matcher\n      done()\n    SP.pull pipeline...\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"async 4 w/ async source\" ] = ( T, done ) ->\n  #.........................................................................................................\n  $frobulate = ->\n    exec    = ( require 'util' ).promisify ( require 'child_process' ).exec\n    FSP     = ( require 'fs' ).promises\n    return $async ( d, send, done ) =>\n      if d isnt '{'\n        send d\n        return done()\n      send 'async started'\n      info '^787^', d\n      send d\n      urge 'before'\n      text = await FSP.readFile __filename, { encoding: 'utf-8', }\n      urge 'after'\n      # info '^030^', jr text[ 100 .. 200 ]\n      send 'async complete'\n      return done()\n  #.........................................................................................................\n  do =>\n    PATH      = require 'path'\n    path      = PATH.join __dirname, '../../package.json'\n    sources   = [\n      # ( await SP._KLUDGE_file_as_buffers path         )\n      ( SP.read_from_file path                        )\n      ( [ ( ( require 'fs' ).readFileSync path ), ]   )\n      ]\n    for source in sources\n      await do ( source ) => new Promise ( resolve ) =>\n        pipeline  = []\n        pipeline.push source\n        pipeline.push SP.$split()\n        pipeline.push $frobulate()\n        # pipeline.push $show()\n        pipeline.push $drain ( result ) ->\n          T.fail \"did not receive 'async started'\"  unless ( 'async started'  in result )\n          T.fail \"did not receive 'async complete'\" unless ( 'async complete' in result )\n          resolve()\n        SP.pull pipeline...\n    done()\n    return null\n\n\n############################################################################################################\nunless module.parent?\n  # test @, { timeout: 10000, }\n  test @[ \"async 4 w/ async source\" ]\n  # test @[ \"async 2\" ], { timeout: 10000, }\n\n\n\n"
  ]
}