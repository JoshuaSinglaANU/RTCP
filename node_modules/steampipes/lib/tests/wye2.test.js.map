{
  "version": 3,
  "file": "wye2.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/wye2.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'STEAMPIPES/TESTS/WYE2'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nOS                        = require 'os'\ntest                      = require 'guy-test'\n{ jr, }                   = CND\n#...........................................................................................................\n{ isa\n  validate\n  defaults\n  type_of }               = require '../types'\n#...........................................................................................................\nSP                        = require '../..'\n{ $\n  $async\n  $drain\n  $watch\n  $show  }                = SP.export()\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"tentative implementation\" ] = ( T, done ) ->\n  [ probe, matcher, error, ] = [\"abcde\",\"(a)A(b)B(c)C(d)D(e)E\",null]\n  await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n    pipeline  = []\n    t1        = $ ( d, send ) ->\n      send d\n      wye.send \"(#{d})\"\n    wye        = SP.$pass()\n    pipeline.push probe\n    pipeline.push t1\n    pipeline.push $ ( d, send ) -> send d.toUpperCase()\n    pipeline.push wye\n    pipeline.push $drain ( Σ ) -> resolve Σ.join ''\n    SP.pull pipeline...\n    return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"leapfrogging compared to wye\" ] = ( T, done ) ->\n  [ probe, matcher, error, ] = [\"abcde\",\"aBCdE\",null]\n  results = []\n  #.........................................................................................................\n  await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n    pipeline  = []\n    pipeline.push probe\n    pipeline.push $ ( d, send ) ->\n      if ( d.match /a|d/ )?  then  wye.send d\n      else                        send d\n    pipeline.push $ ( d, send ) -> send d.toUpperCase()\n    pipeline.push wye = SP.$pass()\n    pipeline.push $drain ( Σ ) ->\n      results.push R = Σ.join ''\n      resolve R\n    SP.pull pipeline...\n    return null\n  #.........................................................................................................\n  await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n    leapfrog  = ( d ) -> ( d.match /a|d/ )?\n    pipeline  = []\n    pipeline.push probe\n    pipeline.push $ { leapfrog, }, ( d, send ) -> send d.toUpperCase()\n    pipeline.push wye = SP.$pass()\n    pipeline.push $drain ( Σ ) ->\n      results.push R = Σ.join ''\n      resolve R\n    SP.pull pipeline...\n    return null\n  #.........................................................................................................\n  await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n    pipeline    = []\n    pipeline.push probe\n    # pipeline.push $show()\n    pipeline.push SP.leapfrog ( ( d ) -> ( d.match /a|d/ )? ), $ ( d, send ) -> send d.toUpperCase()\n    pipeline.push wye = SP.$pass()\n    pipeline.push $drain ( Σ ) ->\n      results.push R = Σ.join ''\n      resolve R\n    SP.pull pipeline...\n    return null\n  #.........................................................................................................\n  T.eq results.length, 3\n  T.eq results...\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"wye 2\" ] = ( T, done ) ->\n  [ probe, matcher, error, ] = [\"a\",\"[a](a)A\",null]\n  # [ probe, matcher, error, ] = ['abcde','A(a)B(b)C(c)D(d)E(e)',null]\n  await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n    t1 = $ ( d, send ) ->\n      wye.send \"[#{d}]\"\n      wye.send \"(#{d})\"\n      send d\n    pipeline  = []\n    pipeline.push probe\n    pipeline.push t1\n    pipeline.push $ ( d, send ) -> send d.toUpperCase()\n    pipeline.push wye = SP.$pass()\n    pipeline.push $drain ( Σ ) -> resolve Σ.join ''\n    SP.pull pipeline...\n    return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"wye 3\" ] = ( T, done ) ->\n  [ probe, matcher, error, ] = [[24],[12,6,3,10,5,16,8,4,2,1],null]\n  # [ probe, matcher, error, ] = ['abcde','A(a)B(b)C(c)D(d)E(e)',null]\n  await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n    source    = SP.new_push_source()\n    pipeline  = []\n    pipeline.push source\n    # pipeline.push wye = SP.$pass()\n    # pipeline.push $show()\n    pipeline.push $ ( d, send ) -> send if ( d %% 2 is 0 ) then ( d / 2 ) else ( d * 3 + 1 )\n    pipeline.push $show()\n    pipeline.push $ ( d, send ) -> send d; if ( d is 1 ) then source.end() else source.send d\n    pipeline.push $drain ( Σ ) -> resolve Σ\n    SP.pull pipeline...\n    source.send d for d in probe\n    return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"wye construction (sync)\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [[\"abc\",\"UVWXYZ\"],\"abcUVWXYZ\",null]\n    ]\n  for [ [ probe_A, probe_B, ], matcher, error, ] in probes_and_matchers\n    await T.perform [ probe_A, probe_B, ], matcher, error, -> return new Promise ( resolve, reject ) ->\n      # wye         = SP.new_wye()\n      last        = Symbol 'last'\n      #.....................................................................................................\n      source_A    = probe_A\n      A_has_ended = false\n      B_has_ended = false\n      pipeline_A  = []\n      pipeline_A.push source_A\n      pipeline_A.push $watch ( d ) -> help 'A', jr d\n      pipeline_A.push $ { last, }, ( d, send ) ->\n        if d is last\n          A_has_ended = true\n          return end_source_C()\n        source_C.send d\n      pipeline_A.push $drain -> whisper 'A'\n      #.....................................................................................................\n      source_B    = probe_B\n      pipeline_B  = []\n      pipeline_B.push source_B\n      pipeline_B.push $watch ( d ) -> urge 'B', jr d\n      pipeline_B.push $ { last, }, ( d, send ) ->\n        if d is last\n          B_has_ended = true\n          return end_source_C()\n        source_C.send d\n      pipeline_B.push $drain -> whisper 'B'\n      #.....................................................................................................\n      source_C    = SP.new_push_source()\n      pipeline_C  = []\n      pipeline_C.push source_C\n      pipeline_C.push $watch ( d ) -> info 'C', jr d\n      pipeline_C.push $drain ( Σ ) ->\n        whisper 'C', jr Σ\n        resolve Σ.join ''\n      #.....................................................................................................\n      end_source_C = ->\n        return unless ( A_has_ended and B_has_ended )\n        source_C.end()\n      #.....................................................................................................\n      # pipeline_A.push wye\n      duct_C  = SP.pull pipeline_C...\n      duct_A  = SP.pull pipeline_A...\n      duct_B  = SP.pull pipeline_B...\n      return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"wye construction (async)\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [[\"abc\",\"UVWXYZ\"],\"aUbVcWXYZ\",null]\n    ]\n  for [ [ probe_A, probe_B, ], matcher, error, ] in probes_and_matchers\n    await T.perform [ probe_A, probe_B, ], matcher, error, -> return new Promise ( resolve, reject ) ->\n      # wye         = SP.new_wye()\n      last        = Symbol 'last'\n      #.....................................................................................................\n      source_A    = probe_A\n      A_has_ended = false\n      B_has_ended = false\n      pipeline_A  = []\n      pipeline_A.push source_A\n      pipeline_A.push $watch ( d ) -> help 'A', jr d\n      pipeline_A.push $async ( d, send, done ) -> source_C.send d; done()\n      pipeline_A.push $ { last, }, ( d, send ) -> return unless d is last; A_has_ended = true; end_source_C()\n      pipeline_A.push $drain -> whisper 'A'\n      #.....................................................................................................\n      source_B    = probe_B\n      pipeline_B  = []\n      pipeline_B.push source_B\n      pipeline_B.push $watch ( d ) -> urge 'B', jr d\n      pipeline_B.push $async ( d, send, done ) -> source_C.send d; done()\n      pipeline_B.push $ { last, }, ( d, send ) -> return unless d is last; B_has_ended = true; end_source_C()\n      pipeline_B.push $drain -> whisper 'B'\n      #.....................................................................................................\n      source_C    = SP.new_push_source()\n      pipeline_C  = []\n      pipeline_C.push source_C\n      pipeline_C.push $watch ( d ) -> info 'C', jr d\n      pipeline_C.push $drain ( Σ ) ->\n        whisper 'C', jr Σ\n        resolve Σ.join ''\n      #.....................................................................................................\n      end_source_C = ->\n        return unless ( A_has_ended and B_has_ended )\n        source_C.end()\n      #.....................................................................................................\n      # pipeline_A.push wye\n      duct_C  = SP.pull pipeline_C...\n      duct_A  = SP.pull pipeline_A...\n      duct_B  = SP.pull pipeline_B...\n      return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"wye construction (source, transform, drain ducts)\" ] = ( T, done ) ->\n  await T.perform null, null, null, -> return new Promise ( resolve, reject ) ->\n    #.......................................................................................................\n    pipeline    = []\n    pipeline.push 'abc'\n    pipeline.push $watch ( d ) -> help 'A', jr d\n    pipeline.push SP.new_wye 'UVW'\n    pipeline.push $watch ( d ) -> urge 'AB', jr d\n    SP.pull pipeline...\n    resolve null\n  #.........................................................................................................\n  await T.perform null, null, null, -> return new Promise ( resolve, reject ) ->\n    #.......................................................................................................\n    pipeline    = []\n    pipeline.push $watch ( d ) -> help 'A', jr d\n    pipeline.push SP.new_wye 'UVW'\n    pipeline.push $watch ( d ) -> urge 'AB', jr d\n    SP.pull pipeline...\n    resolve null\n  #.........................................................................................................\n  await T.perform null, null, null, -> return new Promise ( resolve, reject ) ->\n    #.......................................................................................................\n    pipeline    = []\n    pipeline.push $watch ( d ) -> help 'A', jr d\n    pipeline.push SP.new_wye 'UVW'\n    pipeline.push $watch ( d ) -> urge 'AB', jr d\n    pipeline.push $drain ->\n    SP.pull pipeline...\n    resolve null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"wye construction (method)\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [[\"abc\",\"UVWXYZ\"],\"abcUVWXYZ\",null]\n    ]\n  for [ [ probe_A, probe_B, ], matcher, error, ] in probes_and_matchers\n    await T.perform [ probe_A, probe_B, ], matcher, error, -> return new Promise ( resolve, reject ) ->\n      # wye         = SP.new_wye()\n      #.....................................................................................................\n      source_A    = probe_A\n      source_B    = probe_B\n      pipeline    = []\n      pipeline.push source_A\n      pipeline.push $watch ( d ) -> help 'A', jr d\n      pipeline.push SP.new_wye source_B\n      pipeline.push $watch ( d ) -> urge 'AB', jr d\n      pipeline.push $drain ( Σ ) ->\n        whisper 'AB', jr Σ\n        resolve Σ.join ''\n      SP.pull pipeline...\n      return null\n  #.........................................................................................................\n  done()\n  return null\n\n\n############################################################################################################\nif module is require.main then do => # await do =>\n  test @, 'timeout': 30000\n  # test @[ \"leapfrogging compared to wye\" ]\n  # test @[ \"wye construction (sync)\" ]\n  # test @[ \"wye construction (async)\" ]\n  # test @[ \"wye construction (method)\" ]\n  # test @[ \"wye construction (source, transform, drain ducts)\" ]\n\n\n\n\n\n\n\n"
  ]
}