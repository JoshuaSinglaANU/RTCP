{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../../src/tests/sort.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'STEAMPIPES/TESTS/SORT'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n{ is_empty\n  copy\n  assign\n  jr }                    = CND\n#...........................................................................................................\ntest                      = require 'guy-test'\n#...........................................................................................................\nSP                        = require '../..'\n{ $, $async, }            = SP\n\n\n#-----------------------------------------------------------------------------------------------------------\nsort = ( values ) -> new Promise ( resolve, reject ) =>\n  ### TAINT should handle errors (?) ###\n  pipeline  = []\n  pipeline.push SP.new_value_source values\n  pipeline.push SP.$sort()\n  pipeline.push SP.$drain ( result ) -> resolve result\n  SP.pull pipeline...\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"sort 1\" ] = ( T, done ) ->\n  # debug jr ( key for key of SP ).sort(); xxx\n  probes_and_matchers = [\n    [ [ 4, 9, 10, 3, 2 ], [ 2, 3, 4, 9, 10 ] ]\n    [ [ 'a', 'z', 'foo' ], [ 'a', 'foo', 'z' ] ]\n    ]\n  count     = probes_and_matchers.length\n  source    = SP.new_push_source()\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      resolve await sort probe\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"sort 2\" ] = ( T, done ) ->\n  # debug jr ( key for key of SP ).sort(); xxx\n  probes_and_matchers = [\n    [[4,9,10,3,2,null],[2,3,4,9,10],null]\n    [[4,9,10,3,2,null],[2,3,4,9,10],null]\n    [[4,9,10,\"frob\",3,2,null],null,\"unable to compare a text to a float\"]\n    [[\"a\",1,\"z\",\"foo\"],null,\"unable to compare a float to a text\"]\n    ]\n  count     = probes_and_matchers.length\n  source    = SP.new_push_source()\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      pipeline  = []\n      pipeline.push SP.new_value_source probe\n      pipeline.push SP.$sort()\n      pipeline.push SP.$drain ( result ) -> resolve result\n      SP.pull pipeline...\n      # resolve await sort probe\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"sort with permissive mode\" ] = ( T, done ) ->\n  # debug jr ( key for key of SP ).sort(); xxx\n  probes_and_matchers = [\n    [[4,9,10,3,2,null],[2,3,4,9,10],null]\n    [[4,9,10,3,2,null],[2,3,4,9,10],null]\n    [[4,9,10,\"frob\",3,2,null],[2,4,9,10,\"frob\",3],null]\n    [[\"a\",1,\"z\",\"foo\"],[\"a\",1,\"foo\",\"z\"],null]\n    ]\n  count     = probes_and_matchers.length\n  source    = SP.new_push_source()\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      pipeline  = []\n      pipeline.push SP.new_value_source probe\n      pipeline.push SP.$sort { strict: false, }\n      pipeline.push SP.$drain ( result ) -> resolve result\n      SP.pull pipeline...\n      # resolve await sort probe\n  #.........................................................................................................\n  done()\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  test @\n  # test @[ \"sort with permissive mode\" ]\n  # test @[ \"sort 2\" ]\n\n"
  ]
}