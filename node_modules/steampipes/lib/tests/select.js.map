{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../../src/tests/select.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'STEAMPIPES/TESTS/MODIFIERS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nOS                        = require 'os'\ntest                      = require 'guy-test'\n#...........................................................................................................\n# SP                        = require '../..'\n# { $\n#   $async\n#   $watch\n#   $show  }                = SP.export()\n#...........................................................................................................\ntypes                     = require '../types'\n{ isa\n  validate\n  type_of }               = types\n#...........................................................................................................\nread                      = ( path ) -> FS.readFileSync path, { encoding: 'utf-8', }\ndefer                     = setImmediate\n{ inspect, }              = require 'util'\nxrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\njr                        = JSON.stringify\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"$select with no argument\" ] = ( T, done ) ->\n  DATOM         = require 'datom'\n  { new_datom\n    select    } = DATOM.export()\n  #.........................................................................................................\n  SP            = require '../..'\n  { $\n    $async\n    $select\n    $drain\n    $show     } = SP.export()\n  #.........................................................................................................\n  call_count  = 0\n  callback    = => info 'callback'; call_count++\n  #.........................................................................................................\n  do =>\n    source    = [\n      new_datom '^foo'\n      new_datom '^bar'\n      new_datom '^baz'\n      new_datom '^bar' ]\n    matcher   = [{\"$key\":\"^foo\"},{\"$key\":\"^bar\"},{\"$key\":\"^baz\"},{\"$key\":\"^bar\"}]\n    pipeline  = []\n    pipeline.push source\n    pipeline.push $select '^bar', callback\n    pipeline.push $show()\n    pipeline.push $drain ( result ) =>\n      help jr result\n      T.eq call_count, 2\n      T.eq result, matcher\n      done()\n    SP.pull pipeline...\n    return null\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"$select with one argument\" ] = ( T, done ) ->\n  DATOM         = require 'datom'\n  { new_datom\n    select    } = DATOM.export()\n  #.........................................................................................................\n  SP            = require '../..'\n  { $\n    $async\n    $select\n    $drain\n    $show     } = SP.export()\n  #.........................................................................................................\n  call_count  = 0\n  callback    = ( d ) =>\n    info 'callback', d\n    call_count++\n    T.eq d, { $key: '^bar', }\n  #.........................................................................................................\n  do =>\n    source    = [\n      new_datom '^foo'\n      new_datom '^bar'\n      new_datom '^baz'\n      new_datom '^bar' ]\n    matcher   = [{\"$key\":\"^foo\"},{\"$key\":\"^bar\"},{\"$key\":\"^baz\"},{\"$key\":\"^bar\"}]\n    pipeline  = []\n    pipeline.push source\n    pipeline.push $select '^bar', callback\n    pipeline.push $show()\n    pipeline.push $drain ( result ) =>\n      help jr result\n      T.eq call_count, 2\n      T.eq result, matcher\n      done()\n    SP.pull pipeline...\n    return null\n  #.........................................................................................................\n  return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"$select with function as selector\" ] = ( T, done ) ->\n#   DATOM         = require 'datom'\n#   { new_datom\n#     select    } = DATOM.export()\n#   #.........................................................................................................\n#   SP            = require '../..'\n#   { $\n#     $async\n#     $select\n#     $drain\n#     $show     } = SP.export()\n#   #.........................................................................................................\n#   call_count  = 0\n#   selector    = ( d ) => whisper '^3322^', d; return d %% 3 is 0\n#   callback    = ( d ) =>\n#     info 'callback', d\n#     call_count++\n#   #.........................................................................................................\n#   do =>\n#     source    = [ 1 .. 20 ]\n#     matcher   = ( n for n in [ 1 .. 20 ] when n %% 3 is 0 )\n#     pipeline  = []\n#     pipeline.push source\n#     pipeline.push $select selector, callback\n#     pipeline.push $show()\n#     pipeline.push $drain ( result ) =>\n#       help jr result\n#       T.eq call_count, 2\n#       T.eq result, matcher\n#       done()\n#     SP.pull pipeline...\n#     return null\n#   #.........................................................................................................\n#   return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"$select with two arguments\" ] = ( T, done ) ->\n  DATOM         = require 'datom'\n  { new_datom\n    select    } = DATOM.export()\n  #.........................................................................................................\n  SP            = require '../..'\n  { $\n    $async\n    $select\n    $drain\n    $show     } = SP.export()\n  #.........................................................................................................\n  call_count  = 0\n  callback    = ( d, send ) =>\n    info 'callback', d, send\n    call_count++\n    T.eq d, { $key: '^bar', }\n    send d\n  #.........................................................................................................\n  do =>\n    source    = [\n      new_datom '^foo'\n      new_datom '^bar'\n      new_datom '^baz'\n      new_datom '^bar' ]\n    matcher   = [{\"$key\":\"^foo\"},{\"$key\":\"^bar\"},{\"$key\":\"^baz\"},{\"$key\":\"^bar\"}]\n    pipeline  = []\n    pipeline.push source\n    pipeline.push $select '^bar', callback\n    pipeline.push $show()\n    pipeline.push $drain ( result ) =>\n      help jr result\n      T.eq call_count, 2\n      T.eq result, matcher\n      done()\n    SP.pull pipeline...\n    return null\n  #.........................................................................................................\n  return null\n\n\n\n############################################################################################################\nunless module.parent?\n  test @\n"
  ]
}