{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/extras.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'STEAMPIPES-EXTRA'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  validate\n  validate_optional }     = types.export()\nSL                        = require 'intertext-splitlines'\nfreeze                    = Object.freeze\n\n#-----------------------------------------------------------------------------------------------------------\n@$split_lines = ( settings = null ) ->\n  ctx   = SL.new_context settings\n  last  = Symbol 'last'\n  return @$ { last, }, ( d, send ) =>\n    if d is last\n      send line for line from SL.flush ctx\n      return null\n    return unless d?\n    return unless isa.buffer d\n    send line for line from SL.walk_lines ctx, d\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$split_channels = ->\n  splitliners = {}\n  last        = Symbol 'last'\n  return @$ { last, }, ( d, send ) =>\n    { $key, $value, } = d\n    unless ( ctx = splitliners[ $key ] )?\n      ctx = splitliners[ $key ] = SL.new_context()\n    if d is last\n      send ( freeze { $key, $value, } ) for $value from SL.flush ctx\n      return null\n    return send d if ( not d? ) or ( not types.isa.buffer d.$value )\n    send ( freeze { $key, $value, } ) for $value from SL.walk_lines ctx, $value\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$batch = ( size, transform ) ->\n  validate.positive_integer size\n  validate_optional.function transform\n  collector = null\n  last      = Symbol 'last'\n  return @$ { last, }, ( d, send ) ->\n    if d is last\n      if collector?\n        send collector\n        collector = null\n      return\n    ( collector ?= [] ).push d\n    if collector.length >= size\n      send if transform? then transform collector else collector\n      collector = null\n\n#-----------------------------------------------------------------------------------------------------------\n@$sample = ( p = 0.5, settings ) ->\n  validate.nonnegative p\n  # validate_optional.positive settings.seed\n  #.........................................................................................................\n  return ( $ ( d, send ) -> send d  ) if p is 1\n  return ( $ ( d, send ) -> null    ) if p is 0\n  #.........................................................................................................\n  headers   = settings?[ 'headers'     ] ? false\n  seed      = settings?[ 'seed'        ] ? null\n  is_first  = headers\n  rnd       = if seed? then CND.get_rnd seed else Math.random\n  #.........................................................................................................\n  return @$ ( d, send ) =>\n    if is_first\n      is_first = false\n      return send d\n    send d if rnd() < p\n\n\n\n\n"
  ]
}