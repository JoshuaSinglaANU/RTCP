{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/text.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'STEAMPIPES/TEXT'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n{ jr }                    = CND\n#...........................................................................................................\n{ isa\n  validate\n  type_of }               = require './types'\n\n# $pull_split               = require 'pull-split'\n# $pull_utf8_decoder        = require 'pull-utf8-decoder'\n\n#-----------------------------------------------------------------------------------------------------------\n@new_text_source = ( text ) -> $values [ text, ]\n\n# #-----------------------------------------------------------------------------------------------------------\n# @new_text_sink = -> throw new Error \"µ66539 not implemented\"\n\n# #-----------------------------------------------------------------------------------------------------------\n# @$split = ( settings ) ->\n#   throw new Error \"µ66662 MEH\" if settings?\n#   R         = []\n#   matcher   = null\n#   mapper    = null\n#   reverse   = no\n#   skip_last = yes\n#   R.push $pull_utf8_decoder()\n#   R.push $pull_split matcher, mapper, reverse, skip_last\n#   R.push @$ ( line, send ) -> send line.replace /\\r+$/g, ''\n#   return @pull R...\n\n#-----------------------------------------------------------------------------------------------------------\n@$join = ( joiner = null ) ->\n  collector = []\n  length    = 0\n  type      = null\n  is_first  = yes\n  return @$ { last: null, }, ( data, send ) ->\n    if data?\n      if is_first\n        is_first  = no\n        type      = type_of data\n        switch type\n          when 'text'\n            joiner ?= ''\n          when 'buffer'\n            throw new Error \"µ66785 joiner not supported for buffers, got #{rpr joiner}\" if joiner?\n          else\n            throw new Error \"µ66908 expected a text or a buffer, got a #{type}\"\n      else\n        unless ( this_type = type_of data ) is type\n          throw new Error \"µ67031 expected a #{type}, got a #{this_type}\"\n      length += data.length\n      collector.push data\n    else\n      return send '' if ( collector.length is 0 ) or ( length is 0 )\n      return send collector.join '' if type is 'text'\n      return send Buffer.concat collector, length\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$as_line = ->\n  return @$map ( line ) =>\n    \"µ67154 expected a text, got a #{type}\" unless ( type = type_of line ) is 'text'\n    line + '\\n'\n\n#-----------------------------------------------------------------------------------------------------------\n@$trim = ->\n  return @$map ( line ) =>\n    \"µ67277 expected a text, got a #{type}\" unless ( type = type_of line ) is 'text'\n    return line.trim()\n\n#-----------------------------------------------------------------------------------------------------------\n@$skip_empty = ->\n  return @$filter ( line ) =>\n    \"µ67400 expected a text, got a #{type}\" unless ( type = type_of line ) is 'text'\n    return line.length > 0\n\n#-----------------------------------------------------------------------------------------------------------\n@$skip_blank = ->\n  return @$filter ( line ) =>\n    \"µ67523 expected a text, got a #{type}\" unless ( type = type_of line ) is 'text'\n    return not ( line.match /^\\s*$/ )?\n\n#-----------------------------------------------------------------------------------------------------------\n@$as_text = ( settings ) ->\n  serialize = settings?[ 'serialize' ] ? JSON.stringify\n  return @$map ( data ) => serialize data\n\n#-----------------------------------------------------------------------------------------------------------\n@$desaturate = ->\n  ### remove ANSI escape sequences ###\n  pattern = /\\x1b\\[[0-9;]*[JKmsu]/g\n  return @$map ( line ) => line.replace pattern, ''\n\n\n\n"
  ]
}