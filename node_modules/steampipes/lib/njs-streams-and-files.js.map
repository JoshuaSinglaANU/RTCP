{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/njs-streams-and-files.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nbadge                     = 'STEAMPIPES/NJS-STREAMS-AND-FILES'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nFS                        = require 'fs'\n# TO_PULL_STREAM            = require 'stream-to-pull-stream'\n# TO_NODE_STREAM            = require '../deps/pull-stream-to-stream-patched'\n# TO_NODE_STREAM            = require 'pull-stream-to-stream'\ndefer                     = setImmediate\n{ jr }                    = CND\ntypes                     = require './types'\n{ isa\n  validate\n  type_of }               = types\n\n\n\n#===========================================================================================================\n# READ FROM, WRITE TO FILES, NODEJS STREAMS\n#-----------------------------------------------------------------------------------------------------------\n@read_from_file = ( path, byte_count = 65536 ) ->\n  ### TAINT use settings object ###\n  validate.positive_integer byte_count\n  pfy           = ( require 'util' ).promisify\n  source        = @new_push_source()\n  #.........................................................................................................\n  defer =>\n    fd    = await ( pfy FS.open ) path, 'r'\n    read  = pfy FS.read\n    loop\n      buffer      = Buffer.alloc byte_count\n      bytes_read  = ( await read fd, buffer, 0, byte_count, null ).bytesRead\n      break if bytes_read is 0\n      source.send if bytes_read < byte_count then ( buffer.slice 0, bytes_read ) else buffer\n    source.end()\n    return null\n  #.........................................................................................................\n  return source\n\n#-----------------------------------------------------------------------------------------------------------\n@_KLUDGE_file_as_buffers = ( path, byte_count = 65536 ) -> new Promise ( resolve ) =>\n  pipeline  = []\n  pipeline.push @read_from_file path, byte_count\n  pipeline.push @$pass()\n  pipeline.push @$drain ( buffers ) => resolve buffers\n  @pull pipeline...\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$split = ( splitter = '\\n', decode = true ) ->\n  ### thx to https://github.com/maxogden/binary-split/blob/master/index.js ###\n  validate.nonempty_text splitter\n  validate.boolean decode\n  is_buffer = Buffer.isBuffer\n  matcher   = Buffer.from splitter\n  buffered  = null\n  last      = Symbol 'last'\n  #.........................................................................................................\n  find_first_match = ( buffer, offset ) ->\n    return -1 if offset >= buffer.length\n    for i in [ offset ... buffer.length ] by +1\n      if buffer[ i ] is matcher[ 0 ]\n        if matcher.length > 1\n          fullMatch = true\n          j = i\n          k = 0\n          while j < i + matcher.length\n            if buffer[ j ] isnt matcher[ k ]\n              fullMatch = false\n              break\n            j++\n            k++\n          return j - matcher.length if fullMatch\n        else\n          break\n    return i + matcher.length - 1\n  #.........................................................................................................\n  return @$ { last, }, ( d, send ) ->\n    if d is last\n      if buffered?\n        send if decode then ( buffered.toString 'utf-8' ) else buffered\n      return\n    throw new Error \"µ23211 expected a buffer, got a #{type_of d}\" unless is_buffer d\n    offset    = 0\n    lastMatch = 0\n    if buffered?\n      d         = Buffer.concat [ buffered, d, ]\n      offset    = buffered.length\n      buffered  = null\n    loop\n      idx = find_first_match d, offset - matcher.length + 1\n      if idx >= 0 and idx < d.length\n        e         = d.slice lastMatch, idx\n        send if decode then ( e.toString 'utf-8' ) else e\n        offset    = idx + matcher.length\n        lastMatch = offset\n      else\n        buffered  = d.slice(lastMatch)\n        break\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@tee_write_to_file = ( path, options ) ->\n  ### TAINT consider to abandon all sinks except `$drain()` and use throughs with writers instead ###\n  ### TAINT consider using https://pull-stream.github.io/#pull-write-file instead ###\n  ### TAINT code duplication ###\n  switch ( arity = arguments.length )\n    when 1 then stream = FS.createWriteStream path\n    when 2 then stream = FS.createWriteStream path, options\n    else throw new Error \"µ9983 expected 1 to 3 arguments, got #{arity}\"\n  return @tee_write_to_nodejs_stream stream\n\n#-----------------------------------------------------------------------------------------------------------\n@tee_write_to_file_sync = ( path, options ) ->\n  return @$watch ( d ) -> FS.appendFileSync path, d\n\n# #-----------------------------------------------------------------------------------------------------------\n# @read_from_nodejs_stream = ( stream ) ->\n#   switch ( arity = arguments.length )\n#     when 1 then null\n#     else throw new Error \"µ9983 expected 1 argument, got #{arity}\"\n#   #.........................................................................................................\n#   return TO_PULL_STREAM.source stream, ( error ) -> finish error\n\n#-----------------------------------------------------------------------------------------------------------\n@tee_write_to_nodejs_stream = ( stream ) ->\n  ### TAINT code duplication ###\n  # throw new Error \"µ76644 method `tee_write_to_nodejs_stream()` not yet implemented\"\n  switch ( arity = arguments.length )\n    when 1 then null\n    else throw new Error \"µ9983 expected 1 argument, got #{arity}\"\n  last = Symbol 'last'\n  #.........................................................................................................\n  stream.on 'close', -> debug 'µ55544', 'close'\n  stream.on 'error', -> throw error\n  #.........................................................................................................\n  return @$ { last, }, ( d, send ) =>\n    warn \"µ87876 closing stream\" if d is last\n    return stream.close() if d is last\n    warn \"µ87876 writing\", jr d\n    stream.write d\n    send d\n\n# #-----------------------------------------------------------------------------------------------------------\n# @tee_write_to_nodejs_stream = ( stream, on_end ) ->\n#   ### TAINT code duplication ###\n#   switch ( arity = arguments.length )\n#     when 1, 2 then null\n#     else throw new Error \"µ9983 expected 1 or 2 arguments, got #{arity}\"\n#   validate.function on_end if on_end?\n#   has_finished  = false\n#   last          = Symbol 'last'\n#   #.........................................................................................................\n#   finish = ( error ) ->\n#     if error?\n#       has_finished = true\n#       throw error if error?\n#     if not has_finished\n#       has_finished = true\n#       on_end() if on_end?\n#     return null\n#   #.........................................................................................................\n#   stream.on 'close', -> finish()\n#   stream.on 'error', -> finish error\n#   # description = { [@marks.isa_sink], type: 'tee_write_to_nodejs_stream', stream, on_end, }\n#   #.........................................................................................................\n#   pipeline = []\n#   pipeline.push @$watch { last, }, ( d ) ->\n#     return stream.close() if d is last\n#     stream.write d\n#   pipeline.push @$drain finish\n#   #.........................................................................................................\n#   return @pull pipeline...\n\n# #-----------------------------------------------------------------------------------------------------------\n# @node_stream_from_source = ( source ) -> TO_NODE_STREAM.source source\n\n# #-----------------------------------------------------------------------------------------------------------\n# @node_stream_from_sink = ( sink ) ->\n#   ### TAINT consider to abandon all sinks except `$drain()` and use throughs with writers instead ###\n#   R           = TO_NODE_STREAM.sink sink\n#   description = { type: 'node_stream_from_sink', sink, }\n#   return @mark_as_sink R, description\n\n\n\n\n\n"
  ]
}