{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/pull-remit.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'STEAMPIPES/PULL-REMIT'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n{ jr }                    = CND\n#...........................................................................................................\n{ isa\n  validate\n  type_of }               = require './types'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n### Signals are special values that, when sent down the pipeline, may alter behavior: ###\n@signals = Object.freeze\n  last:             Symbol.for 'steampipes/last'        # Used to signal last data item\n  end:              Symbol.for 'steampipes/end'         # Request stream to terminate\n\n#-----------------------------------------------------------------------------------------------------------\n### Marks are special values that identify types, behavior of pipeline elements etc: ###\n@marks = Object.freeze\n  steampipes:       Symbol.for 'steampipes/steampipes'  # Marks steampipes objects\n  validated:        Symbol.for 'steampipes/validated'   # Marks a validated sink\n  isa_duct:         Symbol.for 'steampipes/isa_duct'    # Marks a duct as such\n  isa_pusher:       Symbol.for 'steampipes/isa_pusher'  # Marks a push source as such\n  isa_wye:          Symbol.for 'steampipes/isa_wye'     # Marks an intermediate source\n  send_last:        Symbol.for 'steampipes/send_last'   # Marks transforms expecting a certain value before EOS\n  async:            Symbol.for 'steampipes/async'       # Marks transforms as asynchronous (experimental)\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@remit  = @$ = ( modifications..., transform ) ->\n  validate.function transform\n  unless ( arity = transform.length ) is 2\n    throw new Error \"^steampipes/pullremit@7000^ transform arity #{arity} not implemented\"\n  unless ( sink = transform.sink )?\n    transform.sink = sink = []\n  transform.send = sink.push.bind sink\n  return @modify modifications..., transform if modifications.length > 0\n  return transform\n\n#-----------------------------------------------------------------------------------------------------------\n@$async = ( transform ) ->\n  ### TAINT incomplete implementation: surround, leapfrog arguments missing ###\n  unless arguments.length is 1\n    throw new Error \"^steampipes/pullremit@7001^ modifications not yet implemented\"\n  unless ( arity = transform.length ) is 3\n    throw new Error \"^steampipes/pullremit@7002^ transform arity #{arity} not implemented\"\n  resolve = null\n  R       = ( d, send ) => return new Promise ( r_ ) => resolve = r_; await transform d, send, done\n  R.sink  = sink = []\n  R.send  = send = sink.push\n  R.done  = done = -> resolve()\n  R[ @marks.async ] = @marks.async\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_classify_sink = ( transform ) ->\n  @_$drain transform unless transform[ @marks.validated ]?\n  R = { type: 'sink', }\n\n#-----------------------------------------------------------------------------------------------------------\n@_classify_transform = ( transform ) ->\n  R = do =>\n    return { type: transform.type,              } if transform[ @marks.isa_duct   ]?\n    return { type: 'source', isa_pusher: true,  } if transform[ @marks.isa_pusher ]?\n    return { type: 'wye',                       } if transform[ @marks.isa_wye    ]?\n    return { type: 'source',                    } if transform[ Symbol.iterator   ]?\n    return @_classify_sink transform              if ( isa.object transform ) and transform.sink?\n    switch type = type_of transform\n      when 'function'           then return { type: 'through', }\n      when 'generatorfunction'  then return { type: 'source', must_call: true, }\n      when 'asyncgenerator'\n        transform[ @marks.async ] = true\n        return { type: 'source', must_call: false, }\n    throw new Error \"^steampipes/pullremit@7003^ expected an iterable, a function, a generator function or a sink, got a #{type}\"\n  R.mode = if transform[ @marks.async ]? then 'async' else 'sync'\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_flatten_transforms = ( transforms, R = null ) ->\n  R ?= []\n  for transform in transforms\n    ### TAINT how can `undefined` end up in `transforms`??? ###\n    # continue unless transform?\n    if transform[ @marks.isa_duct ]?\n      ### TAINT necessary to do this recursively? ###\n      R.push t for t in transform.transforms\n    else\n      R.push transform\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_new_duct = ( transforms ) ->\n  transforms  = @_flatten_transforms transforms\n  blurbs      = ( @_classify_transform transform for transform in transforms )\n  R           = { [@marks.steampipes], [@marks.isa_duct], transforms, blurbs, }\n  R.mode      = if ( blurbs.some ( blurb ) -> blurb.mode is 'async' ) then 'async' else 'sync'\n  if transforms.length is 0\n    R.is_empty = true\n    return R\n  #.........................................................................................................\n  R.first = blurbs[ 0 ]\n  if transforms.length is 1\n    R.is_single   = true\n    R.last        = R.first\n    R.type        = R.first.type\n  else\n    R.last        = blurbs[ transforms.length - 1 ]\n    switch key = \"#{R.first.type}/#{R.last.type}\"\n      when 'source/through'   then R.type = 'source'\n      when 'through/sink'     then R.type = 'sink'\n      when 'through/through'  then R.type = 'through'\n      when 'source/sink'      then R.type = 'circuit'\n      else throw new Error \"^steampipes/pullremit@7004^ illegal duct configuration #{rpr key}\"\n    for idx in [ 1 ... blurbs.length - 1 ] by +1\n      switch ( b = blurbs[ idx ] ).type\n        when 'through', 'wye' then null\n        else throw new Error \"^steampipes/pullremit@7005^ illegal duct configuration at transform index #{idx}: #{rpr b}\"\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_pull = ( transforms... ) ->\n  duct                  = @_new_duct transforms\n  { transforms, }       = duct\n  original_source       = null\n  if duct.last.type  is 'source'\n    throw new Error \"^steampipes/pullremit@7006^ source as last transform not yet supported\"\n  if duct.first.type is 'sink'\n    throw new Error \"^steampipes/pullremit@7007^ sink as first transform not yet supported\"\n  #.........................................................................................................\n  if duct.first.type is 'source'\n    transforms[ 0 ] = transforms[ 0 ]() if duct.first.must_call\n    source          = transforms[ 0 ]\n  #.........................................................................................................\n  return duct unless duct.type is 'circuit'\n  #.........................................................................................................\n  drain                 = transforms[ transforms.length - 1 ]\n  duct.buckets          = buckets = ( transforms[ idx ].sink for idx in [ 1 ... transforms.length - 1 ] )\n  duct.buckets.push drain.sink if drain.use_sink\n  duct.has_ended        = false\n  local_sink            = null\n  local_source          = null\n  has_local_sink        = null\n  last                  = @signals.last\n  last_transform_idx    = buckets.length - if drain.use_sink then 2 else 1\n  tf_idxs               = [ 0 .. last_transform_idx ]\n  #.........................................................................................................\n  send = ( d ) =>\n    return duct.has_ended = true if d is @signals.end\n    local_sink.push d if has_local_sink\n    return null\n  send.end = => duct.has_ended = true\n  #.........................................................................................................\n  exhaust_pipeline = =>\n    loop\n      data_count    = 0\n      for idx in tf_idxs\n        continue if ( local_source = buckets[ idx ] ).length is 0\n        transform       = transforms[  idx + 1 ]\n        local_sink      = buckets[ idx + 1 ]\n        has_local_sink  = local_sink?\n        d               = local_source.shift()\n        data_count     += local_source.length\n        if d is last\n          transform d, send if transform[ @marks.send_last ]?\n          send last unless idx is last_transform_idx\n        else\n          transform d, send\n      break if data_count is 0\n    return null\n  #.........................................................................................................\n  exhaust_async_pipeline = =>\n    loop\n      data_count    = 0\n      # for transform, idx in transforms\n      for idx in tf_idxs\n        continue if ( local_source = buckets[ idx ] ).length is 0\n        transform       = transforms[  idx + 1 ]\n        local_sink      = buckets[ idx + 1 ]\n        has_local_sink  = local_sink?\n        d               = local_source.shift()\n        data_count     += local_source.length\n        if transform[ @marks.async ]?\n          if d is last\n            await transform d, send if transform[ @marks.send_last ]?\n            send last unless idx is last_transform_idx\n          else\n            await transform d, send\n        else\n          if d is last\n            transform d, send if transform[ @marks.send_last ]?\n            send last unless idx is last_transform_idx\n          else\n            transform d, send\n      break if data_count is 0\n    return null\n  #.........................................................................................................\n  duct.send                   = send\n  duct.exhaust_pipeline       = exhaust_pipeline\n  duct.exhaust_async_pipeline = exhaust_async_pipeline\n  #.........................................................................................................\n  return duct\n\n#-----------------------------------------------------------------------------------------------------------\n@_integrate_wye = ( transforms, wye_idx ) ->\n  throw new Error \"not yet implemented\"\n  last        = Symbol 'last'\n  #.........................................................................................................\n  source_A    = probe_A\n  A_has_ended = false\n  B_has_ended = false\n  pipeline_A  = []\n  pipeline_A.push source_A\n  pipeline_A.push $watch ( d ) -> help 'A', jr d\n  pipeline_A.push $ { last, }, ( d, send ) ->\n    if d is last\n      A_has_ended = true\n      return end_source_C()\n    source_C.send d\n  pipeline_A.push $drain -> whisper 'A'\n  #.........................................................................................................\n  source_B    = probe_B\n  pipeline_B  = []\n  pipeline_B.push source_B\n  pipeline_B.push $watch ( d ) -> urge 'B', jr d\n  pipeline_B.push $ { last, }, ( d, send ) ->\n    if d is last\n      B_has_ended = true\n      return end_source_C()\n    source_C.send d\n  pipeline_B.push $drain -> whisper 'B'\n  #.........................................................................................................\n  source_C    = SP.new_push_source()\n  pipeline_C  = []\n  pipeline_C.push source_C\n  pipeline_C.push $watch ( d ) -> info 'C', jr d\n  pipeline_C.push $drain ( Σ ) ->\n    whisper 'C', jr Σ\n    resolve Σ.join ''\n  #.........................................................................................................\n  end_source_C = ->\n    return unless ( A_has_ended and B_has_ended )\n    source_C.end()\n  #.........................................................................................................\n  # pipeline_A.push wye\n  duct_C  = SP.pull pipeline_C...\n  duct_A  = SP.pull pipeline_A...\n  duct_B  = SP.pull pipeline_B...\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_integrate_wyes = ( transforms... ) ->\n#   # debug '^776665^', transforms\n#   # for transform, wye_idx in transforms\n#   #   if transform[ @marks.isa_wye ]\n#   #     return @_integrate_wye transforms, wye_idx\n#   return null\n\n#-----------------------------------------------------------------------------------------------------------\n@pull = ( transforms... ) ->\n  # return duct if ( duct = @_integrate_wyes transforms... )?\n  duct = @_pull transforms...\n  #.........................................................................................................\n  if isa.function           duct.transforms[ 0 ].start  then        duct.transforms[ 0 ].start()\n  # else if isa.asyncfunction duct.transforms[ 0 ].start  then  await duct.transforms[ 0 ].start()\n  #.........................................................................................................\n  return duct unless duct.type is 'circuit'\n  return @_pull_async duct if duct.mode is 'async'\n  return @_push duct if duct.transforms[ 0 ][ @marks.isa_pusher ]?\n  first_bucket = duct.buckets[ 0 ]\n  #.........................................................................................................\n  for d from duct.transforms[ 0 ]\n    break if duct.has_ended\n    first_bucket.push d\n    duct.exhaust_pipeline()\n  #.........................................................................................................\n  first_bucket.push @signals.last\n  duct.exhaust_pipeline()\n  drain = duct.transforms[ duct.transforms.length - 1 ]\n  if ( on_end = drain.on_end )?\n    if drain.call_with_datoms then drain.on_end drain.sink else drain.on_end()\n  return duct\n\n#-----------------------------------------------------------------------------------------------------------\n@_pull_async = ( duct ) ->\n  return duct unless duct.type is 'circuit'\n  return @_push duct if duct.transforms[ 0 ][ @marks.isa_pusher ]?\n  first_bucket = duct.buckets[ 0 ]\n  #.........................................................................................................\n  for await d from duct.transforms[ 0 ]\n    break if duct.has_ended\n    first_bucket.push d\n    await duct.exhaust_async_pipeline()\n  #.........................................................................................................\n  first_bucket.push @signals.last\n  await duct.exhaust_async_pipeline()\n  drain = duct.transforms[ duct.transforms.length - 1 ]\n  if ( on_end = drain.on_end )?\n    if drain.call_with_datoms then drain.on_end drain.sink else drain.on_end()\n  return duct\n\n#-----------------------------------------------------------------------------------------------------------\n@_push = ( duct ) ->\n  ### Make `duct` available from the POV of the push source: ###\n  source        = duct.transforms[ 0 ]\n  source.duct   = duct\n  ### copy buffered data (from before when `pull()` was called) to `source`: ###\n  first_bucket  = duct.buckets[ 0 ]\n  first_bucket.splice first_bucket.length, 0, source.buffer...\n  ### Process any data as may have accumulated at this point: ###\n  if duct.mode is 'async' then  await duct.exhaust_async_pipeline()\n  else                          duct.exhaust_pipeline()\n  # debug '^333121^', 'duct', duct\n  # debug '^333121^', 'duct.has_ended', duct.has_ended\n  # debug '^45899^', 'source.has_ended', duct.has_ended or source.has_ended\n  ### TAINT code duplication ###\n  if duct.has_ended or source.has_ended\n    drain = duct.transforms[ duct.transforms.length - 1 ]\n    if ( on_end = drain.on_end )?\n      if drain.call_with_datoms then drain.on_end drain.sink else drain.on_end()\n  return null\n\n\n"
  ]
}