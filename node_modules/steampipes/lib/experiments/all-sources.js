// Generated by CoffeeScript 2.5.1
(function() {
  //###########################################################################################################
  var $, $async, $drain, $show, $watch, CND, FS, OS, PATH, SP, alert, badge, debug, defaults, echo, help, info, isa, jr, log, lpad, rpad, rpr, sleep, test, type_of, types_of, urge, validate, warn, whisper;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'STEAMPIPES/TESTS/ALL-SOURCES';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  PATH = require('path');

  FS = require('fs');

  OS = require('os');

  test = require('guy-test');

  ({jr} = CND);

  //...........................................................................................................
  ({isa, validate, defaults, types_of, type_of} = require('../types'));

  //...........................................................................................................
  SP = require('../..');

  ({$, $async, $drain, $watch, $show} = SP.export());

  //...........................................................................................................
  rpad = function(x, ...P) {
    return x.padEnd(...P);
  };

  lpad = function(x, ...P) {
    return x.padStart(...P);
  };

  sleep = function(dts) {
    return new Promise((done) => {
      return setTimeout(done, dts * 1000);
    });
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this._get_custom_iterable_1 = function() {
    /* ths to https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols */
    var myIterable;
    myIterable = {
      [Symbol.iterator]: function*() {
        yield "𫠠";
        yield "𫠡";
        return (yield "𫠢");
      }
    };
    return ['mdn_custom_iterable', myIterable, ["𫠠", "𫠡", "𫠢"], null];
  };

  //-----------------------------------------------------------------------------------------------------------
  this._get_custom_iterable_2 = function() {
    var myIterable_2;
    myIterable_2 = {
      [Symbol.iterator]: function*() {
        return (yield* ["𫠠", "𫠡", "𫠢"]);
      }
    };
    return ['object_with_list_as_iterator', myIterable_2, ["𫠠", "𫠡", "𫠢"], null];
  };

  //-----------------------------------------------------------------------------------------------------------
  this._get_standard_iterables = function() {
    return [
      ['text',
      "𫠠𫠡𫠢",
      ["𫠠",
      "𫠡",
      "𫠢"],
      null],
      ['list',
      ["𫠠",
      "𫠡",
      "𫠢"],
      ["𫠠",
      "𫠡",
      "𫠢"],
      null],
      ['set',
      new Set("𫠠𫠡𫠢"),
      ["𫠠",
      "𫠡",
      "𫠢"],
      null],
      ['map',
      new Map([["𫠠",
      "𫠡𫠢"]]),
      [["𫠠",
      "𫠡𫠢"]],
      null],
      [
        'generator',
        (function*() {
          yield '𫠠';
          yield '𫠡';
          return (yield '𫠢');
        })(),
        ["𫠠",
        "𫠡",
        "𫠢"],
        null
      ]
    ];
  };

  //-----------------------------------------------------------------------------------------------------------
  this._get_generatorfunction = function() {
    return [
      'generatorfunction',
      (function*() {
        yield '𫠠';
        yield '𫠡';
        return (yield '𫠢');
      }),
      ["𫠠",
      "𫠡",
      "𫠢"],
      null
    ];
  };

  //-----------------------------------------------------------------------------------------------------------
  this._get_asyncgenerator = function() {
    return [
      'asyncgenerator',
      (async function*() {
        await 42;
        yield '𫠠';
        yield '𫠡';
        return (yield '𫠢');
      })(),
      ["𫠠",
      "𫠡",
      "𫠢"],
      null
    ];
  };

  //-----------------------------------------------------------------------------------------------------------
  this._get_asyncgeneratorfunction = function() {
    return [
      'asyncgeneratorfunction',
      (async function*() {
        await 42;
        yield '𫠠';
        yield '𫠡';
        return (yield '𫠢');
      }),
      ["𫠠",
      "𫠡",
      "𫠢"],
      null
    ];
  };

  //-----------------------------------------------------------------------------------------------------------
  this._get_function_1 = function() {
    return [
      'function_1',
      (function() {
        return ["𫠠",
      "𫠡",
      "𫠢"];
      }),
      ["𫠠",
      "𫠡",
      "𫠢"],
      null
    ];
  };

  this._get_asyncfunction_1 = function() {
    return [
      'asyncfunction_1',
      (async function() {
        await 42;
        return ["𫠠",
      "𫠡",
      "𫠢"];
      }),
      ["𫠠",
      "𫠡",
      "𫠢"],
      null
    ];
  };

  this._get_function_2 = function() {
    return [
      'function_2',
      (function() {
        return function*() {
          yield '𫠠';
          yield '𫠡';
          return (yield '𫠢');
        };
      }),
      ["𫠠",
      "𫠡",
      "𫠢"],
      null
    ];
  };

  this._get_asyncfunction_2 = function() {
    return [
      'asyncfunction_2',
      (async function() {
        await 42;
        return function*() {
          yield '𫠠';
          yield '𫠡';
          return (yield '𫠢');
        };
      }),
      ["𫠠",
      "𫠡",
      "𫠢"],
      null
    ];
  };

  this._get_function_3 = function() {
    return [
      'function_3',
      (function() {
        return async function*() {
          await 42;
          yield '𫠠';
          yield '𫠡';
          return (yield '𫠢');
        };
      }),
      ["𫠠",
      "𫠡",
      "𫠢"],
      null
    ];
  };

  this._get_asyncfunction_3 = function() {
    return [
      'asyncfunction_3',
      (async function() {
        await 42;
        return async function*() {
          await 42;
          yield '𫠠';
          yield '𫠡';
          return (yield '𫠢');
        };
      }),
      ["𫠠",
      "𫠡",
      "𫠢"],
      null
    ];
  };

  //-----------------------------------------------------------------------------------------------------------
  this._get_all_probes_and_matchers = function() {
    return [...this._get_standard_iterables(), this._get_custom_iterable_2(), this._get_generatorfunction(), this._get_asyncgenerator(), this._get_asyncgeneratorfunction(), this._get_custom_iterable_1(), this._get_function_1(), this._get_asyncfunction_1(), this._get_function_2(), this._get_asyncfunction_2(), this._get_function_3(), this._get_asyncfunction_3()];
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this["tabulate distinctive features"] = async function(T, done) {
    await (async() => {
      /* TAINT should not call iterator before ready; here done for illustration */
      var async_iterator, async_iterator_type, async_iterator_type_txt, d, i, iterator, iterator_return_type, iterator_return_type_txt, iterator_type, iterator_type_txt, len, mode, mode_txt, name, name_txt, probe, probe_txt, probe_type, probe_type_txt, probes_and_matchers, result, result_txt, results;
      probes_and_matchers = this._get_all_probes_and_matchers();
      results = [];
      for (i = 0, len = probes_and_matchers.length; i < len; i++) {
        [name, probe] = probes_and_matchers[i];
        //.....................................................................................................
        /* STEP 1 */
        mode = 'sync';
        probe_type = type_of(probe);
        //.....................................................................................................
        if (probe_type === 'generatorfunction' || probe_type === 'asyncgeneratorfunction') {
          probe = probe();
          probe_type = type_of(probe);
        }
        //.....................................................................................................
        /* STEP 2 */
        iterator = probe[Symbol.iterator];
        iterator_type = type_of(iterator);
        iterator_return_type = './.';
        //.....................................................................................................
        if (iterator_type === 'function') {
          iterator_return_type = type_of(iterator.apply(probe));
        }
        //.....................................................................................................
        /* STEP 3 */
        async_iterator = void 0;
        async_iterator_type = 'undefined';
        if (iterator == null) {
          async_iterator = probe[Symbol.asyncIterator];
          async_iterator_type = type_of(async_iterator);
          mode = 'async';
        }
        if (iterator_type === 'undefined') {
          //.....................................................................................................
          iterator_type = './.';
        }
        if (async_iterator_type === 'undefined') {
          async_iterator_type = './.';
        }
        //.....................................................................................................
        /* STEP 4 */
        switch (mode) {
          case 'sync':
            result = (function() {
              var ref, results1;
              ref = iterator.apply(probe);
              results1 = [];
              for (d of ref) {
                results1.push(d);
              }
              return results1;
            })();
            break;
          case 'async':
            result = (await (async function() {
              var ref, results1;
              ref = async_iterator.apply(probe);
              results1 = [];
              for await (d of ref) {
                results1.push(d);
              }
              return results1;
            })());
        }
        //.....................................................................................................
        name_txt = CND.blue(rpad(name, 30));
        probe_type_txt = CND.gold(rpad(probe_type, 23));
        mode_txt = CND.steel(lpad(mode, 5));
        iterator_type_txt = CND.gold(rpad(iterator_type, 20));
        iterator_return_type_txt = CND.lime(rpad(iterator_return_type, 20));
        async_iterator_type_txt = CND.gold(rpad(async_iterator_type, 20));
        result_txt = CND.green(rpad((jr(result)).slice(0, 16), 15));
        probe_txt = CND.grey(((rpr(probe)).replace(/\s+/g, ' ')).slice(0, 41));
        //.....................................................................................................
        results.push(echo(name_txt, probe_type_txt, mode_txt, iterator_type_txt, CND.white('->'), iterator_return_type_txt, async_iterator_type_txt, result_txt));
      }
      return results;
    })();
    // probe_txt
    return done();
  };

  //-----------------------------------------------------------------------------------------------------------
  this["iterate"] = async function(T, done) {
    /* NOTE mode is 'async' if procuring generator or iteration is async */
    var check_count, d, error, hit_count, i, len, matcher, mode, mode_txt, name, name_txt, probes_and_matchers, ref, result, result_txt, source, type, types, types_txt;
    probes_and_matchers = this._get_all_probes_and_matchers();
    check_count = 0;
    hit_count = 0;
//.........................................................................................................
    for (i = 0, len = probes_and_matchers.length; i < len; i++) {
      [name, source, matcher, error] = probes_and_matchers[i];
      check_count++;
      types = [];
      mode = 'sync';
      types.push(type_of(source));
      //.......................................................................................................
      if ((type = type_of(source)) === 'function') {
        source = source();
        types.push(type_of(source));
      //.......................................................................................................
      } else if (type === 'asyncfunction') {
        mode = 'async';
        source = (await source());
        types.push(type_of(source));
      }
      //.......................................................................................................
      if ((ref = type_of(source)) === 'generatorfunction' || ref === 'asyncgeneratorfunction') {
        source = source();
        types.push(type_of(source));
      }
      //.......................................................................................................
      error = null;
      type = type_of(source);
      name_txt = CND.blue(rpad(name, 30));
      types_txt = CND.grey(rpad(types.join(' -> '), 60));
      if (type === 'asyncgenerator') {
        mode = 'async';
      }
      mode_txt = mode === 'sync' ? CND.green('sync ') : CND.red('async');
      try {
        if (type === 'asyncgenerator') {
          result = (await (async function() {
            var results;
            results = [];
            for await (d of source) {
              results.push(d);
            }
            return results;
          })());
        } else {
          result = (function() {
            var results;
            results = [];
            for (d of source) {
              results.push(d);
            }
            return results;
          })();
        }
      } catch (error1) {
        error = error1;
        warn(name_txt, CND.grey(type), CND.red(error.message));
      }
      result_txt = jr(result);
      if (error == null) {
        if (CND.equals(result, matcher)) {
          hit_count++;
          result_txt = CND.green(result_txt);
        } else {
          result_txt = CND.red(result_txt, '≠', jr(matcher));
        }
        info(name_txt, mode_txt, types_txt, result_txt);
      }
    }
    //.........................................................................................................
    urge(`${hit_count} / ${check_count}`);
    T.eq(hit_count, check_count);
    //.........................................................................................................
    return done();
  };

  //###########################################################################################################
  if (module === require.main) {
    (() => {
      // test @, { timeout: 5000, }
      return test(this["iterate"].bind(this));
    })();
  }

  // test @[ "tabulate distinctive features" ].bind @
// test @[ "wye construction (async)" ]
// test @[ "wye construction (method)" ]
// test @[ "generatorfunction" ]
// test @[ "asyncgeneratorfunction" ]

}).call(this);

//# sourceMappingURL=all-sources.js.map
