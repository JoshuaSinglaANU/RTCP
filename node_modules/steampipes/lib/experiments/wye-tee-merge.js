// Generated by CoffeeScript 2.5.1
(function() {
  'use strict';
  var CND, badge, debug, defer, jr, rpr;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'STEAMPIPES/WYE-TEE-MERGE';

  // log                       = CND.get_logger 'plain',     badge
  // info                      = CND.get_logger 'info',      badge
  // whisper                   = CND.get_logger 'whisper',   badge
  // alert                     = CND.get_logger 'alert',     badge
  debug = CND.get_logger('debug', badge);

  // warn                      = CND.get_logger 'warn',      badge
  // help                      = CND.get_logger 'help',      badge
  // urge                      = CND.get_logger 'urge',      badge
  // echo                      = CND.echo.bind CND
  ({jr} = CND);

  // mux                       = require 'pull-mux' ### https://github.com/nichoth/pull-mux ###
  defer = setImmediate;

  //-----------------------------------------------------------------------------------------------------------
  this.$tee = function(a, b) {
    var arity;
    switch ((arity = arguments.length)) {
      case 1:
        return this._$tee_without_filter(a);
      case 2:
        return this._$tee_with_filter(a, b);
    }
    throw new Error(`Âµ93002 expected 1 or 2 arguments, got ${arity}`);
  };

  //-----------------------------------------------------------------------------------------------------------
  this._$tee_without_filter = function(bystream) {
    /* Given a `bystream`, send a data down both the mainstream and the bystream. This allows e.g. to log all
     events to a file sink while continuing to process the same data in the mainline. **NB** that in
     contradistinction to `pull-tee`, you can only divert to a single by-stream with each call to `PS.$tee` */
    return (require('pull-tee'))(bystream);
  };

  //-----------------------------------------------------------------------------------------------------------
  this._$tee_with_filter = function(filter, bystream) {
    /* Given a `filter` function and a `bystream`, send only data `d` for which `filter d` returns true down
     the bystream. No data will be taken out of the mainstream. */
    return this._$tee_without_filter(this.pull(this.$filter(filter), bystream));
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$bifurcate = function(filter, bystream) {
    /* Given a `filter` function and a `bystream`, send all data `d` either down the bystream if `filter d`
     returns true, or down the mainstream otherwise, causing a disjunct bifurcation of the data stream. */
    var byline, pipeline;
    byline = [];
    pipeline = [];
    byline.push(this.$(function(d, send) {
      if (d[0]) {
        return send(d[1]);
      }
    }));
    byline.push(bystream);
    pipeline.push(this.$(function(d, send) {
      return send([filter(d), d]);
    }));
    pipeline.push(this._$tee_without_filter(this.pull(...byline)));
    pipeline.push(this.$(function(d, send) {
      if (!d[0]) {
        return send(d[1]);
      }
    }));
    return this.pull(...pipeline);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.new_merged_source = function(...sources) {
    var $_demux, $_mux, pipeline;
    //.........................................................................................................
    $_mux = (...sources) => {
      var R, i, idx, len, source;
      R = {};
      for (idx = i = 0, len = sources.length; i < len; idx = ++i) {
        source = sources[idx];
        R[idx] = source;
      }
      return mux(R);
    };
    //.........................................................................................................
    $_demux = () => {
      return this.$map(function([k, v]) {
        return v;
      });
    };
    //.........................................................................................................
    pipeline = [];
    pipeline.push($_mux(...sources));
    pipeline.push($_demux());
    return this.pull(...pipeline);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$wye = function(stream, settings) {
    var client, new_duplex_pair, server, serverline;
    new_duplex_pair = require('pull-pair/duplex');
    settings = {
      defer: false,
      ...settings
    };
    [client, server] = new_duplex_pair();
    serverline = [];
    serverline.push(this.new_merged_source(server, stream));
    if (settings.defer) {
      serverline.push(this.$defer());
    }
    serverline.push(server);
    this.pull(...serverline);
    return client;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.leapfrog = function(test, transform) {
    var bysource, last, pipeline;
    /* Given a `test` function (which accepts a single argument) and a `transform`, make it so that whenever
     `test d` returns `true`, data `d` will be taken out of the stream and 'jump over' the transform, as it
     were. Downstream transforms will still receive all data items, including the leapfrogging ones, but the
     stream as it is visible to the `transform` will be thinned out. */
    //.........................................................................................................
    last = Symbol('last');
    bysource = this.new_push_source();
    pipeline = [];
    pipeline.push(this.$defer());
    pipeline.push(this.$({last}, function(d, send) {
      if (d === last) {
        bysource.end();
      } else if (test(d)) {
        bysource.send(d);
      } else {
        send(d);
      }
      return null;
    }));
    pipeline.push(transform);
    pipeline.push(this.$wye(bysource));
    //.........................................................................................................
    return this.pull(...pipeline);
  };

}).call(this);

//# sourceMappingURL=wye-tee-merge.js.map
