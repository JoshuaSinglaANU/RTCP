{
  "version": 3,
  "file": "multiple-sources.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/multiple-sources.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'STEAMPIPES/TESTS/WYE2'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nOS                        = require 'os'\ntest                      = require 'guy-test'\n#...........................................................................................................\nSP                        = require '../..'\n{ $\n  $async\n  $drain\n  $watch\n  $show  }                = SP.export()\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"mutiple sources\" ] = ( T, done ) ->\n  [ probe, matcher, error, ] = [[\"abcdef\",\"1234\"],\"A1B2C3D4EF\",null]\n  await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n    [ source_1\n      source_2 ]  = probe\n    pipeline      = []\n    pipeline.push source_1\n    pipeline.push source_2\n    pipeline.push $ ( d, send ) -> send d.toUpperCase()\n    pipeline.push $show { title: 'µ53211', }\n    pipeline.push $drain ( Σ ) -> resolve Σ.join ''\n    SP.pull pipeline...\n    return null\n  #.........................................................................................................\n  done()\n  return null\n\n\n\n\n############################################################################################################\nunless module.parent?\n  # test @, 'timeout': 30000\n  test @[ \"mutiple sources\" ]\n\n\n\n\n\n\n\n"
  ]
}