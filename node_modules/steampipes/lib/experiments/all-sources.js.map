{
  "version": 3,
  "file": "all-sources.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/all-sources.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'STEAMPIPES/TESTS/ALL-SOURCES'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nOS                        = require 'os'\ntest                      = require 'guy-test'\n{ jr, }                   = CND\n#...........................................................................................................\n{ isa\n  validate\n  defaults\n  types_of\n  type_of }               = require '../types'\n#...........................................................................................................\nSP                        = require '../..'\n{ $\n  $async\n  $drain\n  $watch\n  $show  }                = SP.export()\n#...........................................................................................................\nrpad                      = ( x, P... ) -> x.padEnd   P...\nlpad                      = ( x, P... ) -> x.padStart P...\nsleep                     = ( dts ) -> new Promise ( done ) => setTimeout done, dts * 1000\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@_get_custom_iterable_1 = ->\n  ### ths to https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols ###\n  myIterable =\n    [Symbol.iterator]: ->\n        yield \"𫠠\"\n        yield \"𫠡\"\n        yield \"𫠢\"\n  return [ 'mdn_custom_iterable', myIterable, [\"𫠠\",\"𫠡\",\"𫠢\",], null, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_custom_iterable_2 = ->\n  myIterable_2 =\n    [Symbol.iterator]: -> yield from [\"𫠠\",\"𫠡\",\"𫠢\",]\n  return [ 'object_with_list_as_iterator', myIterable_2, [\"𫠠\",\"𫠡\",\"𫠢\",], null, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_standard_iterables = ->\n  return [\n    [ 'text',       \"𫠠𫠡𫠢\",[\"𫠠\",\"𫠡\",\"𫠢\",],null]\n    [ 'list',       [\"𫠠\",\"𫠡\",\"𫠢\",],[\"𫠠\",\"𫠡\",\"𫠢\",],null]\n    [ 'set',        ( new Set \"𫠠𫠡𫠢\" ),[\"𫠠\",\"𫠡\",\"𫠢\",],null]\n    [ 'map',        ( new Map [[ \"𫠠\", \"𫠡𫠢\" ]] ),[[ \"𫠠\", \"𫠡𫠢\" ]],null]\n    [ 'generator',  ( -> yield '𫠠'; yield '𫠡'; yield '𫠢')(), [\"𫠠\",\"𫠡\",\"𫠢\",],null]\n    ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_generatorfunction = ->\n  return [ 'generatorfunction', ( -> yield '𫠠'; yield '𫠡'; yield '𫠢' ), [\"𫠠\",\"𫠡\",\"𫠢\",],null]\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_asyncgenerator = ->\n  return [ 'asyncgenerator', ( -> await 42; yield '𫠠'; yield '𫠡'; yield '𫠢' )(), [\"𫠠\",\"𫠡\",\"𫠢\",],null]\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_asyncgeneratorfunction = ->\n  return [ 'asyncgeneratorfunction', ( -> await 42; yield '𫠠'; yield '𫠡'; yield '𫠢' ), [\"𫠠\",\"𫠡\",\"𫠢\",],null]\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_function_1      = -> [ 'function_1',      ( ->           [\"𫠠\",\"𫠡\",\"𫠢\",] ),                                   [\"𫠠\",\"𫠡\",\"𫠢\",], null, ]\n@_get_asyncfunction_1 = -> [ 'asyncfunction_1', ( -> await 42; [\"𫠠\",\"𫠡\",\"𫠢\",] ),                                   [\"𫠠\",\"𫠡\",\"𫠢\",], null, ]\n@_get_function_2      = -> [ 'function_2',      ( ->           ( ->           yield '𫠠'; yield '𫠡'; yield '𫠢' ) ), [\"𫠠\",\"𫠡\",\"𫠢\",], null, ]\n@_get_asyncfunction_2 = -> [ 'asyncfunction_2', ( -> await 42; ( ->           yield '𫠠'; yield '𫠡'; yield '𫠢' ) ), [\"𫠠\",\"𫠡\",\"𫠢\",], null, ]\n@_get_function_3      = -> [ 'function_3',      ( ->           ( -> await 42; yield '𫠠'; yield '𫠡'; yield '𫠢' ) ), [\"𫠠\",\"𫠡\",\"𫠢\",], null, ]\n@_get_asyncfunction_3 = -> [ 'asyncfunction_3', ( -> await 42; ( -> await 42; yield '𫠠'; yield '𫠡'; yield '𫠢' ) ), [\"𫠠\",\"𫠡\",\"𫠢\",], null, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_all_probes_and_matchers = ->\n  return [\n    @_get_standard_iterables()...\n    @_get_custom_iterable_2()\n    @_get_generatorfunction()\n    @_get_asyncgenerator()\n    @_get_asyncgeneratorfunction()\n    @_get_custom_iterable_1()\n    @_get_function_1()\n    @_get_asyncfunction_1()\n    @_get_function_2()\n    @_get_asyncfunction_2()\n    @_get_function_3()\n    @_get_asyncfunction_3()\n    ]\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@[ \"tabulate distinctive features\" ] = ( T, done ) ->\n  await do =>\n    probes_and_matchers = @_get_all_probes_and_matchers()\n    for [ name, probe, ] in probes_and_matchers\n      #.....................................................................................................\n      ### STEP 1 ###\n      mode                  = 'sync'\n      probe_type            = type_of probe\n      #.....................................................................................................\n      if probe_type in [ 'generatorfunction', 'asyncgeneratorfunction', ]\n        probe                 = probe()\n        probe_type            = type_of probe\n      #.....................................................................................................\n      ### STEP 2 ###\n      iterator              = probe[ Symbol.iterator ]\n      iterator_type         = type_of iterator\n      iterator_return_type  = './.'\n      #.....................................................................................................\n      if iterator_type is 'function'\n        ### TAINT should not call iterator before ready; here done for illustration ###\n        iterator_return_type = type_of iterator.apply probe\n      #.....................................................................................................\n      ### STEP 3 ###\n      async_iterator        = undefined\n      async_iterator_type   = 'undefined'\n      unless iterator?\n        async_iterator            = probe[ Symbol.asyncIterator ]\n        async_iterator_type       = type_of async_iterator\n        mode                      = 'async'\n      #.....................................................................................................\n      iterator_type             = './.' if iterator_type is 'undefined'\n      async_iterator_type       = './.' if async_iterator_type is 'undefined'\n      #.....................................................................................................\n      ### STEP 4 ###\n      switch mode\n        when 'sync'   then  result = ( d for        d from       iterator.apply probe )\n        when 'async'  then  result = ( d for await  d from async_iterator.apply probe )\n      #.....................................................................................................\n      name_txt                  = CND.blue  rpad  name,                   30\n      probe_type_txt            = CND.gold  rpad  probe_type,             23\n      mode_txt                  = CND.steel lpad  mode,                    5\n      iterator_type_txt         = CND.gold  rpad  iterator_type,          20\n      iterator_return_type_txt  = CND.lime  rpad  iterator_return_type,   20\n      async_iterator_type_txt   = CND.gold  rpad  async_iterator_type,    20\n      result_txt                = CND.green rpad  ( jr result )[ .. 15 ], 15\n      probe_txt                 = CND.grey  ( ( rpr probe ).replace /\\s+/g, ' ' )[ .. 40 ]\n      #.....................................................................................................\n      echo \\\n        name_txt,\n        probe_type_txt,\n        mode_txt,\n        iterator_type_txt,\n        ( CND.white '->' ),\n        iterator_return_type_txt,\n        async_iterator_type_txt,\n        result_txt\n        # probe_txt\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"iterate\" ] = ( T, done ) ->\n  probes_and_matchers = @_get_all_probes_and_matchers()\n  check_count         = 0\n  hit_count           = 0\n  #.........................................................................................................\n  for [ name, source, matcher, error, ] in probes_and_matchers\n    check_count++\n    types     = []\n    mode      = 'sync'\n    types.push type_of source\n    #.......................................................................................................\n    if ( type = type_of source ) is 'function'\n      source = source()\n      types.push type_of source\n    #.......................................................................................................\n    else if type is 'asyncfunction'\n      mode    = 'async'\n      source  = await source()\n      types.push type_of source\n    #.......................................................................................................\n    if ( type_of source ) in [ 'generatorfunction', 'asyncgeneratorfunction', ]\n      source = source()\n      types.push type_of source\n    #.......................................................................................................\n    error     = null\n    type      = type_of source\n    name_txt  = CND.blue rpad name, 30\n    types_txt = CND.grey rpad ( types.join ' -> ' ), 60\n    ### NOTE mode is 'async' if procuring generator or iteration is async ###\n    mode      = 'async' if type is 'asyncgenerator'\n    mode_txt  = if mode is 'sync' then ( CND.green 'sync ' ) else ( CND.red 'async' )\n    try\n      if type is 'asyncgenerator' then  result = ( d for await d from source )\n      else                              result = ( d for       d from source )\n    catch error\n      warn name_txt, ( CND.grey type ), ( CND.red error.message )\n    result_txt  = jr result\n    unless error?\n      if CND.equals result, matcher\n        hit_count++\n        result_txt = CND.green result_txt\n      else\n        result_txt = CND.red   result_txt, '≠', ( jr matcher )\n      info name_txt, mode_txt, types_txt, result_txt\n  #.........................................................................................................\n  urge \"#{hit_count} / #{check_count}\"\n  T.eq hit_count, check_count\n  #.........................................................................................................\n  done()\n\n############################################################################################################\nif module is require.main then do =>\n  # test @, { timeout: 5000, }\n  test @[ \"iterate\" ].bind @\n  # test @[ \"tabulate distinctive features\" ].bind @\n  # test @[ \"wye construction (async)\" ]\n  # test @[ \"wye construction (method)\" ]\n  # test @[ \"generatorfunction\" ]\n  # test @[ \"asyncgeneratorfunction\" ]\n\n"
  ]
}