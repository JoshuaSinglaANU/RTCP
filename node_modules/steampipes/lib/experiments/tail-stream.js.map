{
  "version": 3,
  "file": "tail-stream.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/tail-stream.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERSHOP/TAIL-STREAM'\nlog                       = CND.get_logger 'plain',     badge\ndebug                     = CND.get_logger 'debug',     badge\ninfo                      = CND.get_logger 'info',      badge\nwarn                      = CND.get_logger 'warn',      badge\nalert                     = CND.get_logger 'alert',     badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nFSP                       = ( require 'fs' ).promises\nPATH                      = require 'path'\n# is_executable             = require 'executable'\n{ mkfifoSync, }           = require 'named-pipe'\nTail                      = ( require 'tail' ).Tail\n#...........................................................................................................\nSP                        = require '../../apps/steampipes'\n{ $\n  $async\n  $watch\n  $show\n  $drain }                = SP.export()\nDATOM                     = require 'datom'\n{ new_datom\n  select }                = DATOM.export()\nsleep                     = ( dts ) -> new Promise ( done ) => setTimeout done, dts * 1000\n{ jr }                    = CND\n#...........................................................................................................\n\nprovide_fifo = ->\n\n  #-----------------------------------------------------------------------------------------------------------\n  @new_fifo = ->\n    # R             = PATH.resolve PATH.join __dirname, '/tmp/myfifo'\n    R             = '/tmp/myfifo'\n    fifo_relpath  = PATH.relative process.cwd(), R\n    # ### TAINT test whether file exists, do not overwrite (?) ###\n    # FS.writeFileSync R, ''\n    try mkfifoSync R catch error\n      throw error unless ( error.message is 'unable to create the pipe. do you have permissions?' ) \\\n        and ( FS.statSync R ).isFIFO()\n    if error? then  info \"^fifo@5541^ using existing FIFO pipe at #{fifo_relpath}\"\n    else            info \"^fifo@5542^ created FIFO pipe at #{fifo_relpath}\"\n    return R\n\n  #-----------------------------------------------------------------------------------------------------------\n  @send = ( me, d ) ->\n    # FS.appendFileSync me, 'helo'\n    await FSP.appendFile me, ( JSON.stringify d ) + '\\n'\n    return null\n\n  #-----------------------------------------------------------------------------------------------------------\n  @new_tail = ( me, handler ) ->\n    # validate.function handler\n    tail = new Tail me, { fromBeginning: true, }\n    tail.on 'line',   ( line  ) =>\n      try handler null, JSON.parse line catch error\n        throw new Error \"when trying to parse #{rpr line}, an error was thrown with #{rpr error.message}\"\n    tail.on 'error',  ( error ) => handler error\n    return tail\n\n  # #-----------------------------------------------------------------------------------------------------------\n  # @new_message_source = ( me ) ->\n  #   tail    = @new_tail me, ( error, d ) =>\n  #     throw error if error?\n  #     return R.end() if select d, '~stop'\n  #     send d\n  #   R       = SP.new_push_source()\n  #   end     = R.end.bind   R\n  #   send    = R.send.bind  R\n  #   R.send  = ( d ) => return R.end() if select d, '~stop'; send d\n  #   R.end   = => tail.unwatch(); end()\n  #   R.tail  = tail\n  #   return R\n\n  #-----------------------------------------------------------------------------------------------------------\n  @new_message_source = ( me ) ->\n    # stream  = FS.createReadStream me\n    # stream.setEncoding('utf-8')\n    # stream.on 'data', ( d ) => debug '^776^', rpr d; send d\n    NET                       = require 'net'\n    flags = FS.constants.O_RDONLY | FS.constants.O_NONBLOCK\n    FS.open me, flags, ( error, fd ) =>\n      throw error if error?\n      stream = new NET.Socket { fd, }\n      stream.setEncoding 'utf-8'\n      # Now `stream` is a stream that can be used for reading from the FIFO.\n      # stream.on 'data', ( d ) => debug '^776^', rpr d; send d\n      stream.pipe process.stdout\n      stream.on 'end', => debug '^777^'; R.end()\n      stream.on 'error', => throw error\n    R       = SP.new_push_source()\n    # end     = R.end.bind   R\n    send    = R.send.bind  R\n    R.send  = ( d ) => return R.end() if select d, '~stop'; send d\n    # R.end   = => tail.unwatch(); end()\n    # R.tail  = tail\n    return R\nprovide_fifo.apply FIFO = {}\n\n\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_2 = -> new Promise ( resolve ) =>\n  fifo      = FIFO.new_fifo()\n  pipeline  = []\n  pipeline.push FIFO.new_message_source fifo\n  pipeline.push $watch ( d ) => info '^333^', d\n  pipeline.push $drain =>\n    resolve()\n  SP.pull pipeline...\n  #.........................................................................................................\n  for nr in [ 1 .. 10 ]\n    d = new_datom '^foo', { time: Date.now(), value: \"msg##{nr}\", }\n    whisper '^22231^', jr d\n    FIFO.send fifo, d\n    await sleep 0.1\n  whisper '^22231^', jr d = new_datom '~stop'; FIFO.send fifo, d\n  debug rpr await FSP.readFile fifo, 'utf-8'\n  #.........................................................................................................\n  info 'ok'\n  return null\n\n# ############################################################################################################\n# if require.main is module then do =>\n#   # await demo_1()\n#   await demo_2()\n#   help 'ok'\n\nTAILSTREAM  = require('@uppy/fs-tail-stream');\nif false\n  fifo        = '/tmp/my-temp-file.txt';\n  FS.writeFileSync fifo, ''\nelse\n  fifo        = FIFO.new_fifo()\n\nws          = FS.createWriteStream fifo, { flags: 'a', }\n# same parameters as `FS.createReadStream`, but pass through `tail: true`\nstream      = TAILSTREAM.createReadStream fifo, { encoding: 'utf-8', tail: true, }\n\nstream.on 'sync', ->\n  # called when at the end of the file\n  debug '^44454^', \"sync\"\n  self = this\n  # write some new data to the file\n  ws.write 'helo\\n',  'utf-8', ( error ) =>\n  ws.write 'world\\n', 'utf-8', ( error ) =>\n    # stop watching for files, and let the file stream end\n    # otherwise the file watching will be indefinite and the process\n    # won't' exit\n    # self.close()\n\n  # will print out both the existing contents of the file, plus the\n  # newly added data\nstream.on 'data', ( data ) => urge jr data\nws.write 'first!\\n'\nws.write 'second\\n'\ndo =>\n  await sleep 1\n  ws.write 'third'\n  await sleep 1\n  ws.write 'forth'\n\n\n\n\n\n"
  ]
}