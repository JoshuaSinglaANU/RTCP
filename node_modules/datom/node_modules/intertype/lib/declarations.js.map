{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/declarations.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n#...........................................................................................................\n# { equals, }               = require 'cnd'\n{ assign\n  jr\n  xrpr\n  js_type_of }            = require './helpers'\nCHECKS                    = require './checks'\n### thx to\n  https://github.com/mathiasbynens/mothereff.in/blob/master/js-variables/eff.js\n  https://mathiasbynens.be/notes/javascript-identifiers-es6\n###\n# jsidentifier_pattern      = /^(?:[\\$A-Z_a-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D])(?:[\\$0-9A-Z_a-z\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF])*$/\njsidentifier_pattern = /// ^\n  (?: [ $_ ]                    | \\p{ID_Start}    )\n  (?: [ $ _ \\u{200c} \\u{200d} ] | \\p{ID_Continue} )*\n  $ ///u\n\n\n\n#===========================================================================================================\n# XML Names, IDs\n#-----------------------------------------------------------------------------------------------------------\n###\n\n* https://www.w3.org/TR/xml/#NT-Name\n* Observe that in HTML5 (but not earlier versions), most restrictions on ID values have been removed; to\n  quote: \"There are no other restrictions on what form an ID can take; in particular, IDs can consist of\n  just digits, start with a digit, start with an underscore, consist of just punctuation, etc.\"\n\n[4]     NameStartChar    ::=    \":\" | [A-Z] | \"_\" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]\n[4a]    NameChar     ::=    NameStartChar | \"-\" | \".\" | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]\n[5]     Name     ::=    NameStartChar (NameChar)*\n\n\n###\n\n\n#===========================================================================================================\n# OTF Glyph Names\n#-----------------------------------------------------------------------------------------------------------\n###\n\nFrom https://adobe-type-tools.github.io/afdko/OpenTypeFeatureFileSpecification.html#2.f.i\n\n> A glyph name may be up to 63 characters in length, must be entirely comprised of characters from the\n> following set:\n>\n> ```\n> ABCDEFGHIJKLMNOPQRSTUVWXYZ\n> abcdefghijklmnopqrstuvwxyz\n> 0123456789\n> .  # period\n> _  # underscore\n> ```\n>\n> and must not start with a digit or period. The only exception is the special character “.notdef”.\n>\n> “twocents”, “a1”, and “_” are valid glyph names. “2cents” and “.twocents” are “not.\n\n\n\n###\n\n\n#===========================================================================================================\n# TYPE DECLARATIONS\n#-----------------------------------------------------------------------------------------------------------\n@declare_types = ->\n  ### NOTE to be called as `( require './declarations' ).declare_types.apply instance` ###\n  @declare 'null',                ( x ) => x is null\n  @declare 'undefined',           ( x ) => x is undefined\n  #.........................................................................................................\n  @declare 'sad',                 ( x ) => CHECKS.is_sad      x\n  @declare 'happy',               ( x ) => CHECKS.is_happy    x\n  @declare 'saddened',            ( x ) => CHECKS.is_saddened x\n  @declare 'symbol',              ( x ) => typeof x is 'symbol'\n  #.........................................................................................................\n  @declare 'boolean',\n    tests:\n      \"x is true or false\":       ( x ) => ( x is true ) or ( x is false )\n    casts:\n      float:                      ( x ) => if x then 1 else 0\n  #.........................................................................................................\n  @declare 'nan',                 ( x ) => Number.isNaN         x\n  @declare 'finite',              ( x ) => Number.isFinite      x ### TAINT make sure no non-numbers slip through ###\n  @declare 'integer',             ( x ) => Number.isInteger     x ### TAINT make sure no non-numbers slip through ###\n  @declare 'safeinteger',         ( x ) => Number.isSafeInteger x ### TAINT make sure no non-numbers slip through ###\n  #.........................................................................................................\n  ### FTTB we are retaining `number` as a less-preferred synonym for `float`; in the future, `number` may\n  be removed because it conflicts with JS usage (where it includes `NaN` and `+/-Infinity`) and, moreover,\n  is not truthful (because it is a poor representation of what the modern understanding of 'number' in the\n  mathematical sense would imply). ###\n  ### NOTE removed in v8: `@specs.number = @specs.float` ###\n  @declare 'number',              ( x ) => false # throw new Error \"^intertype@84744^ type 'number' is deprecated\"\n  @declare 'float',\n    tests:                        ( x ) => Number.isFinite      x\n    casts:\n      boolean:                    ( x ) => if x is 0 then false else true\n      integer:                    ( x ) => Math.round x\n  #.........................................................................................................\n  @declare 'frozen',              ( x ) => Object.isFrozen      x\n  @declare 'sealed',              ( x ) => Object.isSealed      x\n  @declare 'extensible',          ( x ) => Object.isExtensible  x\n  #.........................................................................................................\n  @declare 'numeric',                 ( x ) => ( js_type_of x ) is 'number'\n  @declare 'function',                ( x ) => ( js_type_of x ) is 'function'\n  @declare 'asyncfunction',           ( x ) => ( js_type_of x ) is 'asyncfunction'\n  @declare 'generatorfunction',       ( x ) => ( js_type_of x ) is 'generatorfunction'\n  @declare 'asyncgeneratorfunction',  ( x ) => ( js_type_of x ) is 'asyncgeneratorfunction'\n  @declare 'asyncgenerator',          ( x ) => ( js_type_of x ) is 'asyncgenerator'\n  @declare 'generator',               ( x ) => ( js_type_of x ) is 'generator'\n  @declare 'date',                    ( x ) => ( js_type_of x ) is 'date'\n  @declare 'listiterator',            ( x ) => ( js_type_of x ) is 'arrayiterator'\n  @declare 'textiterator',            ( x ) => ( js_type_of x ) is 'stringiterator'\n  @declare 'setiterator',             ( x ) => ( js_type_of x ) is 'setiterator'\n  @declare 'mapiterator',             ( x ) => ( js_type_of x ) is 'mapiterator'\n  @declare 'callable',                ( x ) => ( @type_of x ) in [ 'function', 'asyncfunction', 'generatorfunction', ]\n  @declare 'promise',                 ( x ) => ( @isa.nativepromise x ) or ( @isa.thenable x )\n  @declare 'nativepromise',           ( x ) => x instanceof Promise\n  @declare 'thenable',                ( x ) => ( @type_of x?.then ) is 'function'\n  @declare 'immediate',               ( x ) -> not @isa.promise x\n  #.........................................................................................................\n  @declare 'truthy',              ( x ) => not not x\n  @declare 'falsy',               ( x ) => not x\n  @declare 'true',                ( x ) => x is true\n  @declare 'false',               ( x ) => x is false\n  @declare 'unset',               ( x ) => not x?\n  @declare 'notunset',            ( x ) => x?\n  #.........................................................................................................\n  @declare 'even',                ( x ) => ( @isa.safeinteger x ) and ( x %% 2 ) is 0\n  @declare 'odd',                 ( x ) => ( @isa.safeinteger x ) and ( x %% 2 ) is 1\n  @declare 'cardinal',            ( x ) -> ( @isa.safeinteger x ) and ( @isa.nonnegative x )\n  @declare 'nonnegative',         ( x ) => ( @isa.infloat x ) and ( x >= 0 )\n  @declare 'positive',            ( x ) => ( @isa.infloat x ) and ( x > 0 )\n  @declare 'positive_float',      ( x ) => ( @isa.float x ) and ( x > 0 )\n  @declare 'positive_integer',    ( x ) => ( @isa.integer x ) and ( x > 0 )\n  @declare 'negative_integer',    ( x ) => ( @isa.integer x ) and ( x < 0 )\n  @declare 'zero',                ( x ) => x is 0\n  @declare 'infinity',            ( x ) => ( x is +Infinity ) or ( x is -Infinity )\n  @declare 'infloat',             ( x ) => ( @isa.float x ) or ( x is Infinity ) or ( x is -Infinity )\n  @declare 'nonpositive',         ( x ) => ( @isa.infloat x ) and ( x <= 0 )\n  @declare 'negative',            ( x ) => ( @isa.infloat x ) and ( x < 0 )\n  @declare 'negative_float',      ( x ) => ( @isa.float x ) and ( x < 0 )\n  @declare 'proper_fraction',     ( x ) => ( @isa.float x ) and ( 0 <= x <= 1 )\n  #.........................................................................................................\n  @declare 'empty',               ( x ) -> ( @has_size    x ) and ( @size_of x ) == 0\n  @declare 'singular',            ( x ) -> ( @has_size    x ) and ( @size_of x ) == 1\n  @declare 'nonempty',            ( x ) -> ( @has_size    x ) and ( @size_of x ) > 0\n  @declare 'plural',              ( x ) -> ( @has_size    x ) and ( @size_of x ) > 1\n  @declare 'blank_text',          ( x ) -> ( @isa.text    x ) and     ( x.match /// ^ \\s* $ ///us )?\n  @declare 'nonblank_text',       ( x ) -> ( @isa.text    x ) and not ( x.match /// ^ \\s* $ ///us )?\n  @declare 'chr',                 ( x ) -> ( @isa.text    x ) and     ( x.match /// ^  .  $ ///us )?\n  @declare 'nonempty_text',       ( x ) -> ( @isa.text    x ) and ( @isa.nonempty x )\n  @declare 'nonempty_list',       ( x ) -> ( @isa.list    x ) and ( @isa.nonempty x )\n  @declare 'nonempty_object',     ( x ) -> ( @isa.object  x ) and ( @isa.nonempty x )\n  @declare 'nonempty_set',        ( x ) -> ( @isa.set     x ) and ( @isa.nonempty x )\n  @declare 'nonempty_map',        ( x ) -> ( @isa.map     x ) and ( @isa.nonempty x )\n  @declare 'empty_text',          ( x ) -> ( @isa.text    x ) and ( @isa.empty x )\n  @declare 'empty_list',          ( x ) -> ( @isa.list    x ) and ( @isa.empty x )\n  @declare 'empty_object',        ( x ) -> ( @isa.object  x ) and ( @isa.empty x )\n  @declare 'empty_set',           ( x ) -> ( @isa.set     x ) and ( @isa.empty x )\n  @declare 'empty_map',           ( x ) -> ( @isa.map     x ) and ( @isa.empty x )\n  # is_given                  = ( x ) -> not [ null, undefined, NaN, '', ].includes x\n  #.........................................................................................................\n  @declare 'buffer',              { size: 'length', },  ( x ) => Buffer.isBuffer x\n  @declare 'arraybuffer',         { size: 'length', },  ( x ) => ( js_type_of x ) is 'arraybuffer'\n  @declare 'int8array',           { size: 'length', },  ( x ) => ( js_type_of x ) is 'int8array'\n  @declare 'uint8array',          { size: 'length', },  ( x ) => ( js_type_of x ) is 'uint8array'\n  @declare 'uint8clampedarray',   { size: 'length', },  ( x ) => ( js_type_of x ) is 'uint8clampedarray'\n  @declare 'int16array',          { size: 'length', },  ( x ) => ( js_type_of x ) is 'int16array'\n  @declare 'uint16array',         { size: 'length', },  ( x ) => ( js_type_of x ) is 'uint16array'\n  @declare 'int32array',          { size: 'length', },  ( x ) => ( js_type_of x ) is 'int32array'\n  @declare 'uint32array',         { size: 'length', },  ( x ) => ( js_type_of x ) is 'uint32array'\n  @declare 'float32array',        { size: 'length', },  ( x ) => ( js_type_of x ) is 'float32array'\n  @declare 'float64array',        { size: 'length', },  ( x ) => ( js_type_of x ) is 'float64array'\n  @declare 'list',                { size: 'length', },  ( x ) => ( js_type_of x ) is 'array'\n  @declare 'set',                 { size: 'size',   },  ( x ) -> ( js_type_of x ) is 'set'\n  @declare 'map',                 { size: 'size',   },  ( x ) -> ( js_type_of x ) is 'map'\n  @declare 'weakmap',                                   ( x ) -> ( js_type_of x ) is 'weakmap'\n  @declare 'weakset',                                   ( x ) -> ( js_type_of x ) is 'weakset'\n  @declare 'error',                                     ( x ) -> ( js_type_of x ) is 'error'\n  @declare 'regex',                                     ( x ) -> ( js_type_of x ) is 'regexp'\n  #.........................................................................................................\n  @declare 'object',\n    tests:  ( x     ) => ( js_type_of x ) is 'object'\n    size:   ( x     ) => ( Object.keys x ).length\n  #.........................................................................................................\n  @declare 'global',\n    tests:  ( x     ) => ( js_type_of x ) is 'global'\n    size:   ( x     ) => ( Object.keys x ).length\n  #.........................................................................................................\n  @declare 'text',\n    tests:  ( x ) => ( js_type_of x ) is 'string'\n    size:   ( x, selector = 'codeunits' ) ->\n      switch selector\n        when 'codepoints' then return ( Array.from x ).length\n        when 'codeunits'  then return x.length\n        when 'bytes'      then return Buffer.byteLength x, ( settings?[ 'encoding' ] ? 'utf-8' )\n        else throw new Error \"unknown counting selector #{rpr selector}\"\n\n  #.........................................................................................................\n  @declare 'list_of',\n    tests:\n      \"x is a list\":              ( type, x, xP... ) => @isa.list x\n      ### TAINT should check for `@isa.type type` ###\n      \"type is nonempty_text\":    ( type, x, xP... ) => @isa.nonempty_text type\n      \"all elements pass test\":   ( type, x, xP... ) => x.every ( xx ) => @isa type, xx, xP...\n\n  #.........................................................................................................\n  @declare 'object_of',\n    tests:\n      \"x is a object\":            ( type, x, xP... ) => @isa.object x\n      ### TAINT should check for `@isa.type type` ###\n      \"type is nonempty_text\":    ( type, x, xP... ) => @isa.nonempty_text type\n      \"all elements pass test\":   ( type, x, xP... ) =>\n        for _, xx of x\n          return false unless @isa type, xx, xP...\n        return true\n\n  #.........................................................................................................\n  @declare 'jsidentifier',\n    tests: ( x ) => ( @isa.text x ) and jsidentifier_pattern.test x\n\n  #.........................................................................................................\n  @declare 'int2text',\n    tests: ( x ) => ( @isa.text x ) and ( x.match /^[01]+$/ )?\n    casts:\n      float:  ( x ) => parseInt x, 2\n  #.........................................................................................................\n  @declare 'int10text',\n    tests: ( x ) => ( @isa.text x ) and ( x.match /^[0-9]+$/ )?\n    casts:\n      float:  ( x ) => parseInt x, 10\n  #.........................................................................................................\n  @declare 'int16text',\n    tests: ( x ) => ( @isa.text x ) and ( x.match /^[0-9a-fA-F]+$/ )?\n    casts:\n      float:    ( x ) => parseInt x, 16\n      int2text: ( x ) => ( parseInt x, 16 ).toString 2 ### TAINT could use `cast()` API ###\n\n  #.........................................................................................................\n  @declare 'int32', ( x ) -> ( @isa.integer x ) and ( -2147483648 <= x <= 2147483647 )\n\n  #.........................................................................................................\n  @declare 'vnr', ( x ) ->\n    ### A vectorial number (VNR) is a non-empty array of numbers, including infinity. ###\n    return ( ( @isa_list_of.infloat x ) and ( x.length > 0 ) )\n\n  #.........................................................................................................\n  @declare 'fs_stats', tests:\n    'x is an object':         ( x ) -> @isa.object    x\n    'x.size is a cardinal':   ( x ) -> @isa.cardinal  x.size\n    'x.atimeMs is a float':   ( x ) -> @isa.float     x.atimeMs\n    'x.atime is a date':      ( x ) -> @isa.date      x.atime\n\n\n#===========================================================================================================\n# TYPE DECLARATIONS\n#-----------------------------------------------------------------------------------------------------------\n@declare_checks = ->\n  PATH                      = require 'path'\n  FS                        = require 'fs'\n  #.........................................................................................................\n  ### NOTE: will throw error unless path exists, error is implicitly caught, represents sad path ###\n  @declare_check 'fso_exists', ( path, stats = null ) -> FS.statSync path\n    # try ( stats ? FS.statSync path ) catch error then error\n  #.........................................................................................................\n  @declare_check 'is_file', ( path, stats = null ) ->\n    return bad    if @is_sad ( bad = stats = @check.fso_exists path, stats )\n    return stats  if stats.isFile()\n    return @sadden \"not a file: #{path}\"\n  #.........................................................................................................\n  @declare_check 'is_json_file', ( path ) ->\n    return try ( JSON.parse FS.readFileSync path ) catch error then error\n  # #.........................................................................................................\n  # @declare_check 'equals', ( a, P... ) ->\n  #   for b in P\n  #     return CHECKS.sad unless equals a, b\n  #   return true\n\n\n\n\n\n  ### not supported until we figure out how to do it in strict mode: ###\n  # @declare 'arguments',                     ( x ) -> ( js_type_of x ) is 'arguments'\n\n\n# Array.isArray\n# ArrayBuffer.isView\n# Atomics.isLockFree\n# Buffer.isBuffer\n# Buffer.isEncoding\n# constructor.is\n# constructor.isExtensible\n# constructor.isFrozen\n# constructor.isSealed\n# Number.isFinite\n# Number.isInteger\n# Number.isNaN\n# Number.isSafeInteger\n# Object.is\n# Object.isExtensible\n# Object.isFrozen\n# Object.isSealed\n# Reflect.isExtensible\n# root.isFinite\n# root.isNaN\n# Symbol.isConcatSpreadable\n\n\n"
  ]
}