{
  "version": 3,
  "file": "demo-partition.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/demo-partition.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERCOURSE/EXPERIMENTS/DEMO-PARTITION'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\njr                        = JSON.stringify\nIC                        = require '../..'\n{ inspect, }              = require 'util'\nxrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\nxrpr2                     = ( x ) -> inspect x, { colors: yes, breakLength: 20, maxArrayLength: Infinity, depth: Infinity, }\n#...........................................................................................................\nPD                        = require 'pipedreams'\n{ $\n  $async\n  select }                = PD\n#...........................................................................................................\ntypes                     = require '../types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n\n# #-----------------------------------------------------------------------------------------------------------\n# get_partitioner = ->\n#   pipeline = []\n#   pipeline.push\n#   return ( text ) =>\n#     source.send\n\n\n#-----------------------------------------------------------------------------------------------------------\npartition = ( S ) ->\n  text = \"\"\"\n    -- Select a number:\n    select 42;\n    -- Select something else:\n    select x from sometable\n      order by id;\n    update sometable\n      set frob = frob + 1\n      where id = $baz;\n  \"\"\"\n  R     = []\n  part  = null\n  for line in text.split /\\n/\n    continue if ( line.match S.comments )?\n    # part ?= []\n    debug part\n    if ( line.match /^\\S/ )?\n      R.push ( part.join '\\n' ) if part?\n      part = []\n    part.push line\n  R.push ( part.join '\\n' ) if part?\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\ndemo = ->\n  source = \"\"\"\n  -- -------------------------------------------------------------------------------------------------------\n  procedure foobar( baz ):\n    -- Select a number:\n    select 42;\n    -- Select something else:\n    select x from sometable\n      order by id;\n    update sometable\n      set frob = frob + 1\n      where id = $baz;\n  \"\"\"\n  source = \"procedure x:\\n  foo bar\"\n  definitions = IC.definitions_from_text source\n  for key, entry of definitions\n    # debug 'µ44452', entry\n    # debug 'µ44452', entry.type\n    validate.ic_toplevel_entry entry\n    for kenning, signature_entry of entry\n      continue unless isa.ic_kenning kenning\n      urge 'µ44433', signature_entry\n      # validate.ic_prepartition_signature_entry signature_entry\n      validate.ic_signature_entry signature_entry\n\n############################################################################################################\nunless module.parent?\n  demo()\n  # urge partition { partition: 'indent', comments: /^--/, }\n\n"
  ]
}