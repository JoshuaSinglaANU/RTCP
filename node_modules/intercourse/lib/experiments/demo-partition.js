// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var $, $async, CND, IC, PD, badge, debug, declare, demo, echo, help, info, inspect, isa, jr, partition, rpr, select, size_of, type_of, types, urge, validate, warn, whisper, xrpr, xrpr2;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'INTERCOURSE/EXPERIMENTS/DEMO-PARTITION';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  jr = JSON.stringify;

  IC = require('../..');

  ({inspect} = require('util'));

  xrpr = function(x) {
    return inspect(x, {
      colors: true,
      breakLength: 2e308,
      maxArrayLength: 2e308,
      depth: 2e308
    });
  };

  xrpr2 = function(x) {
    return inspect(x, {
      colors: true,
      breakLength: 20,
      maxArrayLength: 2e308,
      depth: 2e308
    });
  };

  //...........................................................................................................
  PD = require('pipedreams');

  ({$, $async, select} = PD);

  //...........................................................................................................
  types = require('../types');

  ({isa, validate, declare, size_of, type_of} = types);

  // #-----------------------------------------------------------------------------------------------------------
  // get_partitioner = ->
  //   pipeline = []
  //   pipeline.push
  //   return ( text ) =>
  //     source.send

  //-----------------------------------------------------------------------------------------------------------
  partition = function(S) {
    var R, i, len, line, part, ref, text;
    text = "-- Select a number:\nselect 42;\n-- Select something else:\nselect x from sometable\n  order by id;\nupdate sometable\n  set frob = frob + 1\n  where id = $baz;";
    R = [];
    part = null;
    ref = text.split(/\n/);
    for (i = 0, len = ref.length; i < len; i++) {
      line = ref[i];
      if ((line.match(S.comments)) != null) {
        continue;
      }
      // part ?= []
      debug(part);
      if ((line.match(/^\S/)) != null) {
        if (part != null) {
          R.push(part.join('\n'));
        }
        part = [];
      }
      part.push(line);
    }
    if (part != null) {
      R.push(part.join('\n'));
    }
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  demo = function() {
    var definitions, entry, kenning, key, results, signature_entry, source;
    source = "-- -------------------------------------------------------------------------------------------------------\nprocedure foobar( baz ):\n  -- Select a number:\n  select 42;\n  -- Select something else:\n  select x from sometable\n    order by id;\n  update sometable\n    set frob = frob + 1\n    where id = $baz;";
    source = "procedure x:\n  foo bar";
    definitions = IC.definitions_from_text(source);
    results = [];
    for (key in definitions) {
      entry = definitions[key];
      // debug 'µ44452', entry
      // debug 'µ44452', entry.type
      validate.ic_toplevel_entry(entry);
      results.push((function() {
        var results1;
        results1 = [];
        for (kenning in entry) {
          signature_entry = entry[kenning];
          if (!isa.ic_kenning(kenning)) {
            continue;
          }
          urge('µ44433', signature_entry);
          // validate.ic_prepartition_signature_entry signature_entry
          results1.push(validate.ic_signature_entry(signature_entry));
        }
        return results1;
      })());
    }
    return results;
  };

  //###########################################################################################################
  if (module.parent == null) {
    demo();
  }

  // urge partition { partition: 'indent', comments: /^--/, }

}).call(this);

//# sourceMappingURL=demo-partition.js.map
