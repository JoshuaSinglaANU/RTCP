{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERCOURSE/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nSP                        = require 'steampipes'\n{ $\n  $async }                  = SP.export()\nDATOM                     = require 'datom'\n{ new_datom\n  select\n  lets      }             = DATOM.export()\n{ assign\n  jr }                    = CND\ncopy                      = ( x ) -> assign {}, x\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n\n#-----------------------------------------------------------------------------------------------------------\ncollapse_text = ( list_of_texts ) ->\n  R = list_of_texts\n  R = R.join '\\n'\n  R = R.replace /^\\s*/, ''\n  R = R.replace /\\s*$/, ''\n  R = R + '\\n' unless R.length is 0\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nhas_full_signatures = ( entry ) ->\n  for k of entry\n    return true if k.startsWith '('\n  return false\n\n#-----------------------------------------------------------------------------------------------------------\n@$as_line_datoms = ( S ) ->\n  line_nr = 0\n  return $ ( line, send ) ->\n    line_nr += +1\n    if ( line.match /^\\s*$/ )?  then  d = new_datom '^line', { value: line, $: { line_nr, }, ref: 'ald/1', is_blank: true, }\n    else                              d = new_datom '^line', { value: line, $: { line_nr, }, ref: 'ald/2', }\n    send d\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$skip_comments = ( S ) -> SP.$filter ( d ) -> not ( d.value.match S.comments )?\n\n#-----------------------------------------------------------------------------------------------------------\n@$add_headers = ( S ) ->\n  header_sig_re   = /// ^ (?<ictype> \\S+ ) \\s+ (?<icname> \\S+? )(?<signature> \\( .*? \\) ) \\s* : \\s* (?<trailer> .*? ) \\s* $ ///\n  header_plain_re = /// ^ (?<ictype> \\S+ ) \\s+ (?<icname> \\S+  )                          \\s* : \\s* (?<trailer> .*? ) \\s* $ ///\n  ignore_re       = /// ^ ignore \\s* : \\s*  $ ///\n  return $ ( d, send ) =>\n    return send d if d.is_blank\n    return send d if ( d.value.match /^\\s/ )?\n    return ( send new_datom '^ignore',     { value: ( copy m.groups ), $: d, ref: 'ah/1', } ) if ( m = d.value.match ignore_re       )?\n    return ( send new_datom '^definition', { value: ( copy m.groups ), $: d, ref: 'ah/2', } ) if ( m = d.value.match header_sig_re   )?\n    return ( send new_datom '^definition', { value: ( copy m.groups ), $: d, ref: 'ah/3', } ) if ( m = d.value.match header_plain_re )?\n    #.......................................................................................................\n    throw new Error \"µ83473 illegal line #{rpr d}\"\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$add_regions = ( S ) ->\n  within_region = false\n  prv_name      = null\n  last          = Symbol 'last'\n  #.........................................................................................................\n  return $ { last, }, ( d, send ) =>\n    #.......................................................................................................\n    if d is last\n      if prv_name?\n        send new_datom ( '>' + prv_name ), { ref: 'ar/1', }\n        prv_name = null\n      return\n    #.......................................................................................................\n    if select d, '^line'\n      return send d if within_region\n      return if d.is_blank\n      throw new Error \"µ85818 found line outside of any region: #{rpr d}\"\n    #.......................................................................................................\n    if prv_name?\n      send new_datom ( '>' + prv_name ), { ref: 'ar/2', }\n      within_region = false\n      prv_name      = null\n    #.......................................................................................................\n    unless within_region\n      ### TAINT use PipeDreams API for this ###\n      prv_name      = d.$key[ 1 .. ]\n      d             = lets d, ( d ) -> d.$key = ( '<' + prv_name ); d.ref = 'ar/3'\n      within_region = true\n      send d\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$skip_ignored = ( S ) ->\n  within_ignore = false\n  return $ ( d, send ) =>\n    if      select d, '<ignore'   then within_ignore = true\n    else if select d, '>ignore'   then within_ignore = false\n    else unless within_ignore     then send d\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$reorder_trailers = ( S ) ->\n  within_definition = false\n  is_oneliner       = false\n  return $ ( d, send ) =>\n    #.......................................................................................................\n    if select d, '<definition'\n      within_definition = true\n      trailer           = d.value.trailer\n      d                 = lets d, ( d ) -> delete d.value.trailer\n      if trailer? and ( trailer.length > 0 )\n        is_oneliner = true\n        send d\n        send new_datom '^line', { value: ( '  ' + trailer.trim() ), $: d, ref: 'rt/1', }\n      else\n        send d\n    #.......................................................................................................\n    else if select d, '>definition'\n      is_oneliner       = false\n      within_definition = false\n      send d\n    #.......................................................................................................\n    else if within_definition and is_oneliner and ( not select d, '>definition' ) and not d.is_blank\n      throw new Error \"µ87872 illegal follow-up after one-liner: #{rpr d}\"\n    #.......................................................................................................\n    else\n      send d\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@get_signature_and_kenning = ( signature = null ) ->\n  return [ null, 'null', ] unless signature?\n  signature = Object.keys signature unless isa.list signature\n  signature = signature[ .. ].sort()\n  kenning   = '(' + ( signature.join ',' ) + ')'\n  return [ signature, kenning, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@$compile_definitions = ( S ) ->\n  this_definition   = null\n  this_indentation  = null\n  #.........................................................................................................\n  return $ ( d, send ) =>\n    #.......................................................................................................\n    if select d, '<definition'\n      name                = d.value.icname\n      type                = d.value.ictype\n      location            = d.$\n      signature           = null\n      this_definition     = { name, type, text: [], location, kenning: 'null', }\n      if d.value.signature?\n        signature = []\n        for argument in ( d.value.signature.replace /[()]/g, '' ).split ','\n          signature.push argument if ( argument = argument.trim() )? and argument.length > 0\n        [ signature\n          kenning ]               = @get_signature_and_kenning signature\n        this_definition.signature = signature\n        this_definition.kenning   = kenning\n    #.......................................................................................................\n    else if select d, '>definition'\n      this_definition.text  = collapse_text this_definition.text\n      send new_datom '^definition', { value: this_definition, $: this_definition.location, ref: 'cd/1', }\n      this_definition       = null\n      this_indentation      = null\n    #.......................................................................................................\n    else if select d, '^line'\n      return this_definition.text.push '' if d.is_blank\n      text = d.value\n      #.....................................................................................................\n      unless this_indentation?\n        unless ( match = text.match /^\\s+/ )?\n          throw new Error \"µ88163 unexpected indentation: #{rpr d}\"\n        this_indentation = match[ 0 ]\n      #.....................................................................................................\n      else\n        unless text.startsWith this_indentation\n          throw new Error \"µ90508 unexpected indentation: #{rpr d}\"\n      #.....................................................................................................\n      text = text[ this_indentation.length .. ]\n      this_definition.text.push text\n    #.......................................................................................................\n    else\n      throw new Error \"µ92853 unexpected datom: #{rpr d}\"\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$collect = ( S, collector ) ->\n  return $ ( d, send ) =>\n    unless select d, '^definition'\n      throw new Error \"µ23982 expected a '^definition', got #{rpr d}\"\n    #.......................................................................................................\n    lnr                 = d.$.line_nr\n    definition          = d.value\n    { type\n      parts\n      location\n      kenning\n      signature }       = definition\n    entry               = ( collector[ definition.name ] ?= { type, } )\n    #.......................................................................................................\n    unless d.value.type is entry.type\n      throw new Error \"\"\"µ94432\n        #{rpr definition.name} is of type #{rpr entry.type}, unable to change to #{rpr definition.type}\n        (line ##{lnr})\"\"\"\n    #.......................................................................................................\n    if entry[ kenning ]?\n      throw new Error \"\"\"µ23983\n        name #{definition.name} with kenning #{rpr kenning} already defined:\n        #{rpr definition}\n        (line ##{lnr})\"\"\"\n    #.......................................................................................................\n    ### TAINT must re-implement ###\n    if ( kenning is 'null' ) and ( has_full_signatures entry )\n      debug 'µ23983', entry\n      throw new Error \"\"\"µ23983\n        can't overload explicit-signature definition with a null-signature definition:\n        #{rpr definition}\n        (line ##{lnr})\"\"\"\n    #.......................................................................................................\n    entry[ kenning ]            = { parts, location, kenning, type, }\n    entry[ kenning ].signature  = signature if signature?\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$validate_definition = ( S, collector ) ->\n  return $ ( d, send ) =>\n    validate.datom d\n    validate.true d.$key is '^definition'\n    validate.ic_signature_entry d.value\n    send d\n\n#-----------------------------------------------------------------------------------------------------------\npartition = ( S, text ) ->\n  R     = []\n  part  = null\n  #.........................................................................................................\n  flush = ->\n    return null if ( not part? ) or ( part.length is 0 )\n    R.push ( part.join '\\n' ).replace /\\s+$/, ''\n    part = null\n    return null\n  #.........................................................................................................\n  for line in text.split /\\n/\n    continue if ( line.match S.comments )?\n    if ( line.match /^\\S/ )?\n      flush()\n    part ?= []\n    part.push line\n  flush()\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@$partition = ( S, collector ) ->\n  return $ ( d, send ) =>\n    # if S.partition is 'indent'\n    send lets d, ( d ) ->\n      definition        = d.value\n      text              = definition.text\n      if S.partition is 'indent'\n        definition.parts  = partition S, text\n      else\n        definition.parts  = [ text, ]\n      delete definition.text\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@definitions_from_path = ( path, settings ) -> new Promise ( resolve, reject ) =>\n  @_read_definitions ( SP.read_from_file path ), settings, ( error, R ) =>\n    return reject error if error?\n    resolve R\n\n#-----------------------------------------------------------------------------------------------------------\n@definitions_from_path_sync = ( path, settings ) ->\n  return @definitions_from_text ( ( require 'fs' ).readFileSync path ), settings\n\n#-----------------------------------------------------------------------------------------------------------\n@definitions_from_text = ( text, settings ) ->\n  buffer = Buffer.from text, { encoding: 'utf-8', }\n  return @_read_definitions ( SP.new_value_source [ buffer, ] ), settings\n\n#-----------------------------------------------------------------------------------------------------------\n@_read_definitions = ( source, settings, handler = null ) ->\n  ### TAINT find a way to ensure pipeline after source is indeed synchronous ###\n  R         = {}\n  S         = assign { partition: 'indent', comments: /^--/, }\n  pipeline  = []\n  validate.ic_settings S\n  pipeline.push source\n  pipeline.push SP.$split()\n  pipeline.push @$as_line_datoms        S\n  pipeline.push @$skip_comments         S\n  pipeline.push @$add_headers           S\n  pipeline.push @$add_regions           S\n  pipeline.push @$skip_ignored          S\n  pipeline.push @$reorder_trailers      S\n  # pipeline.push SP.$show()\n  pipeline.push @$compile_definitions   S\n  pipeline.push @$partition             S\n  pipeline.push @$validate_definition   S\n  pipeline.push @$collect               S, R\n  pipeline.push SP.$drain -> if handler? then handler null, R\n  SP.pull pipeline...\n  return if handler? then null else R\n\n\n\n\n\n"
  ]
}