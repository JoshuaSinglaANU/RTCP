{"version":3,"sources":["tests.coffee"],"names":[],"mappings":"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","file":"tests.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n############################################################################################################\nnjs_path                  = require 'path'\n# njs_fs                    = require 'fs'\njoin                      = njs_path.join\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'LTSORT/tests'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\nLTSORT                    = require './main'\n\n\n#===========================================================================================================\n# DATA\n#-----------------------------------------------------------------------------------------------------------\n@_probes =\n  'extended': [\n    [ 'A', 'X', ]\n    [ 'B', 'X', ]\n    'F'\n    [ 'X', 'Y', ]\n    [ 'X', 'Z', ]\n    [ 'δ', 'B', ]\n    [ 'Z', 'Ψ', ]\n    # [ 'Ψ', 'Ω', ]\n    [ 'Z', 'Ω', ]\n    [ 'β', 'A', ]\n    [ 'α', 'β', ]\n    ]\n  #.........................................................................................................\n  'small': [\n    [ 'A', 'X', ]\n    [ 'B', 'X', ]\n    'F'\n    [ 'X', 'Y', ]\n    [ 'X', 'Z', ]\n    ]\n\n#===========================================================================================================\n# TESTS\n#-----------------------------------------------------------------------------------------------------------\n@[ \"sorting\" ] = ( T ) ->\n  elements  = @_probes[ 'extended' ]\n  graph     = LTSORT.populate LTSORT.new_graph(), elements\n  probe     = LTSORT.linearize graph\n  #.........................................................................................................\n  for element in elements\n    continue if CND.isa_text element\n    [ a, b, ] = element\n    T.ok ( a_idx = probe.indexOf a ) >= 0\n    T.ok ( b_idx = probe.indexOf b ) >= 0\n    T.ok a_idx < b_idx\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"existence\" ] = ( T ) ->\n  elements  = @_probes[ 'extended' ]\n  graph     = LTSORT.populate LTSORT.new_graph(), elements\n  #.........................................................................................................\n  for element in elements\n    if CND.isa_text element\n      T.ok LTSORT.has_node graph, element\n    else\n      [ a, b, ] = element\n      T.ok LTSORT.has_node graph, a\n      T.ok LTSORT.has_node graph, b\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"deletion\" ] = ( T ) ->\n  elements  = @_probes[ 'small' ]\n  graph     = LTSORT.populate LTSORT.new_graph(), elements\n  #.........................................................................................................\n  T.ok LTSORT.has_node graph, 'A'\n  LTSORT.delete graph, 'A'\n  T.ok not LTSORT.has_node graph, 'A'\n  #.........................................................................................................\n  T.throws \"unknown node 'XXX'\", ( => LTSORT.delete graph, 'XXX' )\n  T.throws \"unable to remove non-root node 'X'\", ( => LTSORT.delete graph, 'X' )\n  #.........................................................................................................\n  T.ok LTSORT.has_node graph, 'B'\n  LTSORT.delete graph, 'B'\n  T.ok not LTSORT.has_node graph, 'B'\n  #.........................................................................................................\n  T.ok LTSORT.has_node graph, 'X'\n  LTSORT.delete graph, 'X'\n  T.ok not LTSORT.has_node graph, 'X'\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"root nodes, lone nodes (1)\" ] = ( T ) ->\n  #.........................................................................................................\n  elements  = @_probes[ 'small' ]\n  graph     = LTSORT.populate LTSORT.new_graph(), elements\n  #.........................................................................................................\n  for element in elements\n    if CND.isa_text element\n      LTSORT.add graph, element\n    else\n      [ a, b, ] = element\n      LTSORT.add graph, a, '>', b\n  #.........................................................................................................\n  T.eq ( LTSORT.find_root_nodes graph ),        [ 'A', 'B', 'F' ]\n  T.eq ( LTSORT.find_root_nodes graph, true ),  [ 'A', 'B', 'F' ]\n  T.eq ( LTSORT.find_root_nodes graph, false ), [ 'A', 'B' ]\n  T.eq ( LTSORT.find_lone_nodes graph ),        [ 'F' ]\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"root nodes, lone nodes (2)\" ] = ( T ) ->\n  elements  = @_probes[ 'small' ]\n  graph     = LTSORT.populate ( LTSORT.new_graph loners: no ), elements\n  #.........................................................................................................\n  T.eq ( LTSORT.find_root_nodes graph ),        [ 'A', 'B', ]\n  T.eq ( LTSORT.find_root_nodes graph, true ),  [ 'A', 'B', 'F' ]\n  T.eq ( LTSORT.find_root_nodes graph, false ), [ 'A', 'B' ]\n  T.eq ( LTSORT.find_lone_nodes graph ),        [ 'F' ]\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"copy (1)\" ] = ( T ) ->\n  elements  = @_probes[ 'small' ]\n  graph_0   = LTSORT.populate ( LTSORT.new_graph loners: no ), elements\n  graph_1   = LTSORT.new_graph graph_0\n  #.........................................................................................................\n  T.eq graph_0[ 'loners' ], graph_1[ 'loners' ]\n  T.ok graph_0 isnt graph_1\n  T.ok LTSORT.has_nodes graph_0\n  T.ok LTSORT.has_nodes graph_1\n  for [ name_0, precedents_0, ] in Array.from graph_0[ 'precedents' ].entries()\n    precedents_1 = graph_1[ 'precedents' ].get name_0\n    T.ok precedents_0 isnt precedents_1\n    T.eq precedents_0, precedents_1\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"copy (2)\" ] = ( T ) ->\n  elements  = @_probes[ 'small' ]\n  graph_0   = LTSORT.populate ( LTSORT.new_graph loners: yes ), elements\n  graph_1   = LTSORT.new_graph graph_0\n  #.........................................................................................................\n  T.eq graph_0[ 'loners' ], graph_1[ 'loners' ]\n  T.ok graph_0 isnt graph_1\n  T.ok LTSORT.has_nodes graph_0\n  T.ok LTSORT.has_nodes graph_1\n  for [ name_0, precedents_0, ] in Array.from graph_0[ 'precedents' ].entries()\n    precedents_1 = graph_1[ 'precedents' ].get name_0\n    T.ok precedents_0 isnt precedents_1\n    T.eq precedents_0, precedents_1\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"group (1)\" ] = ( T ) ->\n  elements  = @_probes[ 'small' ]\n  graph     = LTSORT.populate ( LTSORT.new_graph loners: no ), elements\n  #.........................................................................................................\n  T.eq ( LTSORT.group graph ), [ [ 'A', 'B', 'F' ], [ 'X' ], [ 'Y', 'Z' ] ]\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"group (2)\" ] = ( T ) ->\n  elements  = @_probes[ 'small' ]\n  graph     = LTSORT.populate ( LTSORT.new_graph loners: yes ), elements\n  #.........................................................................................................\n  T.eq ( LTSORT.group graph ), [ [ 'F' ], [ 'A', 'B' ], [ 'X' ], [ 'Y', 'Z' ] ]\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"group (3)\" ] = ( T ) ->\n  elements  = @_probes[ 'small' ]\n  graph     = LTSORT.populate ( LTSORT.new_graph loners: no ), elements\n  #.........................................................................................................\n  LTSORT.delete graph, 'F'\n  T.eq ( LTSORT.group graph ), [ [ 'A', 'B', ], [ 'X' ], [ 'Y', 'Z' ] ]\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"group (4)\" ] = ( T ) ->\n  elements  = @_probes[ 'small' ]\n  graph     = LTSORT.populate ( LTSORT.new_graph loners: yes ), elements\n  LTSORT.delete graph, 'F'\n  #.........................................................................................................\n  T.eq ( LTSORT.group graph ), [ [], [ 'A', 'B' ], [ 'X' ], [ 'Y', 'Z' ] ]\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"test for lone node\" ] = ( T ) ->\n  elements  = @_probes[ 'small' ]\n  graph     = LTSORT.populate ( LTSORT.new_graph loners: yes ), elements\n  #.........................................................................................................\n  T.eq ( LTSORT.is_lone_node graph, 'F' ), true\n  T.eq ( LTSORT.is_lone_node graph, 'A' ), false\n  T.throws \"unknown node 'XXX'\", ( => LTSORT.is_lone_node graph, 'XXX' )\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"demo (1)\" ] = ( T ) ->\n  graph     = LTSORT.new_graph()\n  elements  = [\n    [ 'A', 'X', ]\n    [ 'B', 'X', ]\n    'F'\n    [ 'X', 'Y', ]\n    [ 'X', 'Z', ]\n    [ 'δ', 'B', ]\n    [ 'Z', 'Ψ', ]\n    [ 'Ψ', 'Ω', ]\n    [ 'Z', 'Ω', ]\n    [ 'β', 'A', ]\n    [ 'α', 'β', ]\n    ]\n  LTSORT.populate graph, elements\n  tasks = LTSORT.linearize graph\n  # debug '0809', tasks\n  T.eq tasks, [ 'α', 'β', 'A', 'δ', 'B', 'X', 'F', 'Y', 'Z', 'Ψ', 'Ω' ]\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"demo (2)\" ] = ( T ) ->\n  graph     = LTSORT.new_graph()\n  elements  = [\n    [ 'A', 'X', ]\n    [ 'B', 'X', ]\n    'F'\n    [ 'X', 'Y', ]\n    [ 'X', 'Z', ]\n    [ 'δ', 'B', ]\n    [ 'Z', 'Ψ', ]\n    [ 'Ψ', 'Ω', ]\n    [ 'Z', 'Ω', ]\n    [ 'β', 'A', ]\n    [ 'α', 'β', ]\n    ]\n  LTSORT.populate graph, elements\n  tasks = LTSORT.group graph\n  # debug '0809', tasks\n  T.eq tasks,  [ [ 'F' ],\n    [ 'δ', 'α' ],\n    [ 'B', 'β' ],\n    [ 'A' ],\n    [ 'X' ],\n    [ 'Y', 'Z' ],\n    [ 'Ψ' ],\n    [ 'Ω' ] ]\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"demo (3)\" ] = ( T ) ->\n  graph     = LTSORT.new_graph loners: no\n  elements  = [\n    [ 'A', 'X', ]\n    [ 'B', 'X', ]\n    'F'\n    [ 'X', 'Y', ]\n    [ 'X', 'Z', ]\n    [ 'δ', 'B', ]\n    [ 'Z', 'Ψ', ]\n    [ 'Ψ', 'Ω', ]\n    [ 'Z', 'Ω', ]\n    [ 'β', 'A', ]\n    [ 'α', 'β', ]\n    ]\n  LTSORT.populate graph, elements\n  tasks = LTSORT.group graph\n  # debug '0809', tasks\n  T.eq tasks,  [\n    [ 'F', 'δ', 'α' ],\n    [ 'B', 'β' ],\n    [ 'A' ],\n    [ 'X' ],\n    [ 'Y', 'Z' ],\n    [ 'Ψ' ],\n    [ 'Ω' ] ]\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"demo (4)\" ] = ( T ) ->\n  graph     = LTSORT.new_graph loners: no\n  #.........................................................................................................\n  LTSORT.add graph, 'buy books',         'do some reading'\n  LTSORT.add graph, 'buy books',         'go home'\n  LTSORT.add graph, 'buy food',          'cook'\n  LTSORT.add graph, 'buy food',          'go home'\n  LTSORT.add graph, 'buy food',          'have a coffee'\n  LTSORT.add graph, 'cook',              'eat'\n  LTSORT.add graph, 'do some reading',   'go to exam'\n  LTSORT.add graph, 'eat',               'do some reading'\n  LTSORT.add graph, 'eat',               'go to exam'\n  LTSORT.add graph, 'fetch money',       'buy books'\n  LTSORT.add graph, 'fetch money',       'buy food'\n  LTSORT.add graph, 'go home',           'cook'\n  LTSORT.add graph, 'go to bank',        'fetch money'\n  LTSORT.add graph, 'have a coffee',     'go home'\n  #.........................................................................................................\n  tasks = LTSORT.group graph\n  # debug '0809', tasks\n  T.eq tasks, [ [ 'go to bank' ],\n    [ 'fetch money' ],\n    [ 'buy books', 'buy food' ],\n    [ 'have a coffee' ],\n    [ 'go home' ],\n    [ 'cook' ],\n    [ 'eat' ],\n    [ 'do some reading' ],\n    [ 'go to exam' ] ]\n  #.........................................................................................................\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"using precedents, actions, and consequents\" ] = ( T ) ->\n  graph     = LTSORT.new_graph loners: no\n  #.........................................................................................................\n  LTSORT.add graph, 'is-no-books',            'do-buy-books'\n  LTSORT.add graph, 'do-buy-books',           'is-have-books'\n  LTSORT.add graph, 'is-have-books',          'do-some-reading'\n  LTSORT.add graph, 'is-have-no-knowledge',   'do-some-reading'\n  LTSORT.add graph, 'do-some-reading',        'is-have-knowledge'\n  LTSORT.add graph, 'is-have-knowledge',      'do-go-exam'\n  LTSORT.add graph, 'is-have-books',          'do-go-home'\n  LTSORT.add graph, 'is-hungry',              'do-eat'\n  LTSORT.add graph, 'do-eat',                 'is-not-hungry'\n  LTSORT.add graph, 'do-cook',                'do-eat'\n  LTSORT.add graph, 'do-have-food',           'do-eat'\n  LTSORT.add graph, 'do-eat',                 'is-have-no-food-again'\n  LTSORT.add graph, 'is-have-no-food',        'do-buy-food'\n  LTSORT.add graph, 'do-buy-food',            'is-have-food'\n  # LTSORT.add graph, 'do-go-exam',             'is-not-at-home'\n  # LTSORT.add graph, 'buy food',          'cook'\n  # LTSORT.add graph, 'buy food',          'go home'\n  # LTSORT.add graph, 'buy food',          'have a coffee'\n  # LTSORT.add graph, 'cook',              'eat'\n  # LTSORT.add graph, 'do some reading',   'go to exam'\n  # LTSORT.add graph, 'eat',               'do some reading'\n  # LTSORT.add graph, 'eat',               'go to exam'\n  # LTSORT.add graph, 'fetch money',       'buy books'\n  # LTSORT.add graph, 'fetch money',       'buy food'\n  # LTSORT.add graph, 'go home',           'cook'\n  # LTSORT.add graph, 'go to bank',        'fetch money'\n  # LTSORT.add graph, 'have a coffee',     'go home'\n  #.........................................................................................................\n  # tasks = LTSORT.group graph\n  tasks = LTSORT.linearize graph\n  debug '0809', tasks\n  # T.eq tasks, [ [ 'go to bank' ],\n  #   [ 'fetch money' ],\n  #   [ 'buy books', 'buy food' ],\n  #   [ 'have a coffee' ],\n  #   [ 'go home' ],\n  #   [ 'cook' ],\n  #   [ 'eat' ],\n  #   [ 'do some reading' ],\n  #   [ 'go to exam' ] ]\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"cycle detection (1)\" ] = ( T, done ) ->\n  graph = LTSORT.new_graph loners: no\n  #.........................................................................................................\n  LTSORT.add graph, 'A', 'B'\n  LTSORT.linearize graph\n  LTSORT.add graph, 'B', 'C'\n  LTSORT.linearize graph\n  LTSORT.add graph, 'C', 'D'\n  LTSORT.linearize graph\n  LTSORT.add graph, 'D', 'E'\n  LTSORT.linearize graph\n  LTSORT.add graph, 'E', 'A'\n  #.........................................................................................................\n  T.throws \"detected cycle involving node 'A'\", -> urge LTSORT.linearize graph\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"cycle detection (2)\" ] = ( T, done ) ->\n  graph = LTSORT.new_graph loners: no\n  #.........................................................................................................\n  LTSORT.add graph, 'A', 'B'\n  LTSORT.linearize graph\n  LTSORT.add graph, 'B', 'C'\n  LTSORT.linearize graph\n  LTSORT.add graph, 'C', 'D'\n  LTSORT.linearize graph\n  LTSORT.add graph, 'D', 'E'\n  LTSORT.linearize graph\n  LTSORT.add graph, 'E', 'A'\n  #.........................................................................................................\n  T.throws \"detected cycle involving node 'A'\", -> urge LTSORT.group graph\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"linearity (1)\" ] = ( T, done ) ->\n  #.........................................................................................................\n  graph = LTSORT.new_graph loners: no\n  debug()\n  debug groups    = LTSORT.group          graph\n  debug linearity = LTSORT.get_linearity  graph\n  T.eq groups, []\n  T.eq linearity, 1\n  #.........................................................................................................\n  graph = LTSORT.new_graph loners: no\n  LTSORT.add graph, 'A'\n  LTSORT.add graph, 'B'\n  LTSORT.add graph, 'C'\n  debug()\n  debug groups    = LTSORT.group          graph\n  debug linearity = LTSORT.get_linearity  graph\n  T.eq groups, [ [ 'A', 'B', 'C' ] ]\n  T.eq linearity, 0.3333333333333333\n  #.........................................................................................................\n  graph = LTSORT.new_graph loners: no\n  LTSORT.add graph, 'A'\n  LTSORT.add graph, 'B'\n  LTSORT.add graph, 'C'\n  LTSORT.add graph, 'D'\n  LTSORT.add graph, 'E'\n  debug()\n  debug groups    = LTSORT.group          graph\n  debug linearity = LTSORT.get_linearity  graph\n  T.eq groups, [ [ 'A', 'B', 'C', 'D', 'E' ] ]\n  T.eq linearity, 0.2\n  debug()\n  LTSORT.add graph, 'A', 'E'\n  debug groups    = LTSORT.group          graph\n  debug linearity = LTSORT.get_linearity  graph\n  T.eq groups, [ [ 'A', 'B', 'C', 'D' ], [ 'E' ] ]\n  T.eq linearity, 0.4\n  #.........................................................................................................\n  graph = LTSORT.new_graph loners: no\n  LTSORT.add graph, 'A', 'B'\n  LTSORT.add graph, 'B', 'C'\n  debug()\n  debug groups    = LTSORT.group          graph\n  debug linearity = LTSORT.get_linearity  graph\n  T.eq groups, [ [ 'A' ], [ 'B' ], [ 'C' ] ]\n  T.eq linearity, 1\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"linearity (2)\" ] = ( T, done ) ->\n  graph = LTSORT.new_graph loners: no\n  #.........................................................................................................\n  lin   = LTSORT.get_linearity graph\n  nlin  = LTSORT.get_normal_linearity graph\n  T.eq lin, 1\n  T.eq nlin, 1\n  #.........................................................................................................\n  LTSORT.add graph, 'X'\n  lin   = LTSORT.get_linearity graph\n  nlin  = LTSORT.get_normal_linearity graph\n  T.eq lin, 1\n  T.eq nlin, 1\n  #.........................................................................................................\n  LTSORT.add graph, 'Y'\n  lin   = LTSORT.get_linearity graph\n  nlin  = LTSORT.get_normal_linearity graph\n  T.eq lin, 0.5\n  T.eq nlin, 0\n  #.........................................................................................................\n  LTSORT.add graph, 'Z'\n  lin   = LTSORT.get_linearity graph\n  nlin  = LTSORT.get_normal_linearity graph\n  T.eq lin, 0.3333333333333333\n  T.eq nlin, 0\n  #.........................................................................................................\n  LTSORT.add graph, 'A', 'B'\n  LTSORT.add graph, 'B', 'C'\n  lin   = LTSORT.get_linearity graph\n  nlin  = LTSORT.get_normal_linearity graph\n  T.eq lin, 0.5\n  T.eq nlin, 0.4\n  #.........................................................................................................\n  LTSORT.add graph, 'A', 'a'\n  lin = LTSORT.get_linearity graph\n  nlin  = LTSORT.get_normal_linearity graph\n  T.eq lin, 0.42857142857142855\n  T.eq nlin, 0.3333333333333333\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"avoid reduplication\" ] = ( T, done ) ->\n  graph = LTSORT.new_graph loners: no\n  LTSORT.add graph, 'A', 'B'\n  T.eq ( graph[ 'precedents' ].get 'B' ), [ 'A', ]\n  LTSORT.add graph, 'A', 'B'\n  T.eq ( graph[ 'precedents' ].get 'B' ), [ 'A', ]\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Ruby inheritance linearization (1)\" ] = ( T, done ) ->\n  ### patterned after *Ruby's Dark Corners* http://norswap.com/ruby-module-linearization/ ###\n  ###\n  module A3; end\n  module C3\n    include A3\n  end\n  module D3\n    include A3\n  end\n  module E3\n    include C3\n    include D3\n  end\n  # E3.ancestors    => [E3, D3, C3, A3]\n  ###\n  graph = LTSORT.new_graph loners: no\n  group     = ( graph ) -> ( LTSORT.group     graph ).reverse()\n  linearize = ( graph ) -> ( LTSORT.linearize graph ).reverse()\n  LTSORT.add graph, 'A3'\n  LTSORT.add graph, 'A3', 'C3'\n  LTSORT.add graph, 'A3', 'D3'\n  LTSORT.add graph, 'C3', 'E3'\n  LTSORT.add graph, 'C3', 'D3' # b/c in E3, C3 is mentioned earlier than D3\n  LTSORT.add graph, 'D3', 'E3'\n  debug group     graph\n  debug linearize graph\n  T.eq ( group      graph ), [ [ 'E3' ], [ 'D3' ], [ 'C3' ], [ 'A3' ] ]\n  T.eq ( linearize  graph ), [ 'E3', 'D3', 'C3', 'A3' ]\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Ruby inheritance linearization (2)\" ] = ( T, done ) ->\n  ### patterned after *Ruby's Dark Corners* http://norswap.com/ruby-module-linearization/ ###\n  ###\n  module A4; end\n  module B4; end\n  module F4; end\n  module C4\n    include B4\n    include A4\n  end\n  module D4\n    include F4\n    include A4\n  end\n  module E4\n    include C4\n    include D4\n  end\n  # E4.ancestors    => [E4, D4, C4, A4, F4, B4]\n  ###\n  graph = LTSORT.new_graph loners: no\n  group     = ( graph ) -> ( LTSORT.group     graph ).reverse()\n  linearize = ( graph ) -> ( LTSORT.linearize graph ).reverse()\n  LTSORT.add graph, 'A4'\n  LTSORT.add graph, 'B4'\n  LTSORT.add graph, 'F4'\n  LTSORT.add graph, 'B4', 'C4'\n  LTSORT.add graph, 'A4', 'C4'\n  LTSORT.add graph, 'B4', 'A4' # b/c in C4, B4 is mentioned earlier than A4\n\n  LTSORT.add graph, 'F4', 'D4'\n  LTSORT.add graph, 'A4', 'D4'\n  LTSORT.add graph, 'F4', 'A4'\n\n  LTSORT.add graph, 'C4', 'E4'\n  LTSORT.add graph, 'D4', 'E4'\n  LTSORT.add graph, 'C4', 'D4'\n  debug LTSORT.get_linearity graph\n  debug group     graph\n  debug linearize graph\n  # T.eq ( group      graph ), [ [ 'E4' ], [ 'D4' ], [ 'C4' ], [ 'A4' ] ]\n  T.eq ( linearize  graph ), [ 'E4', 'D4', 'C4', 'A4', 'F4', 'B4', ]\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"Ruby inheritance linearization (3)\" ] = ( T, done ) ->\n  ### patterned after *Ruby's Dark Corners* http://norswap.com/ruby-module-linearization/ ###\n  ###\n  module A5; end\n  module B5; end\n  module C5\n    include B5\n    include A5\n  end\n  module D5\n    include A5\n    include B5\n  end\n  module E5\n    include C5\n    include D5\n  end\n\n  # E5.ancestors    => [E5, D5, C5, A5, B5]\n  ###\n  graph = LTSORT.new_graph loners: no\n  group     = ( graph ) -> ( LTSORT.group     graph ).reverse()\n  linearize = ( graph ) -> ( LTSORT.linearize graph ).reverse()\n  LTSORT.add graph, 'A5'\n  LTSORT.add graph, 'B5'\n  LTSORT.add graph, 'B5', 'C5'\n  LTSORT.add graph, 'A5', 'C5'\n  LTSORT.add graph, 'B5', 'A5'\n  LTSORT.add graph, 'A5', 'D5'\n  LTSORT.add graph, 'B5', 'D5'\n  # LTSORT.add graph, 'A5', 'B5'\n  LTSORT.add graph, 'C5', 'E5'\n  LTSORT.add graph, 'D5', 'E5'\n  LTSORT.add graph, 'C5', 'D5'\n  debug LTSORT.get_linearity graph\n  debug group     graph\n  debug linearize graph\n  # T.eq ( group      graph ), [ [ 'E5' ], [ 'D5' ], [ 'C5' ], [ 'A5' ] ]\n  # T.eq ( linearize  graph ), [ 'E5', 'D5', 'C5', 'A5', 'F5', 'B5', ]\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@demo = ( T ) ->\n  elements  = @_probes[ 'small' ]\n  graph     = LTSORT.populate ( LTSORT.new_graph loners: no ), elements\n  #.........................................................................................................\n  for element in LTSORT.linearize graph\n    help element\n  #.........................................................................................................\n  debug graph\n  # help LTSORT.find_root_nodes graph, no\n  if LTSORT.has_nodes graph\n    if ( lone_nodes = LTSORT.find_lone_nodes graph ).length > 0\n      info CND.rainbow lone_nodes\n      LTSORT.delete graph, lone_node for lone_node in lone_nodes\n  while LTSORT.has_nodes graph\n    root_nodes = LTSORT.find_root_nodes graph\n    info CND.rainbow root_nodes\n    LTSORT.delete graph, root_node for root_node in root_nodes\n  # debug graph\n  # CND.dir LTSORT\n  return null\n\n\n#===========================================================================================================\n# MAIN\n#-----------------------------------------------------------------------------------------------------------\n@_main = ( handler ) ->\n  test @, 'timeout': 2500\n\n#-----------------------------------------------------------------------------------------------------------\n@_prune = ->\n  for name, value of @\n    continue if name.startsWith '_'\n    delete @[ name ] unless name in include\n  return null\n\n\n############################################################################################################\nunless module.parent?\n  include = [\n    # \"demo\",\n    \"sorting\"\n    \"existence\"\n    \"deletion\"\n    \"root nodes, lone nodes (1)\"\n    \"root nodes, lone nodes (2)\"\n    \"copy (1)\"\n    \"copy (2)\"\n    \"group (1)\"\n    \"group (2)\"\n    \"group (3)\"\n    \"group (4)\"\n    \"test for lone node\"\n    \"demo (1)\"\n    \"demo (2)\"\n    \"demo (3)\"\n    \"demo (4)\"\n    \"using precedents, actions, and consequents\"\n    \"cycle detection (1)\"\n    \"cycle detection (2)\"\n    \"linearity (1)\"\n    \"linearity (2)\"\n    \"avoid reduplication\"\n    \"Ruby inheritance linearization (1)\"\n    \"Ruby inheritance linearization (2)\"\n    \"Ruby inheritance linearization (3)\"\n    ]\n\n  @_prune()\n  @_main()\n\n  # debug '\\n' + JSON.stringify ( Object.keys @ ), null, '  '\n\n\n\n\n\n"]}