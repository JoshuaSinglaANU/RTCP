{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'JFEE'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of\n  validate }              = types.export()\n{ freeze, }               = Object\n\n#-----------------------------------------------------------------------------------------------------------\ndefaults =\n  bare: false\n  raw:  true\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare \"jfee_settings\", tests:\n  \"x is an object\":           ( x ) -> @isa.object x\n  \"x.bare is a boolean\":      ( x ) -> @isa.boolean x.bare\n  \"x.raw is a boolean\":       ( x ) -> @isa.boolean x.raw\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass @Receiver # extends Object\n  constructor: ( settings ) ->\n    @settings             = freeze { defaults..., settings..., }\n    validate.jfee_settings @settings\n    @collector            = []\n    @[ Symbol.iterator ]  = -> yield from @collector; @collector = []\n    @_resolve             = ->\n    @done                 = false\n    @initializer          = null\n    @is_first             = true\n    @send                 = _send.bind @\n    @advance              = _advance.bind @\n    @ratchet              = new Promise ( resolve ) => @_resolve = resolve\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  add_data_channel: ( eventemitter, eventname, $key ) ->\n    switch type = types.type_of $key\n      when 'null', 'undefined'\n        handler = ( $value ) =>\n          @send $value\n          @advance()\n      when 'text'\n        validate.nonempty_text $key\n        handler = ( $value ) =>\n          @send freeze { $key, $value, }\n          @advance()\n      when 'function'\n        handler = ( $value ) =>\n          @send $key $value\n          @advance()\n      when 'generatorfunction'\n        handler = ( $value ) =>\n          @send d for d from $key $value\n          @advance()\n      else\n        throw new Error \"^receiver/add_data_channel@445^ expected a text, a function, or a generatorfunction, got a #{type}\"\n    eventemitter.on eventname, handler\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT make `$key` behave as in `add_data_channel()` ###\n  add_initializer: ( $key ) ->\n    ### Send a datom before any other data. ###\n    validate.nonempty_text $key\n    @initializer = freeze { $key, }\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT make `$key` behave as in `add_data_channel()` ###\n  add_terminator: ( eventemitter, eventname, $key = null ) ->\n    ### Terminates async iterator after sending an optional datom to mark termination in stream. ###\n    eventemitter.on eventname, =>\n      @send freeze { $key, } if $key?\n      @advance false\n\n  #---------------------------------------------------------------------------------------------------------\n  @from_child_process: ( cp, settings ) ->\n    validate.childprocess cp\n    rcv = new Receiver settings\n    rcv.add_initializer   '<cp' unless rcv.settings.bare\n    rcv.add_data_channel  cp.stdout, 'data', '^stdout'\n    rcv.add_data_channel  cp.stderr, 'data', '^stderr'\n    rcv.add_terminator    cp, 'close', if rcv.settings.bare then null else '>cp'\n    while not rcv.done\n      await rcv.ratchet; yield from rcv\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  @from_readstream: ( stream, settings ) ->\n    validate.readstream stream\n    rcv = new Receiver settings\n    rcv.add_initializer  '<stream' unless rcv.settings.bare\n    rcv.add_data_channel  stream, 'data',   if rcv.settings.raw  then null else '^line'\n    rcv.add_terminator    stream, 'close',  if rcv.settings.bare then null else '>stream'\n    while not rcv.done\n      await rcv.ratchet; yield from rcv\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n_send = ( d ) ->\n  if @is_first\n    @is_first = false\n    @collector.push @initializer if @initializer?\n  @collector.push d\n\n#-----------------------------------------------------------------------------------------------------------\n_advance  = ( go_on = true ) ->\n  @done     = not go_on\n  @_resolve()\n  @ratchet  = new Promise ( resolve ) => @_resolve = resolve\n\n\n# #===========================================================================================================\n# #\n# #-----------------------------------------------------------------------------------------------------------\n# create_translation_pipeline = ( file_path ) -> new Promise ( resolve_outer, reject_outer ) =>\n#   validate.nonempty_text file_path\n#   #---------------------------------------------------------------------------------------------------------\n#   SP = require 'steampipes'\n#   { $\n#     $watch\n#     $drain }  = SP.export()\n#   #---------------------------------------------------------------------------------------------------------\n#   $split_lines = ->\n#     ctx   = SL.new_context()\n#     last  = Symbol 'last'\n#     return $ { last, }, ( d, send ) =>\n#       if d is last\n#         send line for line from SL.flush ctx\n#         return null\n#       return if not d?\n#       return if not isa.buffer d\n#       send line for line from SL.walk_lines ctx, d\n#       return null\n#   #---------------------------------------------------------------------------------------------------------\n#   $skip_empty_etc = -> SP.$filter ( d ) =>\n#     return false if d is ''\n#     return true\n#   #---------------------------------------------------------------------------------------------------------\n#   $as_batches = ->\n#     collector = null\n#     n         = 1e4\n#     last      = Symbol 'last'\n#     return $ { last, }, ( d, send ) ->\n#       if d is last\n#         if collector?\n#           send collector\n#           collector = null\n#         return\n#       return send d unless isa.text d\n#       ( collector ?= [] ).push d\n#       if collector.length >= n\n#         send collector\n#         collector = null\n#   #---------------------------------------------------------------------------------------------------------\n#   $as_sql_insert = ->\n#     return $ ( batch, send ) ->\n#       return send batch unless isa.list batch\n#       send \"\"\"insert into T.pwd ( pwd ) values\"\"\"\n#       last_idx  = batch.length - 1\n#       for d, idx in batch\n#         d_sql = d\n#         ### TAINT also remove other control characters, U+fdfe etc ###\n#         d_sql = d_sql.replace /\\\\x([0-9a-f][0-9a-f])/g, ( $0, $1 ) -> String.fromCodePoint parseInt $1, 16\n#         d_sql = d_sql.replace /[\\x00-\\x1f�]/g, ''\n#         d_sql = d_sql.replace /'/g, \"''\"\n#         comma = if idx is last_idx then ';' else ','\n#         send \"\"\"( '#{d_sql}' )#{comma}\"\"\"\n#   #---------------------------------------------------------------------------------------------------------\n#   $echo = ->\n#     return $watch ( d ) ->\n#       if isa.text d\n#         process.stdout.write d + '\\n'\n#       else\n#         process.stderr.write ( CND.grey d ) + '\\n'\n#   #---------------------------------------------------------------------------------------------------------\n#   source      = SP.new_push_source()\n#   pipeline    = []\n#   pipeline.push source\n#   pipeline.push $split_lines()\n#   pipeline.push $skip_empty_etc()\n#   pipeline.push $as_batches()\n#   pipeline.push $as_sql_insert()\n#   pipeline.push $echo()\n#   pipeline.push $drain ->\n#     help \"^3776^ pipeline: finished\"\n#     return resolve_outer()\n#   SP.pull pipeline...\n#   #.........................................................................................................\n#   stream = FS.createReadStream file_path\n#   source.send x for await x from Receiver.from_readstream stream\n#   source.end()\n#   return null\n"
  ]
}