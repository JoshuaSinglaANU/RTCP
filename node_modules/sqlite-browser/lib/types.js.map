{
  "version": 3,
  "file": "types.js",
  "sourceRoot": "..",
  "sources": [
    "src/types.coffee"
  ],
  "names": [],
  "mappings": ";AAGA;EAAA;AAAA,MAAA,GAAA,EAAA,SAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,EAAA,GAA4B,IAAI,CAAC;;EACjC,SAAA,GAA4B,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC;;EACpD,SAAA,GAA4B,IAAI,SAAJ,CAAc,MAAM,CAAC,OAArB,EAhB5B;;;;;;;;;EA0BA,IAAC,CAAA,OAAD,CAAS,eAAT,EACE;IAAA,KAAA,EACE;MAAA,eAAA,EAA0C,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,MAAL,CAAqB,CAArB;MAAT;IAA1C;EADF,CADF,EA1BA;;;;;;;;;;;;EAwCA,IAAC,CAAA,OAAD,CAAS,cAAT,EACE;IAAA,KAAA,EACE;MAAA,sBAAA,EAAiD,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,aAAL,CAA4B,CAA5B;MAAT;IAAjD;EADF,CADF,EAxCA;;;EA6CA,IAAC,CAAA,OAAD,CAAS,UAAT,EACE;IAAA,KAAA,EACE;MAAA,sBAAA,EAAiD,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,aAAL,CAA4B,CAA5B;MAAT;IAAjD;EADF,CADF;AA7CA",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'SQLITE-BROWSER/TYPES'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\njr                        = JSON.stringify\nIntertype                 = ( require 'intertype' ).Intertype\nintertype                 = new Intertype module.exports\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @declare 'pd_datom_sigil',\n#   tests:\n#     \"x is a chr\":                             ( x ) -> @isa.chr x\n#     \"x has sigil\":                            ( x ) -> x in '^<>~[]'\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'sqlb_settings',\n  tests:\n    \"x is a object\":                          ( x ) -> @isa.object          x\n#     \"x has key 'key'\":                        ( x ) -> @has_key             x, 'key'\n#     \"x.key is a pd_datom_key\":                ( x ) -> @isa.pd_datom_key    x.key\n#     \"x.$stamped is an optional boolean\":      ( x ) -> ( not x.$stamped? ) or ( @isa.boolean x.$stamped )\n#     \"x.$dirty is an optional boolean\":        ( x ) -> ( not x.$dirty?   ) or ( @isa.boolean x.$dirty   )\n#     \"x.$fresh is an optional boolean\":        ( x ) -> ( not x.$fresh?   ) or ( @isa.boolean x.$fresh   )\n#     #.......................................................................................................\n#     \"x.$vnr is an optional nonempty list of positive integers\": ( x ) ->\n#       ( not x.$vnr? ) or @isa.pd_nonempty_list_of_positive_integers x.$vnr\n\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'sqlb_db_path',\n  tests:\n    \"x is a nonempty_text\":                          ( x ) -> @isa.nonempty_text          x\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'sqlb_key',\n  tests:\n    \"x is a nonempty_text\":                          ( x ) -> @isa.nonempty_text          x\n\n\n"
  ]
}