{
  "version": 3,
  "file": "db.js",
  "sourceRoot": "..",
  "sources": [
    "src/db.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'SQLITE-BROWSER/DB'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\n# FS                        = require 'fs'\nPD                        = require 'pipedreams'\n{ $\n  $async\n  select }                = PD\n{ assign\n  jr }                    = CND\n{ cwd_abspath\n  cwd_relpath\n  here_abspath\n  _drop_extension\n  project_abspath }       = require './helpers'\n#...........................................................................................................\njoin_path                 = ( P... ) -> PATH.resolve PATH.join P...\nboolean_as_int            = ( x ) -> if x then 1 else 0\n{ inspect, }              = require 'util'\nxrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\nxrpr2                     = ( x ) -> inspect x, { colors: yes, breakLength: 80,       maxArrayLength: Infinity, depth: Infinity, }\n#...........................................................................................................\nICQL                      = require 'icql'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_icql_settings = ( db_path ) ->\n  defaults          =\n    connector:        require 'better-sqlite3' ### TAINT stopgap, will be moved into ICQL ###\n    db_path:          db_path\n    icql_path:        project_abspath './db/sqlite-browser.icql'\n    clear:            false\n  R                 = assign {}, defaults\n  R.db_path         = cwd_abspath R.db_path\n  R.icql_path       = cwd_abspath R.icql_path\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@new_db = ( db_path ) ->\n  settings              = @_get_icql_settings db_path\n  db                    = ICQL.bind settings\n  @load_extensions      db\n  @set_pragmas          db\n  #.........................................................................................................\n  if settings.clear\n    clear_count = db.$.clear()\n  #.........................................................................................................\n  @create_db_functions  db\n  return db\n\n#-----------------------------------------------------------------------------------------------------------\n@set_pragmas = ( db ) ->\n  db.$.pragma 'foreign_keys = on'\n  db.$.pragma 'synchronous = off' ### see https://sqlite.org/pragma.html#pragma_synchronous ###\n  db.$.pragma 'journal_mode = WAL' ### see https://github.com/JoshuaWise/better-sqlite3/issues/125 ###\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@load_extensions = ( db ) ->\n  return null\n  # extensions_path = project_abspath './sqlite-for-mingkwai-ime/extensions'\n  # debug 'Âµ39982', \"extensions_path\", extensions_path\n  # db.$.load join_path extensions_path, 'spellfix.so'\n  # db.$.load join_path extensions_path, 'csv.so'\n  # db.$.load join_path extensions_path, 'regexp.so'\n  # db.$.load join_path extensions_path, 'series.so'\n  # db.$.load join_path extensions_path, 'nextchar.so'\n  # # db.$.load join_path extensions_path, 'stmt.so'\n  # #.........................................................................................................\n  # return null\n\n#-----------------------------------------------------------------------------------------------------------\n@create_db_functions = ( db ) ->\n  # db.$.function 'add_spellfix_confusable', ( a, b ) ->\n  # db.$.function 'spellfix1_phonehash', ( x ) ->\n  #   debug '23363', x\n  #   return x.toUpperCase()\n\n  #---------------------------------------------------------------------------------------------------------\n  db.$.function 'echo', { deterministic: false, varargs: true }, ( P... ) ->\n    ### Output text to command line. ###\n    ### TAINT consider to use logging method to output to app console. ###\n    urge ( CND.grey 'DB' ), P...\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  db.$.function 'e', { deterministic: false, varargs: false }, ( x ) ->\n    ### Output text to command line, but returns single input value so can be used within an expression. ###\n    urge ( CND.grey 'DB' ), rpr x\n    return x\n\n  #---------------------------------------------------------------------------------------------------------\n  db.$.function 'e', { deterministic: false, varargs: false }, ( mark, x ) ->\n    ### Output text to command line, but returns single input value so can be used within an expression. ###\n    urge ( CND.grey \"DB #{mark}\" ), rpr x\n    return x\n\n  #---------------------------------------------------------------------------------------------------------\n  db.$.function 'contains_word', { deterministic: true, varargs: false }, ( text, probe ) ->\n    return if ( ( ' ' + text + ' ' ).indexOf ' ' + probe + ' ' ) > -1 then 1 else 0\n\n  #---------------------------------------------------------------------------------------------------------\n  db.$.function 'get_words', { deterministic: true, varargs: false }, ( text ) ->\n    ### Given a text, return a JSON array with words (whitespace-separated non-empty substrings). ###\n    JSON.stringify ( word for word in text.split /\\s+/ when word isnt '' )\n\n  # #---------------------------------------------------------------------------------------------------------\n  # db.$.function 'vnr_encode_textual', { deterministic: true, varargs: false }, ( vnr ) ->\n  #   ( ( \"#{idx}\".padStart 6, '0' ) for idx in ( JSON.parse vnr ) ).join '-'\n\n  #---------------------------------------------------------------------------------------------------------\n  db.$.function 'vnr_encode', { deterministic: true, varargs: false }, ( vnr ) ->\n    try\n      Uint32Array.from JSON.parse vnr\n    catch error\n      warn \"Âµ33211 when trying to convert #{xrpr2 vnr}\"\n      warn \"Âµ33211 to a typed array, an error occurred:\"\n      warn \"Âµ33211 #{error.message}\"\n      throw error\n\n  #---------------------------------------------------------------------------------------------------------\n  return null\n\n\n\n\n\n\n\n"
  ]
}