{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'SQLITE-BROWSER/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n{ assign\n  jr }                    = CND\n#...........................................................................................................\nrequire './exception-handler'\ntypes                     = require './types'\n{ isa\n  validate\n  type_of }               = types\nFS                        = require 'fs'\nPATH                      = require 'path'\n# glob                      = require 'glob'\n# minimatch                 = require 'minimatch'\nPD                        = require 'pipedreams'\n{ $\n  $async\n  select }                = PD\n#...........................................................................................................\nPSPG                      = require 'pspg'\nDB                        = require './db'\n\n#-----------------------------------------------------------------------------------------------------------\n_$count = ( step ) ->\n  nr = 0\n  return PD.$watch ( d ) =>\n    nr += +1\n    if ( nr %% step ) is 0\n      whisper 'µ44744', nr\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@browse = ( db_path, key, value ) -> new Promise ( resolve, reject ) =>\n  # validate.sqlb_settings settings\n  throw new Error \"µ33221 Error\" unless key is 'c'\n  validate.nonempty_text value\n  S       = {}\n  S.db    = DB.new_db db_path\n  sql     = value\n  source  = PD.new_generator_source S.db.$.query sql\n  #.........................................................................................................\n  pipeline = []\n  pipeline.push source\n  pipeline.push _$count 100\n  ### TAINT resolve may be called twice ###\n  # pipeline.push PD.$sort()                          if testing\n  pipeline.push PSPG.$tee_as_table -> resolve()\n  ### TAINT resolve may be called before tee has finished writing (?) ###\n  pipeline.push PD.$drain()\n  PD.pull pipeline...\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@cli = ( db_path, key, value ) ->\n  #.......................................................................................................\n  validate.sqlb_db_path db_path\n  validate.sqlb_key     key\n  # debug 'µ33444', arguments\n  # debug 'µ33444', \"running #{__filename} #{jr [ db_path, key, value, ]}\"\n  await @browse db_path, key, value\n  # settings = L.new_settings './README.md'\n  # db_path = PATH.resolve '/home/flow/jzr/mkts-mirage/db/mkts.db'\n  # await L.browse db_path, 'c', \"select * from main;\"\n  # help 'ok'\n\n\n############################################################################################################\nunless module.parent?\n  testing = true\n  L = @\n  do ->\n    await L.cli process.argv[ 2 .. ]...\n    help 'ok'\n\n\n"
  ]
}